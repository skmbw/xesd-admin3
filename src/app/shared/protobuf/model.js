/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from 'protobufjs/minimal';

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const com = $root.com = (() => {

    /**
     * Namespace com.
     * @exports com
     * @namespace
     */
    const com = {};

    com.xueershangda = (function() {

        /**
         * Namespace xueershangda.
         * @memberof com
         * @namespace
         */
        const xueershangda = {};

        xueershangda.tianxun = (function() {

            /**
             * Namespace tianxun.
             * @memberof com.xueershangda
             * @namespace
             */
            const tianxun = {};

            tianxun.account = (function() {

                /**
                 * Namespace account.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const account = {};

                account.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.account
                     * @namespace
                     */
                    const model = {};

                    model.AccountDetail = (function() {

                        /**
                         * Properties of an AccountDetail.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @interface IAccountDetail
                         * @property {string|null} [id] AccountDetail id
                         * @property {string|null} [userId] AccountDetail userId
                         * @property {string|null} [accountId] AccountDetail accountId
                         * @property {number|null} [amount] AccountDetail amount
                         * @property {number|null} [category] AccountDetail category
                         * @property {number|Long|null} [operationTime] AccountDetail operationTime
                         * @property {string|null} [ordersId] AccountDetail ordersId
                         * @property {string|null} [tradeNo] AccountDetail tradeNo
                         * @property {number|null} [state] AccountDetail state
                         * @property {number|Long|null} [updateDate] AccountDetail updateDate
                         * @property {number|null} [page] AccountDetail page
                         * @property {number|null} [pageSize] AccountDetail pageSize
                         * @property {string|null} [orderBy] AccountDetail orderBy
                         */

                        /**
                         * Constructs a new AccountDetail.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @classdesc Represents an AccountDetail.
                         * @implements IAccountDetail
                         * @constructor
                         * @param {com.xueershangda.tianxun.account.model.IAccountDetail=} [properties] Properties to set
                         */
                        function AccountDetail(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AccountDetail id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.id = "";

                        /**
                         * AccountDetail userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.userId = "";

                        /**
                         * AccountDetail accountId.
                         * @member {string} accountId
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.accountId = "";

                        /**
                         * AccountDetail amount.
                         * @member {number} amount
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.amount = 0;

                        /**
                         * AccountDetail category.
                         * @member {number} category
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.category = 0;

                        /**
                         * AccountDetail operationTime.
                         * @member {number|Long} operationTime
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.operationTime = 0;

                        /**
                         * AccountDetail ordersId.
                         * @member {string} ordersId
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.ordersId = "";

                        /**
                         * AccountDetail tradeNo.
                         * @member {string} tradeNo
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.tradeNo = "";

                        /**
                         * AccountDetail state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.state = 0;

                        /**
                         * AccountDetail updateDate.
                         * @member {number|Long} updateDate
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.updateDate = 0;

                        /**
                         * AccountDetail page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.page = 0;

                        /**
                         * AccountDetail pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.pageSize = 0;

                        /**
                         * AccountDetail orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         */
                        AccountDetail.prototype.orderBy = "";

                        /**
                         * Creates a new AccountDetail instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccountDetail=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.account.model.AccountDetail} AccountDetail instance
                         */
                        AccountDetail.create = function create(properties) {
                            return new AccountDetail(properties);
                        };

                        /**
                         * Encodes the specified AccountDetail message. Does not implicitly {@link com.xueershangda.tianxun.account.model.AccountDetail.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccountDetail} message AccountDetail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountDetail.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);
                            if (message.accountId != null && message.hasOwnProperty("accountId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.accountId);
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                writer.uint32(/* id 4, wireType 1 =*/33).double(message.amount);
                            if (message.category != null && message.hasOwnProperty("category"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.category);
                            if (message.operationTime != null && message.hasOwnProperty("operationTime"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.operationTime);
                            if (message.ordersId != null && message.hasOwnProperty("ordersId"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.ordersId);
                            if (message.tradeNo != null && message.hasOwnProperty("tradeNo"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.tradeNo);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.state);
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.updateDate);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.orderBy);
                            return writer;
                        };

                        /**
                         * Encodes the specified AccountDetail message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.account.model.AccountDetail.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccountDetail} message AccountDetail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountDetail.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AccountDetail message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.account.model.AccountDetail} AccountDetail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountDetail.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.account.model.AccountDetail();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.userId = reader.string();
                                    break;
                                case 3:
                                    message.accountId = reader.string();
                                    break;
                                case 4:
                                    message.amount = reader.double();
                                    break;
                                case 5:
                                    message.category = reader.int32();
                                    break;
                                case 6:
                                    message.operationTime = reader.int64();
                                    break;
                                case 7:
                                    message.ordersId = reader.string();
                                    break;
                                case 8:
                                    message.tradeNo = reader.string();
                                    break;
                                case 9:
                                    message.state = reader.int32();
                                    break;
                                case 10:
                                    message.updateDate = reader.int64();
                                    break;
                                case 11:
                                    message.page = reader.int32();
                                    break;
                                case 12:
                                    message.pageSize = reader.int32();
                                    break;
                                case 13:
                                    message.orderBy = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AccountDetail message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.account.model.AccountDetail} AccountDetail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountDetail.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AccountDetail message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AccountDetail.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.accountId != null && message.hasOwnProperty("accountId"))
                                if (!$util.isString(message.accountId))
                                    return "accountId: string expected";
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                if (typeof message.amount !== "number")
                                    return "amount: number expected";
                            if (message.category != null && message.hasOwnProperty("category"))
                                if (!$util.isInteger(message.category))
                                    return "category: integer expected";
                            if (message.operationTime != null && message.hasOwnProperty("operationTime"))
                                if (!$util.isInteger(message.operationTime) && !(message.operationTime && $util.isInteger(message.operationTime.low) && $util.isInteger(message.operationTime.high)))
                                    return "operationTime: integer|Long expected";
                            if (message.ordersId != null && message.hasOwnProperty("ordersId"))
                                if (!$util.isString(message.ordersId))
                                    return "ordersId: string expected";
                            if (message.tradeNo != null && message.hasOwnProperty("tradeNo"))
                                if (!$util.isString(message.tradeNo))
                                    return "tradeNo: string expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                if (!$util.isInteger(message.updateDate) && !(message.updateDate && $util.isInteger(message.updateDate.low) && $util.isInteger(message.updateDate.high)))
                                    return "updateDate: integer|Long expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            return null;
                        };

                        /**
                         * Creates an AccountDetail message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.account.model.AccountDetail} AccountDetail
                         */
                        AccountDetail.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.account.model.AccountDetail)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.account.model.AccountDetail();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.accountId != null)
                                message.accountId = String(object.accountId);
                            if (object.amount != null)
                                message.amount = Number(object.amount);
                            if (object.category != null)
                                message.category = object.category | 0;
                            if (object.operationTime != null)
                                if ($util.Long)
                                    (message.operationTime = $util.Long.fromValue(object.operationTime)).unsigned = false;
                                else if (typeof object.operationTime === "string")
                                    message.operationTime = parseInt(object.operationTime, 10);
                                else if (typeof object.operationTime === "number")
                                    message.operationTime = object.operationTime;
                                else if (typeof object.operationTime === "object")
                                    message.operationTime = new $util.LongBits(object.operationTime.low >>> 0, object.operationTime.high >>> 0).toNumber();
                            if (object.ordersId != null)
                                message.ordersId = String(object.ordersId);
                            if (object.tradeNo != null)
                                message.tradeNo = String(object.tradeNo);
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.updateDate != null)
                                if ($util.Long)
                                    (message.updateDate = $util.Long.fromValue(object.updateDate)).unsigned = false;
                                else if (typeof object.updateDate === "string")
                                    message.updateDate = parseInt(object.updateDate, 10);
                                else if (typeof object.updateDate === "number")
                                    message.updateDate = object.updateDate;
                                else if (typeof object.updateDate === "object")
                                    message.updateDate = new $util.LongBits(object.updateDate.low >>> 0, object.updateDate.high >>> 0).toNumber();
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            return message;
                        };

                        /**
                         * Creates a plain object from an AccountDetail message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.AccountDetail} message AccountDetail
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AccountDetail.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.userId = "";
                                object.accountId = "";
                                object.amount = 0;
                                object.category = 0;
                                object.operationTime = 0;
                                object.ordersId = "";
                                object.tradeNo = "";
                                object.state = 0;
                                object.updateDate = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.accountId != null && message.hasOwnProperty("accountId"))
                                object.accountId = message.accountId;
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                            if (message.category != null && message.hasOwnProperty("category"))
                                object.category = message.category;
                            if (message.operationTime != null && message.hasOwnProperty("operationTime"))
                                if (typeof message.operationTime === "number")
                                    object.operationTime = options.longs === String ? String(message.operationTime) : message.operationTime;
                                else
                                    object.operationTime = options.longs === String ? $util.Long.prototype.toString.call(message.operationTime) : options.longs === Number ? new $util.LongBits(message.operationTime.low >>> 0, message.operationTime.high >>> 0).toNumber() : message.operationTime;
                            if (message.ordersId != null && message.hasOwnProperty("ordersId"))
                                object.ordersId = message.ordersId;
                            if (message.tradeNo != null && message.hasOwnProperty("tradeNo"))
                                object.tradeNo = message.tradeNo;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                if (typeof message.updateDate === "number")
                                    object.updateDate = options.longs === String ? String(message.updateDate) : message.updateDate;
                                else
                                    object.updateDate = options.longs === String ? $util.Long.prototype.toString.call(message.updateDate) : options.longs === Number ? new $util.LongBits(message.updateDate.low >>> 0, message.updateDate.high >>> 0).toNumber() : message.updateDate;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };

                        /**
                         * Converts this AccountDetail to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetail
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AccountDetail.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AccountDetail;
                    })();

                    model.AccountDetailReply = (function() {

                        /**
                         * Properties of an AccountDetailReply.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @interface IAccountDetailReply
                         * @property {number|null} [code] AccountDetailReply code
                         * @property {string|null} [message] AccountDetailReply message
                         * @property {Array.<com.xueershangda.tianxun.account.model.IAccountDetail>|null} [data] AccountDetailReply data
                         * @property {com.xueershangda.tianxun.account.model.IAccount|null} [account] AccountDetailReply account
                         */

                        /**
                         * Constructs a new AccountDetailReply.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @classdesc Represents an AccountDetailReply.
                         * @implements IAccountDetailReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.account.model.IAccountDetailReply=} [properties] Properties to set
                         */
                        function AccountDetailReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AccountDetailReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @instance
                         */
                        AccountDetailReply.prototype.code = 0;

                        /**
                         * AccountDetailReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @instance
                         */
                        AccountDetailReply.prototype.message = "";

                        /**
                         * AccountDetailReply data.
                         * @member {Array.<com.xueershangda.tianxun.account.model.IAccountDetail>} data
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @instance
                         */
                        AccountDetailReply.prototype.data = $util.emptyArray;

                        /**
                         * AccountDetailReply account.
                         * @member {com.xueershangda.tianxun.account.model.IAccount|null|undefined} account
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @instance
                         */
                        AccountDetailReply.prototype.account = null;

                        /**
                         * Creates a new AccountDetailReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccountDetailReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.account.model.AccountDetailReply} AccountDetailReply instance
                         */
                        AccountDetailReply.create = function create(properties) {
                            return new AccountDetailReply(properties);
                        };

                        /**
                         * Encodes the specified AccountDetailReply message. Does not implicitly {@link com.xueershangda.tianxun.account.model.AccountDetailReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccountDetailReply} message AccountDetailReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountDetailReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.account.model.AccountDetail.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.account != null && message.hasOwnProperty("account"))
                                $root.com.xueershangda.tianxun.account.model.Account.encode(message.account, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified AccountDetailReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.account.model.AccountDetailReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccountDetailReply} message AccountDetailReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountDetailReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AccountDetailReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.account.model.AccountDetailReply} AccountDetailReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountDetailReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.account.model.AccountDetailReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.account.model.AccountDetail.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    message.account = $root.com.xueershangda.tianxun.account.model.Account.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AccountDetailReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.account.model.AccountDetailReply} AccountDetailReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountDetailReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AccountDetailReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AccountDetailReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.account.model.AccountDetail.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.account != null && message.hasOwnProperty("account")) {
                                let error = $root.com.xueershangda.tianxun.account.model.Account.verify(message.account);
                                if (error)
                                    return "account." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates an AccountDetailReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.account.model.AccountDetailReply} AccountDetailReply
                         */
                        AccountDetailReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.account.model.AccountDetailReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.account.model.AccountDetailReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.account.model.AccountDetailReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.account.model.AccountDetailReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.account.model.AccountDetail.fromObject(object.data[i]);
                                }
                            }
                            if (object.account != null) {
                                if (typeof object.account !== "object")
                                    throw TypeError(".com.xueershangda.tianxun.account.model.AccountDetailReply.account: object expected");
                                message.account = $root.com.xueershangda.tianxun.account.model.Account.fromObject(object.account);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an AccountDetailReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.AccountDetailReply} message AccountDetailReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AccountDetailReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                                object.account = null;
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.account.model.AccountDetail.toObject(message.data[j], options);
                            }
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = $root.com.xueershangda.tianxun.account.model.Account.toObject(message.account, options);
                            return object;
                        };

                        /**
                         * Converts this AccountDetailReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.account.model.AccountDetailReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AccountDetailReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AccountDetailReply;
                    })();

                    model.Account = (function() {

                        /**
                         * Properties of an Account.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @interface IAccount
                         * @property {string|null} [id] Account id
                         * @property {string|null} [alipay] Account alipay
                         * @property {string|null} [weixin] Account weixin
                         * @property {number|null} [balance] Account balance
                         * @property {string|null} [userId] Account userId
                         * @property {string|null} [account] Account account
                         * @property {number|null} [payment] Account payment
                         * @property {number|null} [income] Account income
                         * @property {number|null} [recharge] Account recharge
                         * @property {number|null} [state] Account state
                         * @property {number|Long|null} [createDate] Account createDate
                         * @property {number|null} [page] Account page
                         * @property {number|null} [pageSize] Account pageSize
                         * @property {string|null} [orderBy] Account orderBy
                         * @property {string|null} [avatar] Account avatar
                         * @property {string|null} [text] Account text
                         */

                        /**
                         * Constructs a new Account.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @classdesc Represents an Account.
                         * @implements IAccount
                         * @constructor
                         * @param {com.xueershangda.tianxun.account.model.IAccount=} [properties] Properties to set
                         */
                        function Account(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Account id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.id = "";

                        /**
                         * Account alipay.
                         * @member {string} alipay
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.alipay = "";

                        /**
                         * Account weixin.
                         * @member {string} weixin
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.weixin = "";

                        /**
                         * Account balance.
                         * @member {number} balance
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.balance = 0;

                        /**
                         * Account userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.userId = "";

                        /**
                         * Account account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.account = "";

                        /**
                         * Account payment.
                         * @member {number} payment
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.payment = 0;

                        /**
                         * Account income.
                         * @member {number} income
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.income = 0;

                        /**
                         * Account recharge.
                         * @member {number} recharge
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.recharge = 0;

                        /**
                         * Account state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.state = 0;

                        /**
                         * Account createDate.
                         * @member {number|Long} createDate
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.createDate = 0;

                        /**
                         * Account page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.page = 0;

                        /**
                         * Account pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.pageSize = 0;

                        /**
                         * Account orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.orderBy = "";

                        /**
                         * Account avatar.
                         * @member {string} avatar
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.avatar = "";

                        /**
                         * Account text.
                         * @member {string} text
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         */
                        Account.prototype.text = "";

                        /**
                         * Creates a new Account instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccount=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.account.model.Account} Account instance
                         */
                        Account.create = function create(properties) {
                            return new Account(properties);
                        };

                        /**
                         * Encodes the specified Account message. Does not implicitly {@link com.xueershangda.tianxun.account.model.Account.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccount} message Account message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Account.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.alipay != null && message.hasOwnProperty("alipay"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.alipay);
                            if (message.weixin != null && message.hasOwnProperty("weixin"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.weixin);
                            if (message.balance != null && message.hasOwnProperty("balance"))
                                writer.uint32(/* id 4, wireType 1 =*/33).double(message.balance);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.userId);
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.account);
                            if (message.payment != null && message.hasOwnProperty("payment"))
                                writer.uint32(/* id 7, wireType 1 =*/57).double(message.payment);
                            if (message.income != null && message.hasOwnProperty("income"))
                                writer.uint32(/* id 8, wireType 1 =*/65).double(message.income);
                            if (message.recharge != null && message.hasOwnProperty("recharge"))
                                writer.uint32(/* id 9, wireType 1 =*/73).double(message.recharge);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.state);
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int64(message.createDate);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 14, wireType 2 =*/114).string(message.orderBy);
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                writer.uint32(/* id 15, wireType 2 =*/122).string(message.avatar);
                            if (message.text != null && message.hasOwnProperty("text"))
                                writer.uint32(/* id 16, wireType 2 =*/130).string(message.text);
                            return writer;
                        };

                        /**
                         * Encodes the specified Account message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.account.model.Account.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccount} message Account message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Account.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Account message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.account.model.Account} Account
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Account.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.account.model.Account();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.alipay = reader.string();
                                    break;
                                case 3:
                                    message.weixin = reader.string();
                                    break;
                                case 4:
                                    message.balance = reader.double();
                                    break;
                                case 5:
                                    message.userId = reader.string();
                                    break;
                                case 6:
                                    message.account = reader.string();
                                    break;
                                case 7:
                                    message.payment = reader.double();
                                    break;
                                case 8:
                                    message.income = reader.double();
                                    break;
                                case 9:
                                    message.recharge = reader.double();
                                    break;
                                case 10:
                                    message.state = reader.int32();
                                    break;
                                case 11:
                                    message.createDate = reader.int64();
                                    break;
                                case 12:
                                    message.page = reader.int32();
                                    break;
                                case 13:
                                    message.pageSize = reader.int32();
                                    break;
                                case 14:
                                    message.orderBy = reader.string();
                                    break;
                                case 15:
                                    message.avatar = reader.string();
                                    break;
                                case 16:
                                    message.text = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Account message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.account.model.Account} Account
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Account.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Account message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Account.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.alipay != null && message.hasOwnProperty("alipay"))
                                if (!$util.isString(message.alipay))
                                    return "alipay: string expected";
                            if (message.weixin != null && message.hasOwnProperty("weixin"))
                                if (!$util.isString(message.weixin))
                                    return "weixin: string expected";
                            if (message.balance != null && message.hasOwnProperty("balance"))
                                if (typeof message.balance !== "number")
                                    return "balance: number expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            if (message.payment != null && message.hasOwnProperty("payment"))
                                if (typeof message.payment !== "number")
                                    return "payment: number expected";
                            if (message.income != null && message.hasOwnProperty("income"))
                                if (typeof message.income !== "number")
                                    return "income: number expected";
                            if (message.recharge != null && message.hasOwnProperty("recharge"))
                                if (typeof message.recharge !== "number")
                                    return "recharge: number expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                    return "createDate: integer|Long expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                if (!$util.isString(message.avatar))
                                    return "avatar: string expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            return null;
                        };

                        /**
                         * Creates an Account message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.account.model.Account} Account
                         */
                        Account.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.account.model.Account)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.account.model.Account();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.alipay != null)
                                message.alipay = String(object.alipay);
                            if (object.weixin != null)
                                message.weixin = String(object.weixin);
                            if (object.balance != null)
                                message.balance = Number(object.balance);
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.account != null)
                                message.account = String(object.account);
                            if (object.payment != null)
                                message.payment = Number(object.payment);
                            if (object.income != null)
                                message.income = Number(object.income);
                            if (object.recharge != null)
                                message.recharge = Number(object.recharge);
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.createDate != null)
                                if ($util.Long)
                                    (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                                else if (typeof object.createDate === "string")
                                    message.createDate = parseInt(object.createDate, 10);
                                else if (typeof object.createDate === "number")
                                    message.createDate = object.createDate;
                                else if (typeof object.createDate === "object")
                                    message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.avatar != null)
                                message.avatar = String(object.avatar);
                            if (object.text != null)
                                message.text = String(object.text);
                            return message;
                        };

                        /**
                         * Creates a plain object from an Account message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.Account} message Account
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Account.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.alipay = "";
                                object.weixin = "";
                                object.balance = 0;
                                object.userId = "";
                                object.account = "";
                                object.payment = 0;
                                object.income = 0;
                                object.recharge = 0;
                                object.state = 0;
                                object.createDate = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.avatar = "";
                                object.text = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.alipay != null && message.hasOwnProperty("alipay"))
                                object.alipay = message.alipay;
                            if (message.weixin != null && message.hasOwnProperty("weixin"))
                                object.weixin = message.weixin;
                            if (message.balance != null && message.hasOwnProperty("balance"))
                                object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            if (message.payment != null && message.hasOwnProperty("payment"))
                                object.payment = options.json && !isFinite(message.payment) ? String(message.payment) : message.payment;
                            if (message.income != null && message.hasOwnProperty("income"))
                                object.income = options.json && !isFinite(message.income) ? String(message.income) : message.income;
                            if (message.recharge != null && message.hasOwnProperty("recharge"))
                                object.recharge = options.json && !isFinite(message.recharge) ? String(message.recharge) : message.recharge;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (typeof message.createDate === "number")
                                    object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                                else
                                    object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                object.avatar = message.avatar;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            return object;
                        };

                        /**
                         * Converts this Account to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.account.model.Account
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Account.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Account;
                    })();

                    model.AccountReply = (function() {

                        /**
                         * Properties of an AccountReply.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @interface IAccountReply
                         * @property {number|null} [code] AccountReply code
                         * @property {string|null} [message] AccountReply message
                         * @property {Array.<com.xueershangda.tianxun.account.model.IAccountDetail>|null} [data] AccountReply data
                         * @property {com.xueershangda.tianxun.account.model.IAccount|null} [account] AccountReply account
                         * @property {Array.<com.xueershangda.tianxun.account.model.IAccount>|null} [accountList] AccountReply accountList
                         * @property {com.xueershangda.tianxun.score.model.IScore|null} [score] AccountReply score
                         */

                        /**
                         * Constructs a new AccountReply.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @classdesc Represents an AccountReply.
                         * @implements IAccountReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.account.model.IAccountReply=} [properties] Properties to set
                         */
                        function AccountReply(properties) {
                            this.data = [];
                            this.accountList = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AccountReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @instance
                         */
                        AccountReply.prototype.code = 0;

                        /**
                         * AccountReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @instance
                         */
                        AccountReply.prototype.message = "";

                        /**
                         * AccountReply data.
                         * @member {Array.<com.xueershangda.tianxun.account.model.IAccountDetail>} data
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @instance
                         */
                        AccountReply.prototype.data = $util.emptyArray;

                        /**
                         * AccountReply account.
                         * @member {com.xueershangda.tianxun.account.model.IAccount|null|undefined} account
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @instance
                         */
                        AccountReply.prototype.account = null;

                        /**
                         * AccountReply accountList.
                         * @member {Array.<com.xueershangda.tianxun.account.model.IAccount>} accountList
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @instance
                         */
                        AccountReply.prototype.accountList = $util.emptyArray;

                        /**
                         * AccountReply score.
                         * @member {com.xueershangda.tianxun.score.model.IScore|null|undefined} score
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @instance
                         */
                        AccountReply.prototype.score = null;

                        /**
                         * Creates a new AccountReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccountReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.account.model.AccountReply} AccountReply instance
                         */
                        AccountReply.create = function create(properties) {
                            return new AccountReply(properties);
                        };

                        /**
                         * Encodes the specified AccountReply message. Does not implicitly {@link com.xueershangda.tianxun.account.model.AccountReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccountReply} message AccountReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.account.model.AccountDetail.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.account != null && message.hasOwnProperty("account"))
                                $root.com.xueershangda.tianxun.account.model.Account.encode(message.account, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.accountList != null && message.accountList.length)
                                for (let i = 0; i < message.accountList.length; ++i)
                                    $root.com.xueershangda.tianxun.account.model.Account.encode(message.accountList[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.score != null && message.hasOwnProperty("score"))
                                $root.com.xueershangda.tianxun.score.model.Score.encode(message.score, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified AccountReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.account.model.AccountReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IAccountReply} message AccountReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AccountReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AccountReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.account.model.AccountReply} AccountReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.account.model.AccountReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.account.model.AccountDetail.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    message.account = $root.com.xueershangda.tianxun.account.model.Account.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    if (!(message.accountList && message.accountList.length))
                                        message.accountList = [];
                                    message.accountList.push($root.com.xueershangda.tianxun.account.model.Account.decode(reader, reader.uint32()));
                                    break;
                                case 6:
                                    message.score = $root.com.xueershangda.tianxun.score.model.Score.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AccountReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.account.model.AccountReply} AccountReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AccountReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AccountReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AccountReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.account.model.AccountDetail.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.account != null && message.hasOwnProperty("account")) {
                                let error = $root.com.xueershangda.tianxun.account.model.Account.verify(message.account);
                                if (error)
                                    return "account." + error;
                            }
                            if (message.accountList != null && message.hasOwnProperty("accountList")) {
                                if (!Array.isArray(message.accountList))
                                    return "accountList: array expected";
                                for (let i = 0; i < message.accountList.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.account.model.Account.verify(message.accountList[i]);
                                    if (error)
                                        return "accountList." + error;
                                }
                            }
                            if (message.score != null && message.hasOwnProperty("score")) {
                                let error = $root.com.xueershangda.tianxun.score.model.Score.verify(message.score);
                                if (error)
                                    return "score." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates an AccountReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.account.model.AccountReply} AccountReply
                         */
                        AccountReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.account.model.AccountReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.account.model.AccountReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.account.model.AccountReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.account.model.AccountReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.account.model.AccountDetail.fromObject(object.data[i]);
                                }
                            }
                            if (object.account != null) {
                                if (typeof object.account !== "object")
                                    throw TypeError(".com.xueershangda.tianxun.account.model.AccountReply.account: object expected");
                                message.account = $root.com.xueershangda.tianxun.account.model.Account.fromObject(object.account);
                            }
                            if (object.accountList) {
                                if (!Array.isArray(object.accountList))
                                    throw TypeError(".com.xueershangda.tianxun.account.model.AccountReply.accountList: array expected");
                                message.accountList = [];
                                for (let i = 0; i < object.accountList.length; ++i) {
                                    if (typeof object.accountList[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.account.model.AccountReply.accountList: object expected");
                                    message.accountList[i] = $root.com.xueershangda.tianxun.account.model.Account.fromObject(object.accountList[i]);
                                }
                            }
                            if (object.score != null) {
                                if (typeof object.score !== "object")
                                    throw TypeError(".com.xueershangda.tianxun.account.model.AccountReply.score: object expected");
                                message.score = $root.com.xueershangda.tianxun.score.model.Score.fromObject(object.score);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an AccountReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.AccountReply} message AccountReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AccountReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.data = [];
                                object.accountList = [];
                            }
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                                object.account = null;
                                object.score = null;
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.account.model.AccountDetail.toObject(message.data[j], options);
                            }
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = $root.com.xueershangda.tianxun.account.model.Account.toObject(message.account, options);
                            if (message.accountList && message.accountList.length) {
                                object.accountList = [];
                                for (let j = 0; j < message.accountList.length; ++j)
                                    object.accountList[j] = $root.com.xueershangda.tianxun.account.model.Account.toObject(message.accountList[j], options);
                            }
                            if (message.score != null && message.hasOwnProperty("score"))
                                object.score = $root.com.xueershangda.tianxun.score.model.Score.toObject(message.score, options);
                            return object;
                        };

                        /**
                         * Converts this AccountReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.account.model.AccountReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AccountReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AccountReply;
                    })();

                    model.PlatformDetail = (function() {

                        /**
                         * Properties of a PlatformDetail.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @interface IPlatformDetail
                         * @property {string|null} [id] PlatformDetail id
                         * @property {string|null} [userId] PlatformDetail userId
                         * @property {string|null} [accountId] PlatformDetail accountId
                         * @property {number|null} [amount] PlatformDetail amount
                         * @property {number|null} [category] PlatformDetail category
                         * @property {number|Long|null} [operationTime] PlatformDetail operationTime
                         * @property {number|null} [page] PlatformDetail page
                         * @property {number|null} [pageSize] PlatformDetail pageSize
                         * @property {string|null} [orderBy] PlatformDetail orderBy
                         */

                        /**
                         * Constructs a new PlatformDetail.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @classdesc Represents a PlatformDetail.
                         * @implements IPlatformDetail
                         * @constructor
                         * @param {com.xueershangda.tianxun.account.model.IPlatformDetail=} [properties] Properties to set
                         */
                        function PlatformDetail(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlatformDetail id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @instance
                         */
                        PlatformDetail.prototype.id = "";

                        /**
                         * PlatformDetail userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @instance
                         */
                        PlatformDetail.prototype.userId = "";

                        /**
                         * PlatformDetail accountId.
                         * @member {string} accountId
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @instance
                         */
                        PlatformDetail.prototype.accountId = "";

                        /**
                         * PlatformDetail amount.
                         * @member {number} amount
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @instance
                         */
                        PlatformDetail.prototype.amount = 0;

                        /**
                         * PlatformDetail category.
                         * @member {number} category
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @instance
                         */
                        PlatformDetail.prototype.category = 0;

                        /**
                         * PlatformDetail operationTime.
                         * @member {number|Long} operationTime
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @instance
                         */
                        PlatformDetail.prototype.operationTime = 0;

                        /**
                         * PlatformDetail page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @instance
                         */
                        PlatformDetail.prototype.page = 0;

                        /**
                         * PlatformDetail pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @instance
                         */
                        PlatformDetail.prototype.pageSize = 0;

                        /**
                         * PlatformDetail orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @instance
                         */
                        PlatformDetail.prototype.orderBy = "";

                        /**
                         * Creates a new PlatformDetail instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IPlatformDetail=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.account.model.PlatformDetail} PlatformDetail instance
                         */
                        PlatformDetail.create = function create(properties) {
                            return new PlatformDetail(properties);
                        };

                        /**
                         * Encodes the specified PlatformDetail message. Does not implicitly {@link com.xueershangda.tianxun.account.model.PlatformDetail.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IPlatformDetail} message PlatformDetail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlatformDetail.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);
                            if (message.accountId != null && message.hasOwnProperty("accountId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.accountId);
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                writer.uint32(/* id 4, wireType 1 =*/33).double(message.amount);
                            if (message.category != null && message.hasOwnProperty("category"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.category);
                            if (message.operationTime != null && message.hasOwnProperty("operationTime"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.operationTime);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.orderBy);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlatformDetail message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.account.model.PlatformDetail.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IPlatformDetail} message PlatformDetail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlatformDetail.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlatformDetail message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.account.model.PlatformDetail} PlatformDetail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlatformDetail.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.account.model.PlatformDetail();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.userId = reader.string();
                                    break;
                                case 3:
                                    message.accountId = reader.string();
                                    break;
                                case 4:
                                    message.amount = reader.double();
                                    break;
                                case 5:
                                    message.category = reader.int32();
                                    break;
                                case 6:
                                    message.operationTime = reader.int64();
                                    break;
                                case 7:
                                    message.page = reader.int32();
                                    break;
                                case 8:
                                    message.pageSize = reader.int32();
                                    break;
                                case 9:
                                    message.orderBy = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlatformDetail message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.account.model.PlatformDetail} PlatformDetail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlatformDetail.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlatformDetail message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlatformDetail.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.accountId != null && message.hasOwnProperty("accountId"))
                                if (!$util.isString(message.accountId))
                                    return "accountId: string expected";
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                if (typeof message.amount !== "number")
                                    return "amount: number expected";
                            if (message.category != null && message.hasOwnProperty("category"))
                                if (!$util.isInteger(message.category))
                                    return "category: integer expected";
                            if (message.operationTime != null && message.hasOwnProperty("operationTime"))
                                if (!$util.isInteger(message.operationTime) && !(message.operationTime && $util.isInteger(message.operationTime.low) && $util.isInteger(message.operationTime.high)))
                                    return "operationTime: integer|Long expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            return null;
                        };

                        /**
                         * Creates a PlatformDetail message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.account.model.PlatformDetail} PlatformDetail
                         */
                        PlatformDetail.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.account.model.PlatformDetail)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.account.model.PlatformDetail();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.accountId != null)
                                message.accountId = String(object.accountId);
                            if (object.amount != null)
                                message.amount = Number(object.amount);
                            if (object.category != null)
                                message.category = object.category | 0;
                            if (object.operationTime != null)
                                if ($util.Long)
                                    (message.operationTime = $util.Long.fromValue(object.operationTime)).unsigned = false;
                                else if (typeof object.operationTime === "string")
                                    message.operationTime = parseInt(object.operationTime, 10);
                                else if (typeof object.operationTime === "number")
                                    message.operationTime = object.operationTime;
                                else if (typeof object.operationTime === "object")
                                    message.operationTime = new $util.LongBits(object.operationTime.low >>> 0, object.operationTime.high >>> 0).toNumber();
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlatformDetail message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.PlatformDetail} message PlatformDetail
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlatformDetail.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.userId = "";
                                object.accountId = "";
                                object.amount = 0;
                                object.category = 0;
                                object.operationTime = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.accountId != null && message.hasOwnProperty("accountId"))
                                object.accountId = message.accountId;
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                            if (message.category != null && message.hasOwnProperty("category"))
                                object.category = message.category;
                            if (message.operationTime != null && message.hasOwnProperty("operationTime"))
                                if (typeof message.operationTime === "number")
                                    object.operationTime = options.longs === String ? String(message.operationTime) : message.operationTime;
                                else
                                    object.operationTime = options.longs === String ? $util.Long.prototype.toString.call(message.operationTime) : options.longs === Number ? new $util.LongBits(message.operationTime.low >>> 0, message.operationTime.high >>> 0).toNumber() : message.operationTime;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };

                        /**
                         * Converts this PlatformDetail to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.account.model.PlatformDetail
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlatformDetail.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return PlatformDetail;
                    })();

                    model.PlatformAccount = (function() {

                        /**
                         * Properties of a PlatformAccount.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @interface IPlatformAccount
                         * @property {string|null} [id] PlatformAccount id
                         * @property {number|null} [balance] PlatformAccount balance
                         * @property {number|null} [total] PlatformAccount total
                         * @property {number|null} [discount] PlatformAccount discount
                         * @property {number|null} [page] PlatformAccount page
                         * @property {number|null} [pageSize] PlatformAccount pageSize
                         * @property {string|null} [orderBy] PlatformAccount orderBy
                         */

                        /**
                         * Constructs a new PlatformAccount.
                         * @memberof com.xueershangda.tianxun.account.model
                         * @classdesc Represents a PlatformAccount.
                         * @implements IPlatformAccount
                         * @constructor
                         * @param {com.xueershangda.tianxun.account.model.IPlatformAccount=} [properties] Properties to set
                         */
                        function PlatformAccount(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlatformAccount id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @instance
                         */
                        PlatformAccount.prototype.id = "";

                        /**
                         * PlatformAccount balance.
                         * @member {number} balance
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @instance
                         */
                        PlatformAccount.prototype.balance = 0;

                        /**
                         * PlatformAccount total.
                         * @member {number} total
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @instance
                         */
                        PlatformAccount.prototype.total = 0;

                        /**
                         * PlatformAccount discount.
                         * @member {number} discount
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @instance
                         */
                        PlatformAccount.prototype.discount = 0;

                        /**
                         * PlatformAccount page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @instance
                         */
                        PlatformAccount.prototype.page = 0;

                        /**
                         * PlatformAccount pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @instance
                         */
                        PlatformAccount.prototype.pageSize = 0;

                        /**
                         * PlatformAccount orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @instance
                         */
                        PlatformAccount.prototype.orderBy = "";

                        /**
                         * Creates a new PlatformAccount instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IPlatformAccount=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.account.model.PlatformAccount} PlatformAccount instance
                         */
                        PlatformAccount.create = function create(properties) {
                            return new PlatformAccount(properties);
                        };

                        /**
                         * Encodes the specified PlatformAccount message. Does not implicitly {@link com.xueershangda.tianxun.account.model.PlatformAccount.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IPlatformAccount} message PlatformAccount message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlatformAccount.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.balance != null && message.hasOwnProperty("balance"))
                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.balance);
                            if (message.total != null && message.hasOwnProperty("total"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.total);
                            if (message.discount != null && message.hasOwnProperty("discount"))
                                writer.uint32(/* id 4, wireType 1 =*/33).double(message.discount);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.orderBy);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlatformAccount message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.account.model.PlatformAccount.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.IPlatformAccount} message PlatformAccount message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlatformAccount.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlatformAccount message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.account.model.PlatformAccount} PlatformAccount
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlatformAccount.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.account.model.PlatformAccount();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.balance = reader.double();
                                    break;
                                case 3:
                                    message.total = reader.double();
                                    break;
                                case 4:
                                    message.discount = reader.double();
                                    break;
                                case 5:
                                    message.page = reader.int32();
                                    break;
                                case 6:
                                    message.pageSize = reader.int32();
                                    break;
                                case 7:
                                    message.orderBy = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlatformAccount message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.account.model.PlatformAccount} PlatformAccount
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlatformAccount.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlatformAccount message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlatformAccount.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.balance != null && message.hasOwnProperty("balance"))
                                if (typeof message.balance !== "number")
                                    return "balance: number expected";
                            if (message.total != null && message.hasOwnProperty("total"))
                                if (typeof message.total !== "number")
                                    return "total: number expected";
                            if (message.discount != null && message.hasOwnProperty("discount"))
                                if (typeof message.discount !== "number")
                                    return "discount: number expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            return null;
                        };

                        /**
                         * Creates a PlatformAccount message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.account.model.PlatformAccount} PlatformAccount
                         */
                        PlatformAccount.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.account.model.PlatformAccount)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.account.model.PlatformAccount();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.balance != null)
                                message.balance = Number(object.balance);
                            if (object.total != null)
                                message.total = Number(object.total);
                            if (object.discount != null)
                                message.discount = Number(object.discount);
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlatformAccount message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @static
                         * @param {com.xueershangda.tianxun.account.model.PlatformAccount} message PlatformAccount
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlatformAccount.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.balance = 0;
                                object.total = 0;
                                object.discount = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.balance != null && message.hasOwnProperty("balance"))
                                object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;
                            if (message.total != null && message.hasOwnProperty("total"))
                                object.total = options.json && !isFinite(message.total) ? String(message.total) : message.total;
                            if (message.discount != null && message.hasOwnProperty("discount"))
                                object.discount = options.json && !isFinite(message.discount) ? String(message.discount) : message.discount;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };

                        /**
                         * Converts this PlatformAccount to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.account.model.PlatformAccount
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlatformAccount.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return PlatformAccount;
                    })();

                    return model;
                })();

                return account;
            })();

            tianxun.score = (function() {

                /**
                 * Namespace score.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const score = {};

                score.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.score
                     * @namespace
                     */
                    const model = {};

                    model.Score = (function() {

                        /**
                         * Properties of a Score.
                         * @memberof com.xueershangda.tianxun.score.model
                         * @interface IScore
                         * @property {string|null} [id] Score id
                         * @property {string|null} [userId] Score userId
                         * @property {string|null} [year] Score year
                         * @property {number|Long|null} [score] Score score
                         * @property {number|Long|null} [lastScore] Score lastScore
                         * @property {number|null} [state] Score state
                         * @property {number|Long|null} [createDate] Score createDate
                         * @property {number|Long|null} [updateDate] Score updateDate
                         * @property {number|null} [page] Score page
                         * @property {number|null} [pageSize] Score pageSize
                         * @property {string|null} [orderBy] Score orderBy
                         * @property {number|null} [recharge] Score recharge
                         * @property {number|null} [income] Score income
                         * @property {number|null} [payment] Score payment
                         * @property {string|null} [nickName] Score nickName
                         * @property {string|null} [account] Score account
                         * @property {string|null} [avatar] Score avatar
                         */

                        /**
                         * Constructs a new Score.
                         * @memberof com.xueershangda.tianxun.score.model
                         * @classdesc Represents a Score.
                         * @implements IScore
                         * @constructor
                         * @param {com.xueershangda.tianxun.score.model.IScore=} [properties] Properties to set
                         */
                        function Score(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Score id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.id = "";

                        /**
                         * Score userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.userId = "";

                        /**
                         * Score year.
                         * @member {string} year
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.year = "";

                        /**
                         * Score score.
                         * @member {number|Long} score
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.score = 0;

                        /**
                         * Score lastScore.
                         * @member {number|Long} lastScore
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.lastScore = 0;

                        /**
                         * Score state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.state = 0;

                        /**
                         * Score createDate.
                         * @member {number|Long} createDate
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.createDate = 0;

                        /**
                         * Score updateDate.
                         * @member {number|Long} updateDate
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.updateDate = 0;

                        /**
                         * Score page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.page = 0;

                        /**
                         * Score pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.pageSize = 0;

                        /**
                         * Score orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.orderBy = "";

                        /**
                         * Score recharge.
                         * @member {number} recharge
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.recharge = 0;

                        /**
                         * Score income.
                         * @member {number} income
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.income = 0;

                        /**
                         * Score payment.
                         * @member {number} payment
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.payment = 0;

                        /**
                         * Score nickName.
                         * @member {string} nickName
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.nickName = "";

                        /**
                         * Score account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.account = "";

                        /**
                         * Score avatar.
                         * @member {string} avatar
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         */
                        Score.prototype.avatar = "";

                        /**
                         * Creates a new Score instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.IScore=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.score.model.Score} Score instance
                         */
                        Score.create = function create(properties) {
                            return new Score(properties);
                        };

                        /**
                         * Encodes the specified Score message. Does not implicitly {@link com.xueershangda.tianxun.score.model.Score.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.IScore} message Score message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Score.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);
                            if (message.year != null && message.hasOwnProperty("year"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.year);
                            if (message.score != null && message.hasOwnProperty("score"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.score);
                            if (message.lastScore != null && message.hasOwnProperty("lastScore"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.lastScore);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.state);
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.createDate);
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.updateDate);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.orderBy);
                            if (message.recharge != null && message.hasOwnProperty("recharge"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.recharge);
                            if (message.income != null && message.hasOwnProperty("income"))
                                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.income);
                            if (message.payment != null && message.hasOwnProperty("payment"))
                                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.payment);
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                writer.uint32(/* id 15, wireType 2 =*/122).string(message.nickName);
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 16, wireType 2 =*/130).string(message.account);
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                writer.uint32(/* id 17, wireType 2 =*/138).string(message.avatar);
                            return writer;
                        };

                        /**
                         * Encodes the specified Score message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.score.model.Score.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.IScore} message Score message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Score.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Score message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.score.model.Score} Score
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Score.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.score.model.Score();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.userId = reader.string();
                                    break;
                                case 3:
                                    message.year = reader.string();
                                    break;
                                case 4:
                                    message.score = reader.int64();
                                    break;
                                case 5:
                                    message.lastScore = reader.int64();
                                    break;
                                case 6:
                                    message.state = reader.int32();
                                    break;
                                case 7:
                                    message.createDate = reader.int64();
                                    break;
                                case 8:
                                    message.updateDate = reader.int64();
                                    break;
                                case 9:
                                    message.page = reader.int32();
                                    break;
                                case 10:
                                    message.pageSize = reader.int32();
                                    break;
                                case 11:
                                    message.orderBy = reader.string();
                                    break;
                                case 12:
                                    message.recharge = reader.int32();
                                    break;
                                case 13:
                                    message.income = reader.int32();
                                    break;
                                case 14:
                                    message.payment = reader.int32();
                                    break;
                                case 15:
                                    message.nickName = reader.string();
                                    break;
                                case 16:
                                    message.account = reader.string();
                                    break;
                                case 17:
                                    message.avatar = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Score message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.score.model.Score} Score
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Score.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Score message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Score.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.year != null && message.hasOwnProperty("year"))
                                if (!$util.isString(message.year))
                                    return "year: string expected";
                            if (message.score != null && message.hasOwnProperty("score"))
                                if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
                                    return "score: integer|Long expected";
                            if (message.lastScore != null && message.hasOwnProperty("lastScore"))
                                if (!$util.isInteger(message.lastScore) && !(message.lastScore && $util.isInteger(message.lastScore.low) && $util.isInteger(message.lastScore.high)))
                                    return "lastScore: integer|Long expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                    return "createDate: integer|Long expected";
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                if (!$util.isInteger(message.updateDate) && !(message.updateDate && $util.isInteger(message.updateDate.low) && $util.isInteger(message.updateDate.high)))
                                    return "updateDate: integer|Long expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.recharge != null && message.hasOwnProperty("recharge"))
                                if (!$util.isInteger(message.recharge))
                                    return "recharge: integer expected";
                            if (message.income != null && message.hasOwnProperty("income"))
                                if (!$util.isInteger(message.income))
                                    return "income: integer expected";
                            if (message.payment != null && message.hasOwnProperty("payment"))
                                if (!$util.isInteger(message.payment))
                                    return "payment: integer expected";
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                if (!$util.isString(message.nickName))
                                    return "nickName: string expected";
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                if (!$util.isString(message.avatar))
                                    return "avatar: string expected";
                            return null;
                        };

                        /**
                         * Creates a Score message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.score.model.Score} Score
                         */
                        Score.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.score.model.Score)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.score.model.Score();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.year != null)
                                message.year = String(object.year);
                            if (object.score != null)
                                if ($util.Long)
                                    (message.score = $util.Long.fromValue(object.score)).unsigned = false;
                                else if (typeof object.score === "string")
                                    message.score = parseInt(object.score, 10);
                                else if (typeof object.score === "number")
                                    message.score = object.score;
                                else if (typeof object.score === "object")
                                    message.score = new $util.LongBits(object.score.low >>> 0, object.score.high >>> 0).toNumber();
                            if (object.lastScore != null)
                                if ($util.Long)
                                    (message.lastScore = $util.Long.fromValue(object.lastScore)).unsigned = false;
                                else if (typeof object.lastScore === "string")
                                    message.lastScore = parseInt(object.lastScore, 10);
                                else if (typeof object.lastScore === "number")
                                    message.lastScore = object.lastScore;
                                else if (typeof object.lastScore === "object")
                                    message.lastScore = new $util.LongBits(object.lastScore.low >>> 0, object.lastScore.high >>> 0).toNumber();
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.createDate != null)
                                if ($util.Long)
                                    (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                                else if (typeof object.createDate === "string")
                                    message.createDate = parseInt(object.createDate, 10);
                                else if (typeof object.createDate === "number")
                                    message.createDate = object.createDate;
                                else if (typeof object.createDate === "object")
                                    message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                            if (object.updateDate != null)
                                if ($util.Long)
                                    (message.updateDate = $util.Long.fromValue(object.updateDate)).unsigned = false;
                                else if (typeof object.updateDate === "string")
                                    message.updateDate = parseInt(object.updateDate, 10);
                                else if (typeof object.updateDate === "number")
                                    message.updateDate = object.updateDate;
                                else if (typeof object.updateDate === "object")
                                    message.updateDate = new $util.LongBits(object.updateDate.low >>> 0, object.updateDate.high >>> 0).toNumber();
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.recharge != null)
                                message.recharge = object.recharge | 0;
                            if (object.income != null)
                                message.income = object.income | 0;
                            if (object.payment != null)
                                message.payment = object.payment | 0;
                            if (object.nickName != null)
                                message.nickName = String(object.nickName);
                            if (object.account != null)
                                message.account = String(object.account);
                            if (object.avatar != null)
                                message.avatar = String(object.avatar);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Score message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.Score} message Score
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Score.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.userId = "";
                                object.year = "";
                                object.score = 0;
                                object.lastScore = 0;
                                object.state = 0;
                                object.createDate = 0;
                                object.updateDate = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.recharge = 0;
                                object.income = 0;
                                object.payment = 0;
                                object.nickName = "";
                                object.account = "";
                                object.avatar = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.year != null && message.hasOwnProperty("year"))
                                object.year = message.year;
                            if (message.score != null && message.hasOwnProperty("score"))
                                if (typeof message.score === "number")
                                    object.score = options.longs === String ? String(message.score) : message.score;
                                else
                                    object.score = options.longs === String ? $util.Long.prototype.toString.call(message.score) : options.longs === Number ? new $util.LongBits(message.score.low >>> 0, message.score.high >>> 0).toNumber() : message.score;
                            if (message.lastScore != null && message.hasOwnProperty("lastScore"))
                                if (typeof message.lastScore === "number")
                                    object.lastScore = options.longs === String ? String(message.lastScore) : message.lastScore;
                                else
                                    object.lastScore = options.longs === String ? $util.Long.prototype.toString.call(message.lastScore) : options.longs === Number ? new $util.LongBits(message.lastScore.low >>> 0, message.lastScore.high >>> 0).toNumber() : message.lastScore;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (typeof message.createDate === "number")
                                    object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                                else
                                    object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                if (typeof message.updateDate === "number")
                                    object.updateDate = options.longs === String ? String(message.updateDate) : message.updateDate;
                                else
                                    object.updateDate = options.longs === String ? $util.Long.prototype.toString.call(message.updateDate) : options.longs === Number ? new $util.LongBits(message.updateDate.low >>> 0, message.updateDate.high >>> 0).toNumber() : message.updateDate;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.recharge != null && message.hasOwnProperty("recharge"))
                                object.recharge = message.recharge;
                            if (message.income != null && message.hasOwnProperty("income"))
                                object.income = message.income;
                            if (message.payment != null && message.hasOwnProperty("payment"))
                                object.payment = message.payment;
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                object.nickName = message.nickName;
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                object.avatar = message.avatar;
                            return object;
                        };

                        /**
                         * Converts this Score to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.score.model.Score
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Score.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Score;
                    })();

                    model.ScoreReply = (function() {

                        /**
                         * Properties of a ScoreReply.
                         * @memberof com.xueershangda.tianxun.score.model
                         * @interface IScoreReply
                         * @property {number|null} [code] ScoreReply code
                         * @property {string|null} [message] ScoreReply message
                         * @property {Array.<com.xueershangda.tianxun.score.model.IScoreDetail>|null} [data] ScoreReply data
                         * @property {com.xueershangda.tianxun.score.model.IScore|null} [score] ScoreReply score
                         * @property {Array.<com.xueershangda.tianxun.score.model.IScore>|null} [scoreList] ScoreReply scoreList
                         */

                        /**
                         * Constructs a new ScoreReply.
                         * @memberof com.xueershangda.tianxun.score.model
                         * @classdesc Represents a ScoreReply.
                         * @implements IScoreReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.score.model.IScoreReply=} [properties] Properties to set
                         */
                        function ScoreReply(properties) {
                            this.data = [];
                            this.scoreList = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ScoreReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @instance
                         */
                        ScoreReply.prototype.code = 0;

                        /**
                         * ScoreReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @instance
                         */
                        ScoreReply.prototype.message = "";

                        /**
                         * ScoreReply data.
                         * @member {Array.<com.xueershangda.tianxun.score.model.IScoreDetail>} data
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @instance
                         */
                        ScoreReply.prototype.data = $util.emptyArray;

                        /**
                         * ScoreReply score.
                         * @member {com.xueershangda.tianxun.score.model.IScore|null|undefined} score
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @instance
                         */
                        ScoreReply.prototype.score = null;

                        /**
                         * ScoreReply scoreList.
                         * @member {Array.<com.xueershangda.tianxun.score.model.IScore>} scoreList
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @instance
                         */
                        ScoreReply.prototype.scoreList = $util.emptyArray;

                        /**
                         * Creates a new ScoreReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.IScoreReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.score.model.ScoreReply} ScoreReply instance
                         */
                        ScoreReply.create = function create(properties) {
                            return new ScoreReply(properties);
                        };

                        /**
                         * Encodes the specified ScoreReply message. Does not implicitly {@link com.xueershangda.tianxun.score.model.ScoreReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.IScoreReply} message ScoreReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ScoreReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.score.model.ScoreDetail.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.score != null && message.hasOwnProperty("score"))
                                $root.com.xueershangda.tianxun.score.model.Score.encode(message.score, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.scoreList != null && message.scoreList.length)
                                for (let i = 0; i < message.scoreList.length; ++i)
                                    $root.com.xueershangda.tianxun.score.model.Score.encode(message.scoreList[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified ScoreReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.score.model.ScoreReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.IScoreReply} message ScoreReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ScoreReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ScoreReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.score.model.ScoreReply} ScoreReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ScoreReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.score.model.ScoreReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.score.model.ScoreDetail.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    message.score = $root.com.xueershangda.tianxun.score.model.Score.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    if (!(message.scoreList && message.scoreList.length))
                                        message.scoreList = [];
                                    message.scoreList.push($root.com.xueershangda.tianxun.score.model.Score.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ScoreReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.score.model.ScoreReply} ScoreReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ScoreReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ScoreReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ScoreReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.score.model.ScoreDetail.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.score != null && message.hasOwnProperty("score")) {
                                let error = $root.com.xueershangda.tianxun.score.model.Score.verify(message.score);
                                if (error)
                                    return "score." + error;
                            }
                            if (message.scoreList != null && message.hasOwnProperty("scoreList")) {
                                if (!Array.isArray(message.scoreList))
                                    return "scoreList: array expected";
                                for (let i = 0; i < message.scoreList.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.score.model.Score.verify(message.scoreList[i]);
                                    if (error)
                                        return "scoreList." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a ScoreReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.score.model.ScoreReply} ScoreReply
                         */
                        ScoreReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.score.model.ScoreReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.score.model.ScoreReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.score.model.ScoreReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.score.model.ScoreReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.score.model.ScoreDetail.fromObject(object.data[i]);
                                }
                            }
                            if (object.score != null) {
                                if (typeof object.score !== "object")
                                    throw TypeError(".com.xueershangda.tianxun.score.model.ScoreReply.score: object expected");
                                message.score = $root.com.xueershangda.tianxun.score.model.Score.fromObject(object.score);
                            }
                            if (object.scoreList) {
                                if (!Array.isArray(object.scoreList))
                                    throw TypeError(".com.xueershangda.tianxun.score.model.ScoreReply.scoreList: array expected");
                                message.scoreList = [];
                                for (let i = 0; i < object.scoreList.length; ++i) {
                                    if (typeof object.scoreList[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.score.model.ScoreReply.scoreList: object expected");
                                    message.scoreList[i] = $root.com.xueershangda.tianxun.score.model.Score.fromObject(object.scoreList[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a ScoreReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.ScoreReply} message ScoreReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ScoreReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.data = [];
                                object.scoreList = [];
                            }
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                                object.score = null;
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.score.model.ScoreDetail.toObject(message.data[j], options);
                            }
                            if (message.score != null && message.hasOwnProperty("score"))
                                object.score = $root.com.xueershangda.tianxun.score.model.Score.toObject(message.score, options);
                            if (message.scoreList && message.scoreList.length) {
                                object.scoreList = [];
                                for (let j = 0; j < message.scoreList.length; ++j)
                                    object.scoreList[j] = $root.com.xueershangda.tianxun.score.model.Score.toObject(message.scoreList[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this ScoreReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.score.model.ScoreReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ScoreReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return ScoreReply;
                    })();

                    model.ScoreDetail = (function() {

                        /**
                         * Properties of a ScoreDetail.
                         * @memberof com.xueershangda.tianxun.score.model
                         * @interface IScoreDetail
                         * @property {string|null} [id] ScoreDetail id
                         * @property {string|null} [scoreId] ScoreDetail scoreId
                         * @property {number|null} [score] ScoreDetail score
                         * @property {string|null} [targetId] ScoreDetail targetId
                         * @property {string|null} [type] ScoreDetail type
                         * @property {number|Long|null} [createDate] ScoreDetail createDate
                         * @property {string|null} [comment] ScoreDetail comment
                         * @property {string|null} [userId] ScoreDetail userId
                         * @property {number|null} [page] ScoreDetail page
                         * @property {number|null} [pageSize] ScoreDetail pageSize
                         * @property {string|null} [orderBy] ScoreDetail orderBy
                         */

                        /**
                         * Constructs a new ScoreDetail.
                         * @memberof com.xueershangda.tianxun.score.model
                         * @classdesc Represents a ScoreDetail.
                         * @implements IScoreDetail
                         * @constructor
                         * @param {com.xueershangda.tianxun.score.model.IScoreDetail=} [properties] Properties to set
                         */
                        function ScoreDetail(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ScoreDetail id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.id = "";

                        /**
                         * ScoreDetail scoreId.
                         * @member {string} scoreId
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.scoreId = "";

                        /**
                         * ScoreDetail score.
                         * @member {number} score
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.score = 0;

                        /**
                         * ScoreDetail targetId.
                         * @member {string} targetId
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.targetId = "";

                        /**
                         * ScoreDetail type.
                         * @member {string} type
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.type = "";

                        /**
                         * ScoreDetail createDate.
                         * @member {number|Long} createDate
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.createDate = 0;

                        /**
                         * ScoreDetail comment.
                         * @member {string} comment
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.comment = "";

                        /**
                         * ScoreDetail userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.userId = "";

                        /**
                         * ScoreDetail page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.page = 0;

                        /**
                         * ScoreDetail pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.pageSize = 0;

                        /**
                         * ScoreDetail orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         */
                        ScoreDetail.prototype.orderBy = "";

                        /**
                         * Creates a new ScoreDetail instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.IScoreDetail=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.score.model.ScoreDetail} ScoreDetail instance
                         */
                        ScoreDetail.create = function create(properties) {
                            return new ScoreDetail(properties);
                        };

                        /**
                         * Encodes the specified ScoreDetail message. Does not implicitly {@link com.xueershangda.tianxun.score.model.ScoreDetail.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.IScoreDetail} message ScoreDetail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ScoreDetail.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.scoreId != null && message.hasOwnProperty("scoreId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.scoreId);
                            if (message.score != null && message.hasOwnProperty("score"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.score);
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.targetId);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.type);
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.createDate);
                            if (message.comment != null && message.hasOwnProperty("comment"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.comment);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.userId);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.orderBy);
                            return writer;
                        };

                        /**
                         * Encodes the specified ScoreDetail message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.score.model.ScoreDetail.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.IScoreDetail} message ScoreDetail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ScoreDetail.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ScoreDetail message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.score.model.ScoreDetail} ScoreDetail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ScoreDetail.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.score.model.ScoreDetail();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.scoreId = reader.string();
                                    break;
                                case 3:
                                    message.score = reader.int32();
                                    break;
                                case 4:
                                    message.targetId = reader.string();
                                    break;
                                case 5:
                                    message.type = reader.string();
                                    break;
                                case 6:
                                    message.createDate = reader.int64();
                                    break;
                                case 7:
                                    message.comment = reader.string();
                                    break;
                                case 8:
                                    message.userId = reader.string();
                                    break;
                                case 9:
                                    message.page = reader.int32();
                                    break;
                                case 10:
                                    message.pageSize = reader.int32();
                                    break;
                                case 11:
                                    message.orderBy = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ScoreDetail message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.score.model.ScoreDetail} ScoreDetail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ScoreDetail.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ScoreDetail message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ScoreDetail.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.scoreId != null && message.hasOwnProperty("scoreId"))
                                if (!$util.isString(message.scoreId))
                                    return "scoreId: string expected";
                            if (message.score != null && message.hasOwnProperty("score"))
                                if (!$util.isInteger(message.score))
                                    return "score: integer expected";
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                if (!$util.isString(message.targetId))
                                    return "targetId: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                    return "createDate: integer|Long expected";
                            if (message.comment != null && message.hasOwnProperty("comment"))
                                if (!$util.isString(message.comment))
                                    return "comment: string expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            return null;
                        };

                        /**
                         * Creates a ScoreDetail message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.score.model.ScoreDetail} ScoreDetail
                         */
                        ScoreDetail.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.score.model.ScoreDetail)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.score.model.ScoreDetail();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.scoreId != null)
                                message.scoreId = String(object.scoreId);
                            if (object.score != null)
                                message.score = object.score | 0;
                            if (object.targetId != null)
                                message.targetId = String(object.targetId);
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.createDate != null)
                                if ($util.Long)
                                    (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                                else if (typeof object.createDate === "string")
                                    message.createDate = parseInt(object.createDate, 10);
                                else if (typeof object.createDate === "number")
                                    message.createDate = object.createDate;
                                else if (typeof object.createDate === "object")
                                    message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                            if (object.comment != null)
                                message.comment = String(object.comment);
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            return message;
                        };

                        /**
                         * Creates a plain object from a ScoreDetail message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @static
                         * @param {com.xueershangda.tianxun.score.model.ScoreDetail} message ScoreDetail
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ScoreDetail.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.scoreId = "";
                                object.score = 0;
                                object.targetId = "";
                                object.type = "";
                                object.createDate = 0;
                                object.comment = "";
                                object.userId = "";
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.scoreId != null && message.hasOwnProperty("scoreId"))
                                object.scoreId = message.scoreId;
                            if (message.score != null && message.hasOwnProperty("score"))
                                object.score = message.score;
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                object.targetId = message.targetId;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (typeof message.createDate === "number")
                                    object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                                else
                                    object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                            if (message.comment != null && message.hasOwnProperty("comment"))
                                object.comment = message.comment;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };

                        /**
                         * Converts this ScoreDetail to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.score.model.ScoreDetail
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ScoreDetail.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return ScoreDetail;
                    })();

                    return model;
                })();

                return score;
            })();

            tianxun.answer = (function() {

                /**
                 * Namespace answer.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const answer = {};

                answer.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.answer
                     * @namespace
                     */
                    const model = {};

                    model.Answer = (function() {

                        /**
                         * Properties of an Answer.
                         * @memberof com.xueershangda.tianxun.answer.model
                         * @interface IAnswer
                         * @property {string|null} [id] Answer id
                         * @property {string|null} [summary] Answer summary
                         * @property {number|null} [income] Answer income
                         * @property {boolean|null} [platform] Answer platform
                         * @property {string|null} [answerUserId] Answer answerUserId
                         * @property {number|Long|null} [answerDate] Answer answerDate
                         * @property {string|null} [questionId] Answer questionId
                         * @property {number|null} [accept] Answer accept
                         * @property {number|null} [orders] Answer orders
                         * @property {number|null} [state] Answer state
                         * @property {boolean|null} [open] Answer open
                         * @property {boolean|null} [full] Answer full
                         * @property {string|null} [content] Answer content
                         * @property {number|Long|null} [focusNumber] Answer focusNumber
                         * @property {number|Long|null} [loveNumber] Answer loveNumber
                         * @property {number|Long|null} [despiseNumber] Answer despiseNumber
                         * @property {number|null} [page] Answer page
                         * @property {number|null} [pageSize] Answer pageSize
                         * @property {string|null} [orderBy] Answer orderBy
                         * @property {string|null} [nickName] Answer nickName
                         * @property {string|null} [avatar] Answer avatar
                         * @property {string|null} [account] Answer account
                         * @property {string|null} [password] Answer password
                         * @property {Array.<com.xueershangda.tianxun.article.model.IImages>|null} [fileList] Answer fileList
                         * @property {string|null} [targetId] Answer targetId
                         * @property {string|null} [ownerId] Answer ownerId
                         */

                        /**
                         * Constructs a new Answer.
                         * @memberof com.xueershangda.tianxun.answer.model
                         * @classdesc Represents an Answer.
                         * @implements IAnswer
                         * @constructor
                         * @param {com.xueershangda.tianxun.answer.model.IAnswer=} [properties] Properties to set
                         */
                        function Answer(properties) {
                            this.fileList = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Answer id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.id = "";

                        /**
                         * Answer summary.
                         * @member {string} summary
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.summary = "";

                        /**
                         * Answer income.
                         * @member {number} income
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.income = 0;

                        /**
                         * Answer platform.
                         * @member {boolean} platform
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.platform = false;

                        /**
                         * Answer answerUserId.
                         * @member {string} answerUserId
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.answerUserId = "";

                        /**
                         * Answer answerDate.
                         * @member {number|Long} answerDate
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.answerDate = 0;

                        /**
                         * Answer questionId.
                         * @member {string} questionId
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.questionId = "";

                        /**
                         * Answer accept.
                         * @member {number} accept
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.accept = 0;

                        /**
                         * Answer orders.
                         * @member {number} orders
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.orders = 0;

                        /**
                         * Answer state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.state = 0;

                        /**
                         * Answer open.
                         * @member {boolean} open
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.open = false;

                        /**
                         * Answer full.
                         * @member {boolean} full
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.full = false;

                        /**
                         * Answer content.
                         * @member {string} content
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.content = "";

                        /**
                         * Answer focusNumber.
                         * @member {number|Long} focusNumber
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.focusNumber = 0;

                        /**
                         * Answer loveNumber.
                         * @member {number|Long} loveNumber
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.loveNumber = 0;

                        /**
                         * Answer despiseNumber.
                         * @member {number|Long} despiseNumber
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.despiseNumber = 0;

                        /**
                         * Answer page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.page = 0;

                        /**
                         * Answer pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.pageSize = 0;

                        /**
                         * Answer orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.orderBy = "";

                        /**
                         * Answer nickName.
                         * @member {string} nickName
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.nickName = "";

                        /**
                         * Answer avatar.
                         * @member {string} avatar
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.avatar = "";

                        /**
                         * Answer account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.account = "";

                        /**
                         * Answer password.
                         * @member {string} password
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.password = "";

                        /**
                         * Answer fileList.
                         * @member {Array.<com.xueershangda.tianxun.article.model.IImages>} fileList
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.fileList = $util.emptyArray;

                        /**
                         * Answer targetId.
                         * @member {string} targetId
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.targetId = "";

                        /**
                         * Answer ownerId.
                         * @member {string} ownerId
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         */
                        Answer.prototype.ownerId = "";

                        /**
                         * Creates a new Answer instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IAnswer=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.answer.model.Answer} Answer instance
                         */
                        Answer.create = function create(properties) {
                            return new Answer(properties);
                        };

                        /**
                         * Encodes the specified Answer message. Does not implicitly {@link com.xueershangda.tianxun.answer.model.Answer.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IAnswer} message Answer message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Answer.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.summary);
                            if (message.income != null && message.hasOwnProperty("income"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.income);
                            if (message.platform != null && message.hasOwnProperty("platform"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.platform);
                            if (message.answerUserId != null && message.hasOwnProperty("answerUserId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.answerUserId);
                            if (message.answerDate != null && message.hasOwnProperty("answerDate"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.answerDate);
                            if (message.questionId != null && message.hasOwnProperty("questionId"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.questionId);
                            if (message.accept != null && message.hasOwnProperty("accept"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.accept);
                            if (message.orders != null && message.hasOwnProperty("orders"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.orders);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.state);
                            if (message.open != null && message.hasOwnProperty("open"))
                                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.open);
                            if (message.full != null && message.hasOwnProperty("full"))
                                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.full);
                            if (message.content != null && message.hasOwnProperty("content"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.content);
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                writer.uint32(/* id 14, wireType 0 =*/112).int64(message.focusNumber);
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                writer.uint32(/* id 15, wireType 0 =*/120).int64(message.loveNumber);
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                writer.uint32(/* id 16, wireType 0 =*/128).int64(message.despiseNumber);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 17, wireType 0 =*/136).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 18, wireType 0 =*/144).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 19, wireType 2 =*/154).string(message.orderBy);
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                writer.uint32(/* id 20, wireType 2 =*/162).string(message.nickName);
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                writer.uint32(/* id 21, wireType 2 =*/170).string(message.avatar);
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 22, wireType 2 =*/178).string(message.account);
                            if (message.password != null && message.hasOwnProperty("password"))
                                writer.uint32(/* id 23, wireType 2 =*/186).string(message.password);
                            if (message.fileList != null && message.fileList.length)
                                for (let i = 0; i < message.fileList.length; ++i)
                                    $root.com.xueershangda.tianxun.article.model.Images.encode(message.fileList[i], writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                writer.uint32(/* id 25, wireType 2 =*/202).string(message.targetId);
                            if (message.ownerId != null && message.hasOwnProperty("ownerId"))
                                writer.uint32(/* id 26, wireType 2 =*/210).string(message.ownerId);
                            return writer;
                        };

                        /**
                         * Encodes the specified Answer message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.answer.model.Answer.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IAnswer} message Answer message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Answer.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Answer message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.answer.model.Answer} Answer
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Answer.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.answer.model.Answer();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.summary = reader.string();
                                    break;
                                case 3:
                                    message.income = reader.double();
                                    break;
                                case 4:
                                    message.platform = reader.bool();
                                    break;
                                case 5:
                                    message.answerUserId = reader.string();
                                    break;
                                case 6:
                                    message.answerDate = reader.int64();
                                    break;
                                case 7:
                                    message.questionId = reader.string();
                                    break;
                                case 8:
                                    message.accept = reader.int32();
                                    break;
                                case 9:
                                    message.orders = reader.int32();
                                    break;
                                case 10:
                                    message.state = reader.int32();
                                    break;
                                case 11:
                                    message.open = reader.bool();
                                    break;
                                case 12:
                                    message.full = reader.bool();
                                    break;
                                case 13:
                                    message.content = reader.string();
                                    break;
                                case 14:
                                    message.focusNumber = reader.int64();
                                    break;
                                case 15:
                                    message.loveNumber = reader.int64();
                                    break;
                                case 16:
                                    message.despiseNumber = reader.int64();
                                    break;
                                case 17:
                                    message.page = reader.int32();
                                    break;
                                case 18:
                                    message.pageSize = reader.int32();
                                    break;
                                case 19:
                                    message.orderBy = reader.string();
                                    break;
                                case 20:
                                    message.nickName = reader.string();
                                    break;
                                case 21:
                                    message.avatar = reader.string();
                                    break;
                                case 22:
                                    message.account = reader.string();
                                    break;
                                case 23:
                                    message.password = reader.string();
                                    break;
                                case 24:
                                    if (!(message.fileList && message.fileList.length))
                                        message.fileList = [];
                                    message.fileList.push($root.com.xueershangda.tianxun.article.model.Images.decode(reader, reader.uint32()));
                                    break;
                                case 25:
                                    message.targetId = reader.string();
                                    break;
                                case 26:
                                    message.ownerId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Answer message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.answer.model.Answer} Answer
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Answer.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Answer message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Answer.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                if (!$util.isString(message.summary))
                                    return "summary: string expected";
                            if (message.income != null && message.hasOwnProperty("income"))
                                if (typeof message.income !== "number")
                                    return "income: number expected";
                            if (message.platform != null && message.hasOwnProperty("platform"))
                                if (typeof message.platform !== "boolean")
                                    return "platform: boolean expected";
                            if (message.answerUserId != null && message.hasOwnProperty("answerUserId"))
                                if (!$util.isString(message.answerUserId))
                                    return "answerUserId: string expected";
                            if (message.answerDate != null && message.hasOwnProperty("answerDate"))
                                if (!$util.isInteger(message.answerDate) && !(message.answerDate && $util.isInteger(message.answerDate.low) && $util.isInteger(message.answerDate.high)))
                                    return "answerDate: integer|Long expected";
                            if (message.questionId != null && message.hasOwnProperty("questionId"))
                                if (!$util.isString(message.questionId))
                                    return "questionId: string expected";
                            if (message.accept != null && message.hasOwnProperty("accept"))
                                if (!$util.isInteger(message.accept))
                                    return "accept: integer expected";
                            if (message.orders != null && message.hasOwnProperty("orders"))
                                if (!$util.isInteger(message.orders))
                                    return "orders: integer expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.open != null && message.hasOwnProperty("open"))
                                if (typeof message.open !== "boolean")
                                    return "open: boolean expected";
                            if (message.full != null && message.hasOwnProperty("full"))
                                if (typeof message.full !== "boolean")
                                    return "full: boolean expected";
                            if (message.content != null && message.hasOwnProperty("content"))
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (!$util.isInteger(message.focusNumber) && !(message.focusNumber && $util.isInteger(message.focusNumber.low) && $util.isInteger(message.focusNumber.high)))
                                    return "focusNumber: integer|Long expected";
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (!$util.isInteger(message.loveNumber) && !(message.loveNumber && $util.isInteger(message.loveNumber.low) && $util.isInteger(message.loveNumber.high)))
                                    return "loveNumber: integer|Long expected";
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                if (!$util.isInteger(message.despiseNumber) && !(message.despiseNumber && $util.isInteger(message.despiseNumber.low) && $util.isInteger(message.despiseNumber.high)))
                                    return "despiseNumber: integer|Long expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                if (!$util.isString(message.nickName))
                                    return "nickName: string expected";
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                if (!$util.isString(message.avatar))
                                    return "avatar: string expected";
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            if (message.password != null && message.hasOwnProperty("password"))
                                if (!$util.isString(message.password))
                                    return "password: string expected";
                            if (message.fileList != null && message.hasOwnProperty("fileList")) {
                                if (!Array.isArray(message.fileList))
                                    return "fileList: array expected";
                                for (let i = 0; i < message.fileList.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.article.model.Images.verify(message.fileList[i]);
                                    if (error)
                                        return "fileList." + error;
                                }
                            }
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                if (!$util.isString(message.targetId))
                                    return "targetId: string expected";
                            if (message.ownerId != null && message.hasOwnProperty("ownerId"))
                                if (!$util.isString(message.ownerId))
                                    return "ownerId: string expected";
                            return null;
                        };

                        /**
                         * Creates an Answer message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.answer.model.Answer} Answer
                         */
                        Answer.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.answer.model.Answer)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.answer.model.Answer();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.summary != null)
                                message.summary = String(object.summary);
                            if (object.income != null)
                                message.income = Number(object.income);
                            if (object.platform != null)
                                message.platform = Boolean(object.platform);
                            if (object.answerUserId != null)
                                message.answerUserId = String(object.answerUserId);
                            if (object.answerDate != null)
                                if ($util.Long)
                                    (message.answerDate = $util.Long.fromValue(object.answerDate)).unsigned = false;
                                else if (typeof object.answerDate === "string")
                                    message.answerDate = parseInt(object.answerDate, 10);
                                else if (typeof object.answerDate === "number")
                                    message.answerDate = object.answerDate;
                                else if (typeof object.answerDate === "object")
                                    message.answerDate = new $util.LongBits(object.answerDate.low >>> 0, object.answerDate.high >>> 0).toNumber();
                            if (object.questionId != null)
                                message.questionId = String(object.questionId);
                            if (object.accept != null)
                                message.accept = object.accept | 0;
                            if (object.orders != null)
                                message.orders = object.orders | 0;
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.open != null)
                                message.open = Boolean(object.open);
                            if (object.full != null)
                                message.full = Boolean(object.full);
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.focusNumber != null)
                                if ($util.Long)
                                    (message.focusNumber = $util.Long.fromValue(object.focusNumber)).unsigned = false;
                                else if (typeof object.focusNumber === "string")
                                    message.focusNumber = parseInt(object.focusNumber, 10);
                                else if (typeof object.focusNumber === "number")
                                    message.focusNumber = object.focusNumber;
                                else if (typeof object.focusNumber === "object")
                                    message.focusNumber = new $util.LongBits(object.focusNumber.low >>> 0, object.focusNumber.high >>> 0).toNumber();
                            if (object.loveNumber != null)
                                if ($util.Long)
                                    (message.loveNumber = $util.Long.fromValue(object.loveNumber)).unsigned = false;
                                else if (typeof object.loveNumber === "string")
                                    message.loveNumber = parseInt(object.loveNumber, 10);
                                else if (typeof object.loveNumber === "number")
                                    message.loveNumber = object.loveNumber;
                                else if (typeof object.loveNumber === "object")
                                    message.loveNumber = new $util.LongBits(object.loveNumber.low >>> 0, object.loveNumber.high >>> 0).toNumber();
                            if (object.despiseNumber != null)
                                if ($util.Long)
                                    (message.despiseNumber = $util.Long.fromValue(object.despiseNumber)).unsigned = false;
                                else if (typeof object.despiseNumber === "string")
                                    message.despiseNumber = parseInt(object.despiseNumber, 10);
                                else if (typeof object.despiseNumber === "number")
                                    message.despiseNumber = object.despiseNumber;
                                else if (typeof object.despiseNumber === "object")
                                    message.despiseNumber = new $util.LongBits(object.despiseNumber.low >>> 0, object.despiseNumber.high >>> 0).toNumber();
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.nickName != null)
                                message.nickName = String(object.nickName);
                            if (object.avatar != null)
                                message.avatar = String(object.avatar);
                            if (object.account != null)
                                message.account = String(object.account);
                            if (object.password != null)
                                message.password = String(object.password);
                            if (object.fileList) {
                                if (!Array.isArray(object.fileList))
                                    throw TypeError(".com.xueershangda.tianxun.answer.model.Answer.fileList: array expected");
                                message.fileList = [];
                                for (let i = 0; i < object.fileList.length; ++i) {
                                    if (typeof object.fileList[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.answer.model.Answer.fileList: object expected");
                                    message.fileList[i] = $root.com.xueershangda.tianxun.article.model.Images.fromObject(object.fileList[i]);
                                }
                            }
                            if (object.targetId != null)
                                message.targetId = String(object.targetId);
                            if (object.ownerId != null)
                                message.ownerId = String(object.ownerId);
                            return message;
                        };

                        /**
                         * Creates a plain object from an Answer message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.Answer} message Answer
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Answer.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.fileList = [];
                            if (options.defaults) {
                                object.id = "";
                                object.summary = "";
                                object.income = 0;
                                object.platform = false;
                                object.answerUserId = "";
                                object.answerDate = 0;
                                object.questionId = "";
                                object.accept = 0;
                                object.orders = 0;
                                object.state = 0;
                                object.open = false;
                                object.full = false;
                                object.content = "";
                                object.focusNumber = 0;
                                object.loveNumber = 0;
                                object.despiseNumber = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.nickName = "";
                                object.avatar = "";
                                object.account = "";
                                object.password = "";
                                object.targetId = "";
                                object.ownerId = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                object.summary = message.summary;
                            if (message.income != null && message.hasOwnProperty("income"))
                                object.income = options.json && !isFinite(message.income) ? String(message.income) : message.income;
                            if (message.platform != null && message.hasOwnProperty("platform"))
                                object.platform = message.platform;
                            if (message.answerUserId != null && message.hasOwnProperty("answerUserId"))
                                object.answerUserId = message.answerUserId;
                            if (message.answerDate != null && message.hasOwnProperty("answerDate"))
                                if (typeof message.answerDate === "number")
                                    object.answerDate = options.longs === String ? String(message.answerDate) : message.answerDate;
                                else
                                    object.answerDate = options.longs === String ? $util.Long.prototype.toString.call(message.answerDate) : options.longs === Number ? new $util.LongBits(message.answerDate.low >>> 0, message.answerDate.high >>> 0).toNumber() : message.answerDate;
                            if (message.questionId != null && message.hasOwnProperty("questionId"))
                                object.questionId = message.questionId;
                            if (message.accept != null && message.hasOwnProperty("accept"))
                                object.accept = message.accept;
                            if (message.orders != null && message.hasOwnProperty("orders"))
                                object.orders = message.orders;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.open != null && message.hasOwnProperty("open"))
                                object.open = message.open;
                            if (message.full != null && message.hasOwnProperty("full"))
                                object.full = message.full;
                            if (message.content != null && message.hasOwnProperty("content"))
                                object.content = message.content;
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (typeof message.focusNumber === "number")
                                    object.focusNumber = options.longs === String ? String(message.focusNumber) : message.focusNumber;
                                else
                                    object.focusNumber = options.longs === String ? $util.Long.prototype.toString.call(message.focusNumber) : options.longs === Number ? new $util.LongBits(message.focusNumber.low >>> 0, message.focusNumber.high >>> 0).toNumber() : message.focusNumber;
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (typeof message.loveNumber === "number")
                                    object.loveNumber = options.longs === String ? String(message.loveNumber) : message.loveNumber;
                                else
                                    object.loveNumber = options.longs === String ? $util.Long.prototype.toString.call(message.loveNumber) : options.longs === Number ? new $util.LongBits(message.loveNumber.low >>> 0, message.loveNumber.high >>> 0).toNumber() : message.loveNumber;
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                if (typeof message.despiseNumber === "number")
                                    object.despiseNumber = options.longs === String ? String(message.despiseNumber) : message.despiseNumber;
                                else
                                    object.despiseNumber = options.longs === String ? $util.Long.prototype.toString.call(message.despiseNumber) : options.longs === Number ? new $util.LongBits(message.despiseNumber.low >>> 0, message.despiseNumber.high >>> 0).toNumber() : message.despiseNumber;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                object.nickName = message.nickName;
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                object.avatar = message.avatar;
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            if (message.password != null && message.hasOwnProperty("password"))
                                object.password = message.password;
                            if (message.fileList && message.fileList.length) {
                                object.fileList = [];
                                for (let j = 0; j < message.fileList.length; ++j)
                                    object.fileList[j] = $root.com.xueershangda.tianxun.article.model.Images.toObject(message.fileList[j], options);
                            }
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                object.targetId = message.targetId;
                            if (message.ownerId != null && message.hasOwnProperty("ownerId"))
                                object.ownerId = message.ownerId;
                            return object;
                        };

                        /**
                         * Converts this Answer to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.answer.model.Answer
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Answer.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Answer;
                    })();

                    model.AnswerReply = (function() {

                        /**
                         * Properties of an AnswerReply.
                         * @memberof com.xueershangda.tianxun.answer.model
                         * @interface IAnswerReply
                         * @property {number|null} [code] AnswerReply code
                         * @property {string|null} [message] AnswerReply message
                         * @property {Array.<com.xueershangda.tianxun.answer.model.IAnswer>|null} [data] AnswerReply data
                         * @property {com.xueershangda.tianxun.question.model.IQuestion|null} [question] AnswerReply question
                         */

                        /**
                         * Constructs a new AnswerReply.
                         * @memberof com.xueershangda.tianxun.answer.model
                         * @classdesc Represents an AnswerReply.
                         * @implements IAnswerReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.answer.model.IAnswerReply=} [properties] Properties to set
                         */
                        function AnswerReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AnswerReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @instance
                         */
                        AnswerReply.prototype.code = 0;

                        /**
                         * AnswerReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @instance
                         */
                        AnswerReply.prototype.message = "";

                        /**
                         * AnswerReply data.
                         * @member {Array.<com.xueershangda.tianxun.answer.model.IAnswer>} data
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @instance
                         */
                        AnswerReply.prototype.data = $util.emptyArray;

                        /**
                         * AnswerReply question.
                         * @member {com.xueershangda.tianxun.question.model.IQuestion|null|undefined} question
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @instance
                         */
                        AnswerReply.prototype.question = null;

                        /**
                         * Creates a new AnswerReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IAnswerReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.answer.model.AnswerReply} AnswerReply instance
                         */
                        AnswerReply.create = function create(properties) {
                            return new AnswerReply(properties);
                        };

                        /**
                         * Encodes the specified AnswerReply message. Does not implicitly {@link com.xueershangda.tianxun.answer.model.AnswerReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IAnswerReply} message AnswerReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnswerReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.answer.model.Answer.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.question != null && message.hasOwnProperty("question"))
                                $root.com.xueershangda.tianxun.question.model.Question.encode(message.question, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified AnswerReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.answer.model.AnswerReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IAnswerReply} message AnswerReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnswerReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AnswerReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.answer.model.AnswerReply} AnswerReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnswerReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.answer.model.AnswerReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.answer.model.Answer.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    message.question = $root.com.xueershangda.tianxun.question.model.Question.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AnswerReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.answer.model.AnswerReply} AnswerReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnswerReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AnswerReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnswerReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.answer.model.Answer.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.question != null && message.hasOwnProperty("question")) {
                                let error = $root.com.xueershangda.tianxun.question.model.Question.verify(message.question);
                                if (error)
                                    return "question." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates an AnswerReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.answer.model.AnswerReply} AnswerReply
                         */
                        AnswerReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.answer.model.AnswerReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.answer.model.AnswerReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.answer.model.AnswerReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.answer.model.AnswerReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.answer.model.Answer.fromObject(object.data[i]);
                                }
                            }
                            if (object.question != null) {
                                if (typeof object.question !== "object")
                                    throw TypeError(".com.xueershangda.tianxun.answer.model.AnswerReply.question: object expected");
                                message.question = $root.com.xueershangda.tianxun.question.model.Question.fromObject(object.question);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an AnswerReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.AnswerReply} message AnswerReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnswerReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                                object.question = null;
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.answer.model.Answer.toObject(message.data[j], options);
                            }
                            if (message.question != null && message.hasOwnProperty("question"))
                                object.question = $root.com.xueershangda.tianxun.question.model.Question.toObject(message.question, options);
                            return object;
                        };

                        /**
                         * Converts this AnswerReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnswerReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AnswerReply;
                    })();

                    model.Dialogue = (function() {

                        /**
                         * Properties of a Dialogue.
                         * @memberof com.xueershangda.tianxun.answer.model
                         * @interface IDialogue
                         * @property {string|null} [id] Dialogue id
                         * @property {string|null} [userId] Dialogue userId
                         * @property {string|null} [nickName] Dialogue nickName
                         * @property {number|Long|null} [dialogDate] Dialogue dialogDate
                         * @property {string|null} [questionId] Dialogue questionId
                         * @property {number|null} [state] Dialogue state
                         * @property {boolean|null} [open] Dialogue open
                         * @property {string|null} [answerId] Dialogue answerId
                         * @property {string|null} [content] Dialogue content
                         * @property {number|null} [page] Dialogue page
                         * @property {number|null} [pageSize] Dialogue pageSize
                         * @property {string|null} [orderBy] Dialogue orderBy
                         */

                        /**
                         * Constructs a new Dialogue.
                         * @memberof com.xueershangda.tianxun.answer.model
                         * @classdesc Represents a Dialogue.
                         * @implements IDialogue
                         * @constructor
                         * @param {com.xueershangda.tianxun.answer.model.IDialogue=} [properties] Properties to set
                         */
                        function Dialogue(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Dialogue id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.id = "";

                        /**
                         * Dialogue userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.userId = "";

                        /**
                         * Dialogue nickName.
                         * @member {string} nickName
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.nickName = "";

                        /**
                         * Dialogue dialogDate.
                         * @member {number|Long} dialogDate
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.dialogDate = 0;

                        /**
                         * Dialogue questionId.
                         * @member {string} questionId
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.questionId = "";

                        /**
                         * Dialogue state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.state = 0;

                        /**
                         * Dialogue open.
                         * @member {boolean} open
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.open = false;

                        /**
                         * Dialogue answerId.
                         * @member {string} answerId
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.answerId = "";

                        /**
                         * Dialogue content.
                         * @member {string} content
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.content = "";

                        /**
                         * Dialogue page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.page = 0;

                        /**
                         * Dialogue pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.pageSize = 0;

                        /**
                         * Dialogue orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         */
                        Dialogue.prototype.orderBy = "";

                        /**
                         * Creates a new Dialogue instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IDialogue=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.answer.model.Dialogue} Dialogue instance
                         */
                        Dialogue.create = function create(properties) {
                            return new Dialogue(properties);
                        };

                        /**
                         * Encodes the specified Dialogue message. Does not implicitly {@link com.xueershangda.tianxun.answer.model.Dialogue.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IDialogue} message Dialogue message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Dialogue.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickName);
                            if (message.dialogDate != null && message.hasOwnProperty("dialogDate"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.dialogDate);
                            if (message.questionId != null && message.hasOwnProperty("questionId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.questionId);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.state);
                            if (message.open != null && message.hasOwnProperty("open"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.open);
                            if (message.answerId != null && message.hasOwnProperty("answerId"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.answerId);
                            if (message.content != null && message.hasOwnProperty("content"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.content);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 12, wireType 2 =*/98).string(message.orderBy);
                            return writer;
                        };

                        /**
                         * Encodes the specified Dialogue message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.answer.model.Dialogue.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IDialogue} message Dialogue message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Dialogue.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Dialogue message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.answer.model.Dialogue} Dialogue
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Dialogue.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.answer.model.Dialogue();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.userId = reader.string();
                                    break;
                                case 3:
                                    message.nickName = reader.string();
                                    break;
                                case 4:
                                    message.dialogDate = reader.int64();
                                    break;
                                case 5:
                                    message.questionId = reader.string();
                                    break;
                                case 6:
                                    message.state = reader.int32();
                                    break;
                                case 7:
                                    message.open = reader.bool();
                                    break;
                                case 8:
                                    message.answerId = reader.string();
                                    break;
                                case 9:
                                    message.content = reader.string();
                                    break;
                                case 10:
                                    message.page = reader.int32();
                                    break;
                                case 11:
                                    message.pageSize = reader.int32();
                                    break;
                                case 12:
                                    message.orderBy = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Dialogue message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.answer.model.Dialogue} Dialogue
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Dialogue.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Dialogue message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Dialogue.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                if (!$util.isString(message.nickName))
                                    return "nickName: string expected";
                            if (message.dialogDate != null && message.hasOwnProperty("dialogDate"))
                                if (!$util.isInteger(message.dialogDate) && !(message.dialogDate && $util.isInteger(message.dialogDate.low) && $util.isInteger(message.dialogDate.high)))
                                    return "dialogDate: integer|Long expected";
                            if (message.questionId != null && message.hasOwnProperty("questionId"))
                                if (!$util.isString(message.questionId))
                                    return "questionId: string expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.open != null && message.hasOwnProperty("open"))
                                if (typeof message.open !== "boolean")
                                    return "open: boolean expected";
                            if (message.answerId != null && message.hasOwnProperty("answerId"))
                                if (!$util.isString(message.answerId))
                                    return "answerId: string expected";
                            if (message.content != null && message.hasOwnProperty("content"))
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            return null;
                        };

                        /**
                         * Creates a Dialogue message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.answer.model.Dialogue} Dialogue
                         */
                        Dialogue.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.answer.model.Dialogue)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.answer.model.Dialogue();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.nickName != null)
                                message.nickName = String(object.nickName);
                            if (object.dialogDate != null)
                                if ($util.Long)
                                    (message.dialogDate = $util.Long.fromValue(object.dialogDate)).unsigned = false;
                                else if (typeof object.dialogDate === "string")
                                    message.dialogDate = parseInt(object.dialogDate, 10);
                                else if (typeof object.dialogDate === "number")
                                    message.dialogDate = object.dialogDate;
                                else if (typeof object.dialogDate === "object")
                                    message.dialogDate = new $util.LongBits(object.dialogDate.low >>> 0, object.dialogDate.high >>> 0).toNumber();
                            if (object.questionId != null)
                                message.questionId = String(object.questionId);
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.open != null)
                                message.open = Boolean(object.open);
                            if (object.answerId != null)
                                message.answerId = String(object.answerId);
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Dialogue message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.Dialogue} message Dialogue
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Dialogue.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.userId = "";
                                object.nickName = "";
                                object.dialogDate = 0;
                                object.questionId = "";
                                object.state = 0;
                                object.open = false;
                                object.answerId = "";
                                object.content = "";
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                object.nickName = message.nickName;
                            if (message.dialogDate != null && message.hasOwnProperty("dialogDate"))
                                if (typeof message.dialogDate === "number")
                                    object.dialogDate = options.longs === String ? String(message.dialogDate) : message.dialogDate;
                                else
                                    object.dialogDate = options.longs === String ? $util.Long.prototype.toString.call(message.dialogDate) : options.longs === Number ? new $util.LongBits(message.dialogDate.low >>> 0, message.dialogDate.high >>> 0).toNumber() : message.dialogDate;
                            if (message.questionId != null && message.hasOwnProperty("questionId"))
                                object.questionId = message.questionId;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.open != null && message.hasOwnProperty("open"))
                                object.open = message.open;
                            if (message.answerId != null && message.hasOwnProperty("answerId"))
                                object.answerId = message.answerId;
                            if (message.content != null && message.hasOwnProperty("content"))
                                object.content = message.content;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };

                        /**
                         * Converts this Dialogue to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.answer.model.Dialogue
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Dialogue.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Dialogue;
                    })();

                    model.DialogueReply = (function() {

                        /**
                         * Properties of a DialogueReply.
                         * @memberof com.xueershangda.tianxun.answer.model
                         * @interface IDialogueReply
                         * @property {number|null} [code] DialogueReply code
                         * @property {string|null} [message] DialogueReply message
                         * @property {Array.<com.xueershangda.tianxun.answer.model.IDialogue>|null} [data] DialogueReply data
                         */

                        /**
                         * Constructs a new DialogueReply.
                         * @memberof com.xueershangda.tianxun.answer.model
                         * @classdesc Represents a DialogueReply.
                         * @implements IDialogueReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.answer.model.IDialogueReply=} [properties] Properties to set
                         */
                        function DialogueReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DialogueReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @instance
                         */
                        DialogueReply.prototype.code = 0;

                        /**
                         * DialogueReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @instance
                         */
                        DialogueReply.prototype.message = "";

                        /**
                         * DialogueReply data.
                         * @member {Array.<com.xueershangda.tianxun.answer.model.IDialogue>} data
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @instance
                         */
                        DialogueReply.prototype.data = $util.emptyArray;

                        /**
                         * Creates a new DialogueReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IDialogueReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.answer.model.DialogueReply} DialogueReply instance
                         */
                        DialogueReply.create = function create(properties) {
                            return new DialogueReply(properties);
                        };

                        /**
                         * Encodes the specified DialogueReply message. Does not implicitly {@link com.xueershangda.tianxun.answer.model.DialogueReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IDialogueReply} message DialogueReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DialogueReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.answer.model.Dialogue.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DialogueReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.answer.model.DialogueReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IDialogueReply} message DialogueReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DialogueReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DialogueReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.answer.model.DialogueReply} DialogueReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DialogueReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.answer.model.DialogueReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.answer.model.Dialogue.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DialogueReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.answer.model.DialogueReply} DialogueReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DialogueReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DialogueReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DialogueReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.answer.model.Dialogue.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a DialogueReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.answer.model.DialogueReply} DialogueReply
                         */
                        DialogueReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.answer.model.DialogueReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.answer.model.DialogueReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.answer.model.DialogueReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.answer.model.DialogueReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.answer.model.Dialogue.fromObject(object.data[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DialogueReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.DialogueReply} message DialogueReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DialogueReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.answer.model.Dialogue.toObject(message.data[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this DialogueReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.answer.model.DialogueReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DialogueReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return DialogueReply;
                    })();

                    model.AnswerFile = (function() {

                        /**
                         * Properties of an AnswerFile.
                         * @memberof com.xueershangda.tianxun.answer.model
                         * @interface IAnswerFile
                         * @property {string|null} [id] AnswerFile id
                         * @property {string|null} [answerId] AnswerFile answerId
                         * @property {string|null} [filePath] AnswerFile filePath
                         * @property {number|Long|null} [createDate] AnswerFile createDate
                         * @property {string|null} [type] AnswerFile type
                         * @property {number|null} [page] AnswerFile page
                         * @property {number|null} [pageSize] AnswerFile pageSize
                         * @property {string|null} [orderBy] AnswerFile orderBy
                         */

                        /**
                         * Constructs a new AnswerFile.
                         * @memberof com.xueershangda.tianxun.answer.model
                         * @classdesc Represents an AnswerFile.
                         * @implements IAnswerFile
                         * @constructor
                         * @param {com.xueershangda.tianxun.answer.model.IAnswerFile=} [properties] Properties to set
                         */
                        function AnswerFile(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AnswerFile id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @instance
                         */
                        AnswerFile.prototype.id = "";

                        /**
                         * AnswerFile answerId.
                         * @member {string} answerId
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @instance
                         */
                        AnswerFile.prototype.answerId = "";

                        /**
                         * AnswerFile filePath.
                         * @member {string} filePath
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @instance
                         */
                        AnswerFile.prototype.filePath = "";

                        /**
                         * AnswerFile createDate.
                         * @member {number|Long} createDate
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @instance
                         */
                        AnswerFile.prototype.createDate = 0;

                        /**
                         * AnswerFile type.
                         * @member {string} type
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @instance
                         */
                        AnswerFile.prototype.type = "";

                        /**
                         * AnswerFile page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @instance
                         */
                        AnswerFile.prototype.page = 0;

                        /**
                         * AnswerFile pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @instance
                         */
                        AnswerFile.prototype.pageSize = 0;

                        /**
                         * AnswerFile orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @instance
                         */
                        AnswerFile.prototype.orderBy = "";

                        /**
                         * Creates a new AnswerFile instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IAnswerFile=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.answer.model.AnswerFile} AnswerFile instance
                         */
                        AnswerFile.create = function create(properties) {
                            return new AnswerFile(properties);
                        };

                        /**
                         * Encodes the specified AnswerFile message. Does not implicitly {@link com.xueershangda.tianxun.answer.model.AnswerFile.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IAnswerFile} message AnswerFile message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnswerFile.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.answerId != null && message.hasOwnProperty("answerId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.answerId);
                            if (message.filePath != null && message.hasOwnProperty("filePath"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.filePath);
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.createDate);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.type);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.orderBy);
                            return writer;
                        };

                        /**
                         * Encodes the specified AnswerFile message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.answer.model.AnswerFile.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.IAnswerFile} message AnswerFile message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnswerFile.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AnswerFile message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.answer.model.AnswerFile} AnswerFile
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnswerFile.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.answer.model.AnswerFile();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.answerId = reader.string();
                                    break;
                                case 3:
                                    message.filePath = reader.string();
                                    break;
                                case 4:
                                    message.createDate = reader.int64();
                                    break;
                                case 5:
                                    message.type = reader.string();
                                    break;
                                case 6:
                                    message.page = reader.int32();
                                    break;
                                case 7:
                                    message.pageSize = reader.int32();
                                    break;
                                case 8:
                                    message.orderBy = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AnswerFile message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.answer.model.AnswerFile} AnswerFile
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnswerFile.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AnswerFile message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnswerFile.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.answerId != null && message.hasOwnProperty("answerId"))
                                if (!$util.isString(message.answerId))
                                    return "answerId: string expected";
                            if (message.filePath != null && message.hasOwnProperty("filePath"))
                                if (!$util.isString(message.filePath))
                                    return "filePath: string expected";
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                    return "createDate: integer|Long expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            return null;
                        };

                        /**
                         * Creates an AnswerFile message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.answer.model.AnswerFile} AnswerFile
                         */
                        AnswerFile.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.answer.model.AnswerFile)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.answer.model.AnswerFile();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.answerId != null)
                                message.answerId = String(object.answerId);
                            if (object.filePath != null)
                                message.filePath = String(object.filePath);
                            if (object.createDate != null)
                                if ($util.Long)
                                    (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                                else if (typeof object.createDate === "string")
                                    message.createDate = parseInt(object.createDate, 10);
                                else if (typeof object.createDate === "number")
                                    message.createDate = object.createDate;
                                else if (typeof object.createDate === "object")
                                    message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            return message;
                        };

                        /**
                         * Creates a plain object from an AnswerFile message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @static
                         * @param {com.xueershangda.tianxun.answer.model.AnswerFile} message AnswerFile
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnswerFile.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.answerId = "";
                                object.filePath = "";
                                object.createDate = 0;
                                object.type = "";
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.answerId != null && message.hasOwnProperty("answerId"))
                                object.answerId = message.answerId;
                            if (message.filePath != null && message.hasOwnProperty("filePath"))
                                object.filePath = message.filePath;
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (typeof message.createDate === "number")
                                    object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                                else
                                    object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };

                        /**
                         * Converts this AnswerFile to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.answer.model.AnswerFile
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnswerFile.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AnswerFile;
                    })();

                    return model;
                })();

                return answer;
            })();

            tianxun.article = (function() {

                /**
                 * Namespace article.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const article = {};

                article.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.article
                     * @namespace
                     */
                    const model = {};

                    model.Images = (function() {

                        /**
                         * Properties of an Images.
                         * @memberof com.xueershangda.tianxun.article.model
                         * @interface IImages
                         * @property {string|null} [id] Images id
                         * @property {string|null} [targetId] Images targetId
                         * @property {string|null} [filePath] Images filePath
                         * @property {number|Long|null} [createDate] Images createDate
                         * @property {string|null} [type] Images type
                         * @property {number|null} [source] Images source
                         * @property {number|null} [page] Images page
                         * @property {number|null} [pageSize] Images pageSize
                         * @property {string|null} [orderBy] Images orderBy
                         * @property {string|null} [name] Images name
                         * @property {string|null} [url] Images url
                         */

                        /**
                         * Constructs a new Images.
                         * @memberof com.xueershangda.tianxun.article.model
                         * @classdesc Represents an Images.
                         * @implements IImages
                         * @constructor
                         * @param {com.xueershangda.tianxun.article.model.IImages=} [properties] Properties to set
                         */
                        function Images(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Images id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.id = "";

                        /**
                         * Images targetId.
                         * @member {string} targetId
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.targetId = "";

                        /**
                         * Images filePath.
                         * @member {string} filePath
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.filePath = "";

                        /**
                         * Images createDate.
                         * @member {number|Long} createDate
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.createDate = 0;

                        /**
                         * Images type.
                         * @member {string} type
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.type = "";

                        /**
                         * Images source.
                         * @member {number} source
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.source = 0;

                        /**
                         * Images page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.page = 0;

                        /**
                         * Images pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.pageSize = 0;

                        /**
                         * Images orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.orderBy = "";

                        /**
                         * Images name.
                         * @member {string} name
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.name = "";

                        /**
                         * Images url.
                         * @member {string} url
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         */
                        Images.prototype.url = "";

                        /**
                         * Creates a new Images instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.IImages=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.article.model.Images} Images instance
                         */
                        Images.create = function create(properties) {
                            return new Images(properties);
                        };

                        /**
                         * Encodes the specified Images message. Does not implicitly {@link com.xueershangda.tianxun.article.model.Images.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.IImages} message Images message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Images.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.targetId);
                            if (message.filePath != null && message.hasOwnProperty("filePath"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.filePath);
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.createDate);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.type);
                            if (message.source != null && message.hasOwnProperty("source"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.source);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.orderBy);
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.name);
                            if (message.url != null && message.hasOwnProperty("url"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.url);
                            return writer;
                        };

                        /**
                         * Encodes the specified Images message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.article.model.Images.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.IImages} message Images message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Images.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Images message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.article.model.Images} Images
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Images.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.article.model.Images();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.targetId = reader.string();
                                    break;
                                case 3:
                                    message.filePath = reader.string();
                                    break;
                                case 4:
                                    message.createDate = reader.int64();
                                    break;
                                case 5:
                                    message.type = reader.string();
                                    break;
                                case 6:
                                    message.source = reader.int32();
                                    break;
                                case 7:
                                    message.page = reader.int32();
                                    break;
                                case 8:
                                    message.pageSize = reader.int32();
                                    break;
                                case 9:
                                    message.orderBy = reader.string();
                                    break;
                                case 10:
                                    message.name = reader.string();
                                    break;
                                case 11:
                                    message.url = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Images message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.article.model.Images} Images
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Images.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Images message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Images.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                if (!$util.isString(message.targetId))
                                    return "targetId: string expected";
                            if (message.filePath != null && message.hasOwnProperty("filePath"))
                                if (!$util.isString(message.filePath))
                                    return "filePath: string expected";
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                    return "createDate: integer|Long expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.source != null && message.hasOwnProperty("source"))
                                if (!$util.isInteger(message.source))
                                    return "source: integer expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.url != null && message.hasOwnProperty("url"))
                                if (!$util.isString(message.url))
                                    return "url: string expected";
                            return null;
                        };

                        /**
                         * Creates an Images message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.article.model.Images} Images
                         */
                        Images.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.article.model.Images)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.article.model.Images();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.targetId != null)
                                message.targetId = String(object.targetId);
                            if (object.filePath != null)
                                message.filePath = String(object.filePath);
                            if (object.createDate != null)
                                if ($util.Long)
                                    (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                                else if (typeof object.createDate === "string")
                                    message.createDate = parseInt(object.createDate, 10);
                                else if (typeof object.createDate === "number")
                                    message.createDate = object.createDate;
                                else if (typeof object.createDate === "object")
                                    message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.source != null)
                                message.source = object.source | 0;
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.url != null)
                                message.url = String(object.url);
                            return message;
                        };

                        /**
                         * Creates a plain object from an Images message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.Images} message Images
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Images.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.targetId = "";
                                object.filePath = "";
                                object.createDate = 0;
                                object.type = "";
                                object.source = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.name = "";
                                object.url = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                object.targetId = message.targetId;
                            if (message.filePath != null && message.hasOwnProperty("filePath"))
                                object.filePath = message.filePath;
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (typeof message.createDate === "number")
                                    object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                                else
                                    object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.source != null && message.hasOwnProperty("source"))
                                object.source = message.source;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.url != null && message.hasOwnProperty("url"))
                                object.url = message.url;
                            return object;
                        };

                        /**
                         * Converts this Images to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.article.model.Images
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Images.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Images;
                    })();

                    model.Article = (function() {

                        /**
                         * Properties of an Article.
                         * @memberof com.xueershangda.tianxun.article.model
                         * @interface IArticle
                         * @property {string|null} [id] Article id
                         * @property {string|null} [title] Article title
                         * @property {string|null} [summary] Article summary
                         * @property {number|null} [freeTimes] Article freeTimes
                         * @property {string|null} [category] Article category
                         * @property {string|null} [specialId] Article specialId
                         * @property {string|null} [terminal] Article terminal
                         * @property {string|null} [authorId] Article authorId
                         * @property {string|null} [authorName] Article authorName
                         * @property {number|Long|null} [createDate] Article createDate
                         * @property {number|Long|null} [updateDate] Article updateDate
                         * @property {number|null} [state] Article state
                         * @property {boolean|null} [platform] Article platform
                         * @property {boolean|null} [open] Article open
                         * @property {boolean|null} [deleted] Article deleted
                         * @property {boolean|null} [free] Article free
                         * @property {number|null} [price] Article price
                         * @property {string|null} [content] Article content
                         * @property {number|Long|null} [number] Article number
                         * @property {number|Long|null} [focusNumber] Article focusNumber
                         * @property {number|Long|null} [loveNumber] Article loveNumber
                         * @property {number|Long|null} [despiseNumber] Article despiseNumber
                         * @property {number|Long|null} [deleteDate] Article deleteDate
                         * @property {number|null} [page] Article page
                         * @property {number|null} [pageSize] Article pageSize
                         * @property {string|null} [orderBy] Article orderBy
                         * @property {string|null} [tokenId] Article tokenId
                         * @property {Array.<com.xueershangda.tianxun.article.model.IImages>|null} [fileList] Article fileList
                         * @property {Array.<string>|null} [ids] Article ids
                         * @property {string|null} [coverImage] Article coverImage
                         * @property {string|null} [backup] Article backup
                         */

                        /**
                         * Constructs a new Article.
                         * @memberof com.xueershangda.tianxun.article.model
                         * @classdesc Represents an Article.
                         * @implements IArticle
                         * @constructor
                         * @param {com.xueershangda.tianxun.article.model.IArticle=} [properties] Properties to set
                         */
                        function Article(properties) {
                            this.fileList = [];
                            this.ids = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Article id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.id = "";

                        /**
                         * Article title.
                         * @member {string} title
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.title = "";

                        /**
                         * Article summary.
                         * @member {string} summary
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.summary = "";

                        /**
                         * Article freeTimes.
                         * @member {number} freeTimes
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.freeTimes = 0;

                        /**
                         * Article category.
                         * @member {string} category
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.category = "";

                        /**
                         * Article specialId.
                         * @member {string} specialId
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.specialId = "";

                        /**
                         * Article terminal.
                         * @member {string} terminal
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.terminal = "";

                        /**
                         * Article authorId.
                         * @member {string} authorId
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.authorId = "";

                        /**
                         * Article authorName.
                         * @member {string} authorName
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.authorName = "";

                        /**
                         * Article createDate.
                         * @member {number|Long} createDate
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.createDate = 0;

                        /**
                         * Article updateDate.
                         * @member {number|Long} updateDate
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.updateDate = 0;

                        /**
                         * Article state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.state = 0;

                        /**
                         * Article platform.
                         * @member {boolean} platform
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.platform = false;

                        /**
                         * Article open.
                         * @member {boolean} open
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.open = false;

                        /**
                         * Article deleted.
                         * @member {boolean} deleted
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.deleted = false;

                        /**
                         * Article free.
                         * @member {boolean} free
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.free = false;

                        /**
                         * Article price.
                         * @member {number} price
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.price = 0;

                        /**
                         * Article content.
                         * @member {string} content
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.content = "";

                        /**
                         * Article number.
                         * @member {number|Long} number
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.number = 0;

                        /**
                         * Article focusNumber.
                         * @member {number|Long} focusNumber
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.focusNumber = 0;

                        /**
                         * Article loveNumber.
                         * @member {number|Long} loveNumber
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.loveNumber = 0;

                        /**
                         * Article despiseNumber.
                         * @member {number|Long} despiseNumber
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.despiseNumber = 0;

                        /**
                         * Article deleteDate.
                         * @member {number|Long} deleteDate
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.deleteDate = 0;

                        /**
                         * Article page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.page = 0;

                        /**
                         * Article pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.pageSize = 0;

                        /**
                         * Article orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.orderBy = "";

                        /**
                         * Article tokenId.
                         * @member {string} tokenId
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.tokenId = "";

                        /**
                         * Article fileList.
                         * @member {Array.<com.xueershangda.tianxun.article.model.IImages>} fileList
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.fileList = $util.emptyArray;

                        /**
                         * Article ids.
                         * @member {Array.<string>} ids
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.ids = $util.emptyArray;

                        /**
                         * Article coverImage.
                         * @member {string} coverImage
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.coverImage = "";

                        /**
                         * Article backup.
                         * @member {string} backup
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         */
                        Article.prototype.backup = "";

                        /**
                         * Creates a new Article instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.IArticle=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.article.model.Article} Article instance
                         */
                        Article.create = function create(properties) {
                            return new Article(properties);
                        };

                        /**
                         * Encodes the specified Article message. Does not implicitly {@link com.xueershangda.tianxun.article.model.Article.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.IArticle} message Article message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Article.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.title != null && message.hasOwnProperty("title"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.summary);
                            if (message.freeTimes != null && message.hasOwnProperty("freeTimes"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.freeTimes);
                            if (message.category != null && message.hasOwnProperty("category"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.category);
                            if (message.specialId != null && message.hasOwnProperty("specialId"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.specialId);
                            if (message.terminal != null && message.hasOwnProperty("terminal"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.terminal);
                            if (message.authorId != null && message.hasOwnProperty("authorId"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.authorId);
                            if (message.authorName != null && message.hasOwnProperty("authorName"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.authorName);
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.createDate);
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int64(message.updateDate);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.state);
                            if (message.platform != null && message.hasOwnProperty("platform"))
                                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.platform);
                            if (message.open != null && message.hasOwnProperty("open"))
                                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.open);
                            if (message.deleted != null && message.hasOwnProperty("deleted"))
                                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.deleted);
                            if (message.free != null && message.hasOwnProperty("free"))
                                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.free);
                            if (message.price != null && message.hasOwnProperty("price"))
                                writer.uint32(/* id 17, wireType 1 =*/137).double(message.price);
                            if (message.content != null && message.hasOwnProperty("content"))
                                writer.uint32(/* id 18, wireType 2 =*/146).string(message.content);
                            if (message.number != null && message.hasOwnProperty("number"))
                                writer.uint32(/* id 19, wireType 0 =*/152).int64(message.number);
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                writer.uint32(/* id 20, wireType 0 =*/160).int64(message.focusNumber);
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                writer.uint32(/* id 21, wireType 0 =*/168).int64(message.loveNumber);
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                writer.uint32(/* id 22, wireType 0 =*/176).int64(message.despiseNumber);
                            if (message.deleteDate != null && message.hasOwnProperty("deleteDate"))
                                writer.uint32(/* id 23, wireType 0 =*/184).int64(message.deleteDate);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 24, wireType 0 =*/192).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 25, wireType 0 =*/200).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 26, wireType 2 =*/210).string(message.orderBy);
                            if (message.tokenId != null && message.hasOwnProperty("tokenId"))
                                writer.uint32(/* id 27, wireType 2 =*/218).string(message.tokenId);
                            if (message.fileList != null && message.fileList.length)
                                for (let i = 0; i < message.fileList.length; ++i)
                                    $root.com.xueershangda.tianxun.article.model.Images.encode(message.fileList[i], writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
                            if (message.ids != null && message.ids.length)
                                for (let i = 0; i < message.ids.length; ++i)
                                    writer.uint32(/* id 29, wireType 2 =*/234).string(message.ids[i]);
                            if (message.coverImage != null && message.hasOwnProperty("coverImage"))
                                writer.uint32(/* id 30, wireType 2 =*/242).string(message.coverImage);
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                writer.uint32(/* id 31, wireType 2 =*/250).string(message.backup);
                            return writer;
                        };

                        /**
                         * Encodes the specified Article message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.article.model.Article.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.IArticle} message Article message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Article.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Article message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.article.model.Article} Article
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Article.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.article.model.Article();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.title = reader.string();
                                    break;
                                case 3:
                                    message.summary = reader.string();
                                    break;
                                case 4:
                                    message.freeTimes = reader.int32();
                                    break;
                                case 5:
                                    message.category = reader.string();
                                    break;
                                case 6:
                                    message.specialId = reader.string();
                                    break;
                                case 7:
                                    message.terminal = reader.string();
                                    break;
                                case 8:
                                    message.authorId = reader.string();
                                    break;
                                case 9:
                                    message.authorName = reader.string();
                                    break;
                                case 10:
                                    message.createDate = reader.int64();
                                    break;
                                case 11:
                                    message.updateDate = reader.int64();
                                    break;
                                case 12:
                                    message.state = reader.int32();
                                    break;
                                case 13:
                                    message.platform = reader.bool();
                                    break;
                                case 14:
                                    message.open = reader.bool();
                                    break;
                                case 15:
                                    message.deleted = reader.bool();
                                    break;
                                case 16:
                                    message.free = reader.bool();
                                    break;
                                case 17:
                                    message.price = reader.double();
                                    break;
                                case 18:
                                    message.content = reader.string();
                                    break;
                                case 19:
                                    message.number = reader.int64();
                                    break;
                                case 20:
                                    message.focusNumber = reader.int64();
                                    break;
                                case 21:
                                    message.loveNumber = reader.int64();
                                    break;
                                case 22:
                                    message.despiseNumber = reader.int64();
                                    break;
                                case 23:
                                    message.deleteDate = reader.int64();
                                    break;
                                case 24:
                                    message.page = reader.int32();
                                    break;
                                case 25:
                                    message.pageSize = reader.int32();
                                    break;
                                case 26:
                                    message.orderBy = reader.string();
                                    break;
                                case 27:
                                    message.tokenId = reader.string();
                                    break;
                                case 28:
                                    if (!(message.fileList && message.fileList.length))
                                        message.fileList = [];
                                    message.fileList.push($root.com.xueershangda.tianxun.article.model.Images.decode(reader, reader.uint32()));
                                    break;
                                case 29:
                                    if (!(message.ids && message.ids.length))
                                        message.ids = [];
                                    message.ids.push(reader.string());
                                    break;
                                case 30:
                                    message.coverImage = reader.string();
                                    break;
                                case 31:
                                    message.backup = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Article message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.article.model.Article} Article
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Article.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Article message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Article.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                if (!$util.isString(message.summary))
                                    return "summary: string expected";
                            if (message.freeTimes != null && message.hasOwnProperty("freeTimes"))
                                if (!$util.isInteger(message.freeTimes))
                                    return "freeTimes: integer expected";
                            if (message.category != null && message.hasOwnProperty("category"))
                                if (!$util.isString(message.category))
                                    return "category: string expected";
                            if (message.specialId != null && message.hasOwnProperty("specialId"))
                                if (!$util.isString(message.specialId))
                                    return "specialId: string expected";
                            if (message.terminal != null && message.hasOwnProperty("terminal"))
                                if (!$util.isString(message.terminal))
                                    return "terminal: string expected";
                            if (message.authorId != null && message.hasOwnProperty("authorId"))
                                if (!$util.isString(message.authorId))
                                    return "authorId: string expected";
                            if (message.authorName != null && message.hasOwnProperty("authorName"))
                                if (!$util.isString(message.authorName))
                                    return "authorName: string expected";
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                    return "createDate: integer|Long expected";
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                if (!$util.isInteger(message.updateDate) && !(message.updateDate && $util.isInteger(message.updateDate.low) && $util.isInteger(message.updateDate.high)))
                                    return "updateDate: integer|Long expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.platform != null && message.hasOwnProperty("platform"))
                                if (typeof message.platform !== "boolean")
                                    return "platform: boolean expected";
                            if (message.open != null && message.hasOwnProperty("open"))
                                if (typeof message.open !== "boolean")
                                    return "open: boolean expected";
                            if (message.deleted != null && message.hasOwnProperty("deleted"))
                                if (typeof message.deleted !== "boolean")
                                    return "deleted: boolean expected";
                            if (message.free != null && message.hasOwnProperty("free"))
                                if (typeof message.free !== "boolean")
                                    return "free: boolean expected";
                            if (message.price != null && message.hasOwnProperty("price"))
                                if (typeof message.price !== "number")
                                    return "price: number expected";
                            if (message.content != null && message.hasOwnProperty("content"))
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            if (message.number != null && message.hasOwnProperty("number"))
                                if (!$util.isInteger(message.number) && !(message.number && $util.isInteger(message.number.low) && $util.isInteger(message.number.high)))
                                    return "number: integer|Long expected";
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (!$util.isInteger(message.focusNumber) && !(message.focusNumber && $util.isInteger(message.focusNumber.low) && $util.isInteger(message.focusNumber.high)))
                                    return "focusNumber: integer|Long expected";
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (!$util.isInteger(message.loveNumber) && !(message.loveNumber && $util.isInteger(message.loveNumber.low) && $util.isInteger(message.loveNumber.high)))
                                    return "loveNumber: integer|Long expected";
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                if (!$util.isInteger(message.despiseNumber) && !(message.despiseNumber && $util.isInteger(message.despiseNumber.low) && $util.isInteger(message.despiseNumber.high)))
                                    return "despiseNumber: integer|Long expected";
                            if (message.deleteDate != null && message.hasOwnProperty("deleteDate"))
                                if (!$util.isInteger(message.deleteDate) && !(message.deleteDate && $util.isInteger(message.deleteDate.low) && $util.isInteger(message.deleteDate.high)))
                                    return "deleteDate: integer|Long expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.tokenId != null && message.hasOwnProperty("tokenId"))
                                if (!$util.isString(message.tokenId))
                                    return "tokenId: string expected";
                            if (message.fileList != null && message.hasOwnProperty("fileList")) {
                                if (!Array.isArray(message.fileList))
                                    return "fileList: array expected";
                                for (let i = 0; i < message.fileList.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.article.model.Images.verify(message.fileList[i]);
                                    if (error)
                                        return "fileList." + error;
                                }
                            }
                            if (message.ids != null && message.hasOwnProperty("ids")) {
                                if (!Array.isArray(message.ids))
                                    return "ids: array expected";
                                for (let i = 0; i < message.ids.length; ++i)
                                    if (!$util.isString(message.ids[i]))
                                        return "ids: string[] expected";
                            }
                            if (message.coverImage != null && message.hasOwnProperty("coverImage"))
                                if (!$util.isString(message.coverImage))
                                    return "coverImage: string expected";
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                if (!$util.isString(message.backup))
                                    return "backup: string expected";
                            return null;
                        };

                        /**
                         * Creates an Article message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.article.model.Article} Article
                         */
                        Article.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.article.model.Article)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.article.model.Article();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.summary != null)
                                message.summary = String(object.summary);
                            if (object.freeTimes != null)
                                message.freeTimes = object.freeTimes | 0;
                            if (object.category != null)
                                message.category = String(object.category);
                            if (object.specialId != null)
                                message.specialId = String(object.specialId);
                            if (object.terminal != null)
                                message.terminal = String(object.terminal);
                            if (object.authorId != null)
                                message.authorId = String(object.authorId);
                            if (object.authorName != null)
                                message.authorName = String(object.authorName);
                            if (object.createDate != null)
                                if ($util.Long)
                                    (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                                else if (typeof object.createDate === "string")
                                    message.createDate = parseInt(object.createDate, 10);
                                else if (typeof object.createDate === "number")
                                    message.createDate = object.createDate;
                                else if (typeof object.createDate === "object")
                                    message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                            if (object.updateDate != null)
                                if ($util.Long)
                                    (message.updateDate = $util.Long.fromValue(object.updateDate)).unsigned = false;
                                else if (typeof object.updateDate === "string")
                                    message.updateDate = parseInt(object.updateDate, 10);
                                else if (typeof object.updateDate === "number")
                                    message.updateDate = object.updateDate;
                                else if (typeof object.updateDate === "object")
                                    message.updateDate = new $util.LongBits(object.updateDate.low >>> 0, object.updateDate.high >>> 0).toNumber();
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.platform != null)
                                message.platform = Boolean(object.platform);
                            if (object.open != null)
                                message.open = Boolean(object.open);
                            if (object.deleted != null)
                                message.deleted = Boolean(object.deleted);
                            if (object.free != null)
                                message.free = Boolean(object.free);
                            if (object.price != null)
                                message.price = Number(object.price);
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.number != null)
                                if ($util.Long)
                                    (message.number = $util.Long.fromValue(object.number)).unsigned = false;
                                else if (typeof object.number === "string")
                                    message.number = parseInt(object.number, 10);
                                else if (typeof object.number === "number")
                                    message.number = object.number;
                                else if (typeof object.number === "object")
                                    message.number = new $util.LongBits(object.number.low >>> 0, object.number.high >>> 0).toNumber();
                            if (object.focusNumber != null)
                                if ($util.Long)
                                    (message.focusNumber = $util.Long.fromValue(object.focusNumber)).unsigned = false;
                                else if (typeof object.focusNumber === "string")
                                    message.focusNumber = parseInt(object.focusNumber, 10);
                                else if (typeof object.focusNumber === "number")
                                    message.focusNumber = object.focusNumber;
                                else if (typeof object.focusNumber === "object")
                                    message.focusNumber = new $util.LongBits(object.focusNumber.low >>> 0, object.focusNumber.high >>> 0).toNumber();
                            if (object.loveNumber != null)
                                if ($util.Long)
                                    (message.loveNumber = $util.Long.fromValue(object.loveNumber)).unsigned = false;
                                else if (typeof object.loveNumber === "string")
                                    message.loveNumber = parseInt(object.loveNumber, 10);
                                else if (typeof object.loveNumber === "number")
                                    message.loveNumber = object.loveNumber;
                                else if (typeof object.loveNumber === "object")
                                    message.loveNumber = new $util.LongBits(object.loveNumber.low >>> 0, object.loveNumber.high >>> 0).toNumber();
                            if (object.despiseNumber != null)
                                if ($util.Long)
                                    (message.despiseNumber = $util.Long.fromValue(object.despiseNumber)).unsigned = false;
                                else if (typeof object.despiseNumber === "string")
                                    message.despiseNumber = parseInt(object.despiseNumber, 10);
                                else if (typeof object.despiseNumber === "number")
                                    message.despiseNumber = object.despiseNumber;
                                else if (typeof object.despiseNumber === "object")
                                    message.despiseNumber = new $util.LongBits(object.despiseNumber.low >>> 0, object.despiseNumber.high >>> 0).toNumber();
                            if (object.deleteDate != null)
                                if ($util.Long)
                                    (message.deleteDate = $util.Long.fromValue(object.deleteDate)).unsigned = false;
                                else if (typeof object.deleteDate === "string")
                                    message.deleteDate = parseInt(object.deleteDate, 10);
                                else if (typeof object.deleteDate === "number")
                                    message.deleteDate = object.deleteDate;
                                else if (typeof object.deleteDate === "object")
                                    message.deleteDate = new $util.LongBits(object.deleteDate.low >>> 0, object.deleteDate.high >>> 0).toNumber();
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.tokenId != null)
                                message.tokenId = String(object.tokenId);
                            if (object.fileList) {
                                if (!Array.isArray(object.fileList))
                                    throw TypeError(".com.xueershangda.tianxun.article.model.Article.fileList: array expected");
                                message.fileList = [];
                                for (let i = 0; i < object.fileList.length; ++i) {
                                    if (typeof object.fileList[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.article.model.Article.fileList: object expected");
                                    message.fileList[i] = $root.com.xueershangda.tianxun.article.model.Images.fromObject(object.fileList[i]);
                                }
                            }
                            if (object.ids) {
                                if (!Array.isArray(object.ids))
                                    throw TypeError(".com.xueershangda.tianxun.article.model.Article.ids: array expected");
                                message.ids = [];
                                for (let i = 0; i < object.ids.length; ++i)
                                    message.ids[i] = String(object.ids[i]);
                            }
                            if (object.coverImage != null)
                                message.coverImage = String(object.coverImage);
                            if (object.backup != null)
                                message.backup = String(object.backup);
                            return message;
                        };

                        /**
                         * Creates a plain object from an Article message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.Article} message Article
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Article.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.fileList = [];
                                object.ids = [];
                            }
                            if (options.defaults) {
                                object.id = "";
                                object.title = "";
                                object.summary = "";
                                object.freeTimes = 0;
                                object.category = "";
                                object.specialId = "";
                                object.terminal = "";
                                object.authorId = "";
                                object.authorName = "";
                                object.createDate = 0;
                                object.updateDate = 0;
                                object.state = 0;
                                object.platform = false;
                                object.open = false;
                                object.deleted = false;
                                object.free = false;
                                object.price = 0;
                                object.content = "";
                                object.number = 0;
                                object.focusNumber = 0;
                                object.loveNumber = 0;
                                object.despiseNumber = 0;
                                object.deleteDate = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.tokenId = "";
                                object.coverImage = "";
                                object.backup = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                object.summary = message.summary;
                            if (message.freeTimes != null && message.hasOwnProperty("freeTimes"))
                                object.freeTimes = message.freeTimes;
                            if (message.category != null && message.hasOwnProperty("category"))
                                object.category = message.category;
                            if (message.specialId != null && message.hasOwnProperty("specialId"))
                                object.specialId = message.specialId;
                            if (message.terminal != null && message.hasOwnProperty("terminal"))
                                object.terminal = message.terminal;
                            if (message.authorId != null && message.hasOwnProperty("authorId"))
                                object.authorId = message.authorId;
                            if (message.authorName != null && message.hasOwnProperty("authorName"))
                                object.authorName = message.authorName;
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (typeof message.createDate === "number")
                                    object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                                else
                                    object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                if (typeof message.updateDate === "number")
                                    object.updateDate = options.longs === String ? String(message.updateDate) : message.updateDate;
                                else
                                    object.updateDate = options.longs === String ? $util.Long.prototype.toString.call(message.updateDate) : options.longs === Number ? new $util.LongBits(message.updateDate.low >>> 0, message.updateDate.high >>> 0).toNumber() : message.updateDate;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.platform != null && message.hasOwnProperty("platform"))
                                object.platform = message.platform;
                            if (message.open != null && message.hasOwnProperty("open"))
                                object.open = message.open;
                            if (message.deleted != null && message.hasOwnProperty("deleted"))
                                object.deleted = message.deleted;
                            if (message.free != null && message.hasOwnProperty("free"))
                                object.free = message.free;
                            if (message.price != null && message.hasOwnProperty("price"))
                                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
                            if (message.content != null && message.hasOwnProperty("content"))
                                object.content = message.content;
                            if (message.number != null && message.hasOwnProperty("number"))
                                if (typeof message.number === "number")
                                    object.number = options.longs === String ? String(message.number) : message.number;
                                else
                                    object.number = options.longs === String ? $util.Long.prototype.toString.call(message.number) : options.longs === Number ? new $util.LongBits(message.number.low >>> 0, message.number.high >>> 0).toNumber() : message.number;
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (typeof message.focusNumber === "number")
                                    object.focusNumber = options.longs === String ? String(message.focusNumber) : message.focusNumber;
                                else
                                    object.focusNumber = options.longs === String ? $util.Long.prototype.toString.call(message.focusNumber) : options.longs === Number ? new $util.LongBits(message.focusNumber.low >>> 0, message.focusNumber.high >>> 0).toNumber() : message.focusNumber;
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (typeof message.loveNumber === "number")
                                    object.loveNumber = options.longs === String ? String(message.loveNumber) : message.loveNumber;
                                else
                                    object.loveNumber = options.longs === String ? $util.Long.prototype.toString.call(message.loveNumber) : options.longs === Number ? new $util.LongBits(message.loveNumber.low >>> 0, message.loveNumber.high >>> 0).toNumber() : message.loveNumber;
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                if (typeof message.despiseNumber === "number")
                                    object.despiseNumber = options.longs === String ? String(message.despiseNumber) : message.despiseNumber;
                                else
                                    object.despiseNumber = options.longs === String ? $util.Long.prototype.toString.call(message.despiseNumber) : options.longs === Number ? new $util.LongBits(message.despiseNumber.low >>> 0, message.despiseNumber.high >>> 0).toNumber() : message.despiseNumber;
                            if (message.deleteDate != null && message.hasOwnProperty("deleteDate"))
                                if (typeof message.deleteDate === "number")
                                    object.deleteDate = options.longs === String ? String(message.deleteDate) : message.deleteDate;
                                else
                                    object.deleteDate = options.longs === String ? $util.Long.prototype.toString.call(message.deleteDate) : options.longs === Number ? new $util.LongBits(message.deleteDate.low >>> 0, message.deleteDate.high >>> 0).toNumber() : message.deleteDate;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.tokenId != null && message.hasOwnProperty("tokenId"))
                                object.tokenId = message.tokenId;
                            if (message.fileList && message.fileList.length) {
                                object.fileList = [];
                                for (let j = 0; j < message.fileList.length; ++j)
                                    object.fileList[j] = $root.com.xueershangda.tianxun.article.model.Images.toObject(message.fileList[j], options);
                            }
                            if (message.ids && message.ids.length) {
                                object.ids = [];
                                for (let j = 0; j < message.ids.length; ++j)
                                    object.ids[j] = message.ids[j];
                            }
                            if (message.coverImage != null && message.hasOwnProperty("coverImage"))
                                object.coverImage = message.coverImage;
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                object.backup = message.backup;
                            return object;
                        };

                        /**
                         * Converts this Article to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.article.model.Article
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Article.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Article;
                    })();

                    model.ArticleReply = (function() {

                        /**
                         * Properties of an ArticleReply.
                         * @memberof com.xueershangda.tianxun.article.model
                         * @interface IArticleReply
                         * @property {number|null} [code] ArticleReply code
                         * @property {string|null} [message] ArticleReply message
                         * @property {Array.<com.xueershangda.tianxun.article.model.IArticle>|null} [data] ArticleReply data
                         * @property {string|null} [account] ArticleReply account
                         * @property {number|null} [price] ArticleReply price
                         * @property {string|null} [title] ArticleReply title
                         * @property {string|null} [type] ArticleReply type
                         * @property {string|null} [targetId] ArticleReply targetId
                         */

                        /**
                         * Constructs a new ArticleReply.
                         * @memberof com.xueershangda.tianxun.article.model
                         * @classdesc Represents an ArticleReply.
                         * @implements IArticleReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.article.model.IArticleReply=} [properties] Properties to set
                         */
                        function ArticleReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ArticleReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @instance
                         */
                        ArticleReply.prototype.code = 0;

                        /**
                         * ArticleReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @instance
                         */
                        ArticleReply.prototype.message = "";

                        /**
                         * ArticleReply data.
                         * @member {Array.<com.xueershangda.tianxun.article.model.IArticle>} data
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @instance
                         */
                        ArticleReply.prototype.data = $util.emptyArray;

                        /**
                         * ArticleReply account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @instance
                         */
                        ArticleReply.prototype.account = "";

                        /**
                         * ArticleReply price.
                         * @member {number} price
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @instance
                         */
                        ArticleReply.prototype.price = 0;

                        /**
                         * ArticleReply title.
                         * @member {string} title
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @instance
                         */
                        ArticleReply.prototype.title = "";

                        /**
                         * ArticleReply type.
                         * @member {string} type
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @instance
                         */
                        ArticleReply.prototype.type = "";

                        /**
                         * ArticleReply targetId.
                         * @member {string} targetId
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @instance
                         */
                        ArticleReply.prototype.targetId = "";

                        /**
                         * Creates a new ArticleReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.IArticleReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.article.model.ArticleReply} ArticleReply instance
                         */
                        ArticleReply.create = function create(properties) {
                            return new ArticleReply(properties);
                        };

                        /**
                         * Encodes the specified ArticleReply message. Does not implicitly {@link com.xueershangda.tianxun.article.model.ArticleReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.IArticleReply} message ArticleReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ArticleReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.article.model.Article.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.account);
                            if (message.price != null && message.hasOwnProperty("price"))
                                writer.uint32(/* id 5, wireType 1 =*/41).double(message.price);
                            if (message.title != null && message.hasOwnProperty("title"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.title);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.type);
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.targetId);
                            return writer;
                        };

                        /**
                         * Encodes the specified ArticleReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.article.model.ArticleReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.IArticleReply} message ArticleReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ArticleReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an ArticleReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.article.model.ArticleReply} ArticleReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ArticleReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.article.model.ArticleReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.article.model.Article.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    message.account = reader.string();
                                    break;
                                case 5:
                                    message.price = reader.double();
                                    break;
                                case 6:
                                    message.title = reader.string();
                                    break;
                                case 7:
                                    message.type = reader.string();
                                    break;
                                case 8:
                                    message.targetId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an ArticleReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.article.model.ArticleReply} ArticleReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ArticleReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an ArticleReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ArticleReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.article.model.Article.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            if (message.price != null && message.hasOwnProperty("price"))
                                if (typeof message.price !== "number")
                                    return "price: number expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                if (!$util.isString(message.targetId))
                                    return "targetId: string expected";
                            return null;
                        };

                        /**
                         * Creates an ArticleReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.article.model.ArticleReply} ArticleReply
                         */
                        ArticleReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.article.model.ArticleReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.article.model.ArticleReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.article.model.ArticleReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.article.model.ArticleReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.article.model.Article.fromObject(object.data[i]);
                                }
                            }
                            if (object.account != null)
                                message.account = String(object.account);
                            if (object.price != null)
                                message.price = Number(object.price);
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.targetId != null)
                                message.targetId = String(object.targetId);
                            return message;
                        };

                        /**
                         * Creates a plain object from an ArticleReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @static
                         * @param {com.xueershangda.tianxun.article.model.ArticleReply} message ArticleReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ArticleReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                                object.account = "";
                                object.price = 0;
                                object.title = "";
                                object.type = "";
                                object.targetId = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.article.model.Article.toObject(message.data[j], options);
                            }
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            if (message.price != null && message.hasOwnProperty("price"))
                                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                object.targetId = message.targetId;
                            return object;
                        };

                        /**
                         * Converts this ArticleReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.article.model.ArticleReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ArticleReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return ArticleReply;
                    })();

                    return model;
                })();

                return article;
            })();

            tianxun.question = (function() {

                /**
                 * Namespace question.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const question = {};

                question.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.question
                     * @namespace
                     */
                    const model = {};

                    model.Question = (function() {

                        /**
                         * Properties of a Question.
                         * @memberof com.xueershangda.tianxun.question.model
                         * @interface IQuestion
                         * @property {string|null} [id] Question id
                         * @property {string|null} [title] Question title
                         * @property {string|null} [summary] Question summary
                         * @property {number|null} [price] Question price
                         * @property {string|null} [asker] Question asker
                         * @property {string|null} [askerName] Question askerName
                         * @property {number|Long|null} [askDate] Question askDate
                         * @property {number|Long|null} [answerDate] Question answerDate
                         * @property {number|Long|null} [closeDate] Question closeDate
                         * @property {boolean|null} [solved] Question solved
                         * @property {boolean|null} [open] Question open
                         * @property {number|null} [platform] Question platform
                         * @property {string|null} [category] Question category
                         * @property {number|null} [categoryCode] Question categoryCode
                         * @property {string|null} [satisfiedAnswerId] Question satisfiedAnswerId
                         * @property {string|null} [satisfiedUserId] Question satisfiedUserId
                         * @property {string|null} [satisfiedUserName] Question satisfiedUserName
                         * @property {number|null} [state] Question state
                         * @property {boolean|null} [deleted] Question deleted
                         * @property {string|null} [content] Question content
                         * @property {number|Long|null} [number] Question number
                         * @property {number|null} [answerNumber] Question answerNumber
                         * @property {number|Long|null} [focusNumber] Question focusNumber
                         * @property {number|Long|null} [loveNumber] Question loveNumber
                         * @property {number|Long|null} [despiseNumber] Question despiseNumber
                         * @property {number|null} [fee] Question fee
                         * @property {number|null} [serviceType] Question serviceType
                         * @property {number|Long|null} [deleteDate] Question deleteDate
                         * @property {number|null} [terminal] Question terminal
                         * @property {number|null} [page] Question page
                         * @property {number|null} [pageSize] Question pageSize
                         * @property {string|null} [orderBy] Question orderBy
                         * @property {string|null} [tokenId] Question tokenId
                         * @property {Array.<com.xueershangda.tianxun.article.model.IImages>|null} [fileList] Question fileList
                         * @property {com.xueershangda.tianxun.answer.model.IAnswer|null} [answer] Question answer
                         * @property {string|null} [userId] Question userId
                         * @property {string|null} [filePath] Question filePath
                         * @property {string|null} [type] Question type
                         * @property {Array.<string>|null} [ids] Question ids
                         * @property {string|null} [account] Question account
                         */

                        /**
                         * Constructs a new Question.
                         * @memberof com.xueershangda.tianxun.question.model
                         * @classdesc Represents a Question.
                         * @implements IQuestion
                         * @constructor
                         * @param {com.xueershangda.tianxun.question.model.IQuestion=} [properties] Properties to set
                         */
                        function Question(properties) {
                            this.fileList = [];
                            this.ids = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Question id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.id = "";

                        /**
                         * Question title.
                         * @member {string} title
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.title = "";

                        /**
                         * Question summary.
                         * @member {string} summary
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.summary = "";

                        /**
                         * Question price.
                         * @member {number} price
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.price = 0;

                        /**
                         * Question asker.
                         * @member {string} asker
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.asker = "";

                        /**
                         * Question askerName.
                         * @member {string} askerName
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.askerName = "";

                        /**
                         * Question askDate.
                         * @member {number|Long} askDate
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.askDate = 0;

                        /**
                         * Question answerDate.
                         * @member {number|Long} answerDate
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.answerDate = 0;

                        /**
                         * Question closeDate.
                         * @member {number|Long} closeDate
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.closeDate = 0;

                        /**
                         * Question solved.
                         * @member {boolean} solved
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.solved = false;

                        /**
                         * Question open.
                         * @member {boolean} open
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.open = false;

                        /**
                         * Question platform.
                         * @member {number} platform
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.platform = 0;

                        /**
                         * Question category.
                         * @member {string} category
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.category = "";

                        /**
                         * Question categoryCode.
                         * @member {number} categoryCode
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.categoryCode = 0;

                        /**
                         * Question satisfiedAnswerId.
                         * @member {string} satisfiedAnswerId
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.satisfiedAnswerId = "";

                        /**
                         * Question satisfiedUserId.
                         * @member {string} satisfiedUserId
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.satisfiedUserId = "";

                        /**
                         * Question satisfiedUserName.
                         * @member {string} satisfiedUserName
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.satisfiedUserName = "";

                        /**
                         * Question state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.state = 0;

                        /**
                         * Question deleted.
                         * @member {boolean} deleted
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.deleted = false;

                        /**
                         * Question content.
                         * @member {string} content
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.content = "";

                        /**
                         * Question number.
                         * @member {number|Long} number
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.number = 0;

                        /**
                         * Question answerNumber.
                         * @member {number} answerNumber
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.answerNumber = 0;

                        /**
                         * Question focusNumber.
                         * @member {number|Long} focusNumber
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.focusNumber = 0;

                        /**
                         * Question loveNumber.
                         * @member {number|Long} loveNumber
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.loveNumber = 0;

                        /**
                         * Question despiseNumber.
                         * @member {number|Long} despiseNumber
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.despiseNumber = 0;

                        /**
                         * Question fee.
                         * @member {number} fee
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.fee = 0;

                        /**
                         * Question serviceType.
                         * @member {number} serviceType
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.serviceType = 0;

                        /**
                         * Question deleteDate.
                         * @member {number|Long} deleteDate
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.deleteDate = 0;

                        /**
                         * Question terminal.
                         * @member {number} terminal
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.terminal = 0;

                        /**
                         * Question page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.page = 0;

                        /**
                         * Question pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.pageSize = 0;

                        /**
                         * Question orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.orderBy = "";

                        /**
                         * Question tokenId.
                         * @member {string} tokenId
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.tokenId = "";

                        /**
                         * Question fileList.
                         * @member {Array.<com.xueershangda.tianxun.article.model.IImages>} fileList
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.fileList = $util.emptyArray;

                        /**
                         * Question answer.
                         * @member {com.xueershangda.tianxun.answer.model.IAnswer|null|undefined} answer
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.answer = null;

                        /**
                         * Question userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.userId = "";

                        /**
                         * Question filePath.
                         * @member {string} filePath
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.filePath = "";

                        /**
                         * Question type.
                         * @member {string} type
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.type = "";

                        /**
                         * Question ids.
                         * @member {Array.<string>} ids
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.ids = $util.emptyArray;

                        /**
                         * Question account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         */
                        Question.prototype.account = "";

                        /**
                         * Creates a new Question instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.IQuestion=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.question.model.Question} Question instance
                         */
                        Question.create = function create(properties) {
                            return new Question(properties);
                        };

                        /**
                         * Encodes the specified Question message. Does not implicitly {@link com.xueershangda.tianxun.question.model.Question.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.IQuestion} message Question message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Question.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.title != null && message.hasOwnProperty("title"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.summary);
                            if (message.price != null && message.hasOwnProperty("price"))
                                writer.uint32(/* id 4, wireType 1 =*/33).double(message.price);
                            if (message.asker != null && message.hasOwnProperty("asker"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.asker);
                            if (message.askerName != null && message.hasOwnProperty("askerName"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.askerName);
                            if (message.askDate != null && message.hasOwnProperty("askDate"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.askDate);
                            if (message.answerDate != null && message.hasOwnProperty("answerDate"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.answerDate);
                            if (message.closeDate != null && message.hasOwnProperty("closeDate"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int64(message.closeDate);
                            if (message.solved != null && message.hasOwnProperty("solved"))
                                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.solved);
                            if (message.open != null && message.hasOwnProperty("open"))
                                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.open);
                            if (message.platform != null && message.hasOwnProperty("platform"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.platform);
                            if (message.category != null && message.hasOwnProperty("category"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.category);
                            if (message.categoryCode != null && message.hasOwnProperty("categoryCode"))
                                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.categoryCode);
                            if (message.satisfiedAnswerId != null && message.hasOwnProperty("satisfiedAnswerId"))
                                writer.uint32(/* id 15, wireType 2 =*/122).string(message.satisfiedAnswerId);
                            if (message.satisfiedUserId != null && message.hasOwnProperty("satisfiedUserId"))
                                writer.uint32(/* id 16, wireType 2 =*/130).string(message.satisfiedUserId);
                            if (message.satisfiedUserName != null && message.hasOwnProperty("satisfiedUserName"))
                                writer.uint32(/* id 17, wireType 2 =*/138).string(message.satisfiedUserName);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 18, wireType 0 =*/144).int32(message.state);
                            if (message.deleted != null && message.hasOwnProperty("deleted"))
                                writer.uint32(/* id 19, wireType 0 =*/152).bool(message.deleted);
                            if (message.content != null && message.hasOwnProperty("content"))
                                writer.uint32(/* id 20, wireType 2 =*/162).string(message.content);
                            if (message.number != null && message.hasOwnProperty("number"))
                                writer.uint32(/* id 21, wireType 0 =*/168).int64(message.number);
                            if (message.answerNumber != null && message.hasOwnProperty("answerNumber"))
                                writer.uint32(/* id 22, wireType 0 =*/176).int32(message.answerNumber);
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                writer.uint32(/* id 23, wireType 0 =*/184).int64(message.focusNumber);
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                writer.uint32(/* id 24, wireType 0 =*/192).int64(message.loveNumber);
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                writer.uint32(/* id 25, wireType 0 =*/200).int64(message.despiseNumber);
                            if (message.fee != null && message.hasOwnProperty("fee"))
                                writer.uint32(/* id 26, wireType 0 =*/208).int32(message.fee);
                            if (message.serviceType != null && message.hasOwnProperty("serviceType"))
                                writer.uint32(/* id 27, wireType 0 =*/216).int32(message.serviceType);
                            if (message.deleteDate != null && message.hasOwnProperty("deleteDate"))
                                writer.uint32(/* id 28, wireType 0 =*/224).int64(message.deleteDate);
                            if (message.terminal != null && message.hasOwnProperty("terminal"))
                                writer.uint32(/* id 29, wireType 0 =*/232).int32(message.terminal);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 30, wireType 0 =*/240).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 31, wireType 0 =*/248).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 32, wireType 2 =*/258).string(message.orderBy);
                            if (message.tokenId != null && message.hasOwnProperty("tokenId"))
                                writer.uint32(/* id 33, wireType 2 =*/266).string(message.tokenId);
                            if (message.fileList != null && message.fileList.length)
                                for (let i = 0; i < message.fileList.length; ++i)
                                    $root.com.xueershangda.tianxun.article.model.Images.encode(message.fileList[i], writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
                            if (message.answer != null && message.hasOwnProperty("answer"))
                                $root.com.xueershangda.tianxun.answer.model.Answer.encode(message.answer, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 36, wireType 2 =*/290).string(message.userId);
                            if (message.filePath != null && message.hasOwnProperty("filePath"))
                                writer.uint32(/* id 37, wireType 2 =*/298).string(message.filePath);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 38, wireType 2 =*/306).string(message.type);
                            if (message.ids != null && message.ids.length)
                                for (let i = 0; i < message.ids.length; ++i)
                                    writer.uint32(/* id 39, wireType 2 =*/314).string(message.ids[i]);
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 40, wireType 2 =*/322).string(message.account);
                            return writer;
                        };

                        /**
                         * Encodes the specified Question message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.question.model.Question.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.IQuestion} message Question message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Question.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Question message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.question.model.Question} Question
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Question.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.question.model.Question();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.title = reader.string();
                                    break;
                                case 3:
                                    message.summary = reader.string();
                                    break;
                                case 4:
                                    message.price = reader.double();
                                    break;
                                case 5:
                                    message.asker = reader.string();
                                    break;
                                case 6:
                                    message.askerName = reader.string();
                                    break;
                                case 7:
                                    message.askDate = reader.int64();
                                    break;
                                case 8:
                                    message.answerDate = reader.int64();
                                    break;
                                case 9:
                                    message.closeDate = reader.int64();
                                    break;
                                case 10:
                                    message.solved = reader.bool();
                                    break;
                                case 11:
                                    message.open = reader.bool();
                                    break;
                                case 12:
                                    message.platform = reader.int32();
                                    break;
                                case 13:
                                    message.category = reader.string();
                                    break;
                                case 14:
                                    message.categoryCode = reader.int32();
                                    break;
                                case 15:
                                    message.satisfiedAnswerId = reader.string();
                                    break;
                                case 16:
                                    message.satisfiedUserId = reader.string();
                                    break;
                                case 17:
                                    message.satisfiedUserName = reader.string();
                                    break;
                                case 18:
                                    message.state = reader.int32();
                                    break;
                                case 19:
                                    message.deleted = reader.bool();
                                    break;
                                case 20:
                                    message.content = reader.string();
                                    break;
                                case 21:
                                    message.number = reader.int64();
                                    break;
                                case 22:
                                    message.answerNumber = reader.int32();
                                    break;
                                case 23:
                                    message.focusNumber = reader.int64();
                                    break;
                                case 24:
                                    message.loveNumber = reader.int64();
                                    break;
                                case 25:
                                    message.despiseNumber = reader.int64();
                                    break;
                                case 26:
                                    message.fee = reader.int32();
                                    break;
                                case 27:
                                    message.serviceType = reader.int32();
                                    break;
                                case 28:
                                    message.deleteDate = reader.int64();
                                    break;
                                case 29:
                                    message.terminal = reader.int32();
                                    break;
                                case 30:
                                    message.page = reader.int32();
                                    break;
                                case 31:
                                    message.pageSize = reader.int32();
                                    break;
                                case 32:
                                    message.orderBy = reader.string();
                                    break;
                                case 33:
                                    message.tokenId = reader.string();
                                    break;
                                case 34:
                                    if (!(message.fileList && message.fileList.length))
                                        message.fileList = [];
                                    message.fileList.push($root.com.xueershangda.tianxun.article.model.Images.decode(reader, reader.uint32()));
                                    break;
                                case 35:
                                    message.answer = $root.com.xueershangda.tianxun.answer.model.Answer.decode(reader, reader.uint32());
                                    break;
                                case 36:
                                    message.userId = reader.string();
                                    break;
                                case 37:
                                    message.filePath = reader.string();
                                    break;
                                case 38:
                                    message.type = reader.string();
                                    break;
                                case 39:
                                    if (!(message.ids && message.ids.length))
                                        message.ids = [];
                                    message.ids.push(reader.string());
                                    break;
                                case 40:
                                    message.account = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Question message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.question.model.Question} Question
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Question.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Question message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Question.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                if (!$util.isString(message.summary))
                                    return "summary: string expected";
                            if (message.price != null && message.hasOwnProperty("price"))
                                if (typeof message.price !== "number")
                                    return "price: number expected";
                            if (message.asker != null && message.hasOwnProperty("asker"))
                                if (!$util.isString(message.asker))
                                    return "asker: string expected";
                            if (message.askerName != null && message.hasOwnProperty("askerName"))
                                if (!$util.isString(message.askerName))
                                    return "askerName: string expected";
                            if (message.askDate != null && message.hasOwnProperty("askDate"))
                                if (!$util.isInteger(message.askDate) && !(message.askDate && $util.isInteger(message.askDate.low) && $util.isInteger(message.askDate.high)))
                                    return "askDate: integer|Long expected";
                            if (message.answerDate != null && message.hasOwnProperty("answerDate"))
                                if (!$util.isInteger(message.answerDate) && !(message.answerDate && $util.isInteger(message.answerDate.low) && $util.isInteger(message.answerDate.high)))
                                    return "answerDate: integer|Long expected";
                            if (message.closeDate != null && message.hasOwnProperty("closeDate"))
                                if (!$util.isInteger(message.closeDate) && !(message.closeDate && $util.isInteger(message.closeDate.low) && $util.isInteger(message.closeDate.high)))
                                    return "closeDate: integer|Long expected";
                            if (message.solved != null && message.hasOwnProperty("solved"))
                                if (typeof message.solved !== "boolean")
                                    return "solved: boolean expected";
                            if (message.open != null && message.hasOwnProperty("open"))
                                if (typeof message.open !== "boolean")
                                    return "open: boolean expected";
                            if (message.platform != null && message.hasOwnProperty("platform"))
                                if (!$util.isInteger(message.platform))
                                    return "platform: integer expected";
                            if (message.category != null && message.hasOwnProperty("category"))
                                if (!$util.isString(message.category))
                                    return "category: string expected";
                            if (message.categoryCode != null && message.hasOwnProperty("categoryCode"))
                                if (!$util.isInteger(message.categoryCode))
                                    return "categoryCode: integer expected";
                            if (message.satisfiedAnswerId != null && message.hasOwnProperty("satisfiedAnswerId"))
                                if (!$util.isString(message.satisfiedAnswerId))
                                    return "satisfiedAnswerId: string expected";
                            if (message.satisfiedUserId != null && message.hasOwnProperty("satisfiedUserId"))
                                if (!$util.isString(message.satisfiedUserId))
                                    return "satisfiedUserId: string expected";
                            if (message.satisfiedUserName != null && message.hasOwnProperty("satisfiedUserName"))
                                if (!$util.isString(message.satisfiedUserName))
                                    return "satisfiedUserName: string expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.deleted != null && message.hasOwnProperty("deleted"))
                                if (typeof message.deleted !== "boolean")
                                    return "deleted: boolean expected";
                            if (message.content != null && message.hasOwnProperty("content"))
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            if (message.number != null && message.hasOwnProperty("number"))
                                if (!$util.isInteger(message.number) && !(message.number && $util.isInteger(message.number.low) && $util.isInteger(message.number.high)))
                                    return "number: integer|Long expected";
                            if (message.answerNumber != null && message.hasOwnProperty("answerNumber"))
                                if (!$util.isInteger(message.answerNumber))
                                    return "answerNumber: integer expected";
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (!$util.isInteger(message.focusNumber) && !(message.focusNumber && $util.isInteger(message.focusNumber.low) && $util.isInteger(message.focusNumber.high)))
                                    return "focusNumber: integer|Long expected";
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (!$util.isInteger(message.loveNumber) && !(message.loveNumber && $util.isInteger(message.loveNumber.low) && $util.isInteger(message.loveNumber.high)))
                                    return "loveNumber: integer|Long expected";
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                if (!$util.isInteger(message.despiseNumber) && !(message.despiseNumber && $util.isInteger(message.despiseNumber.low) && $util.isInteger(message.despiseNumber.high)))
                                    return "despiseNumber: integer|Long expected";
                            if (message.fee != null && message.hasOwnProperty("fee"))
                                if (!$util.isInteger(message.fee))
                                    return "fee: integer expected";
                            if (message.serviceType != null && message.hasOwnProperty("serviceType"))
                                if (!$util.isInteger(message.serviceType))
                                    return "serviceType: integer expected";
                            if (message.deleteDate != null && message.hasOwnProperty("deleteDate"))
                                if (!$util.isInteger(message.deleteDate) && !(message.deleteDate && $util.isInteger(message.deleteDate.low) && $util.isInteger(message.deleteDate.high)))
                                    return "deleteDate: integer|Long expected";
                            if (message.terminal != null && message.hasOwnProperty("terminal"))
                                if (!$util.isInteger(message.terminal))
                                    return "terminal: integer expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.tokenId != null && message.hasOwnProperty("tokenId"))
                                if (!$util.isString(message.tokenId))
                                    return "tokenId: string expected";
                            if (message.fileList != null && message.hasOwnProperty("fileList")) {
                                if (!Array.isArray(message.fileList))
                                    return "fileList: array expected";
                                for (let i = 0; i < message.fileList.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.article.model.Images.verify(message.fileList[i]);
                                    if (error)
                                        return "fileList." + error;
                                }
                            }
                            if (message.answer != null && message.hasOwnProperty("answer")) {
                                let error = $root.com.xueershangda.tianxun.answer.model.Answer.verify(message.answer);
                                if (error)
                                    return "answer." + error;
                            }
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.filePath != null && message.hasOwnProperty("filePath"))
                                if (!$util.isString(message.filePath))
                                    return "filePath: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.ids != null && message.hasOwnProperty("ids")) {
                                if (!Array.isArray(message.ids))
                                    return "ids: array expected";
                                for (let i = 0; i < message.ids.length; ++i)
                                    if (!$util.isString(message.ids[i]))
                                        return "ids: string[] expected";
                            }
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            return null;
                        };

                        /**
                         * Creates a Question message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.question.model.Question} Question
                         */
                        Question.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.question.model.Question)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.question.model.Question();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.summary != null)
                                message.summary = String(object.summary);
                            if (object.price != null)
                                message.price = Number(object.price);
                            if (object.asker != null)
                                message.asker = String(object.asker);
                            if (object.askerName != null)
                                message.askerName = String(object.askerName);
                            if (object.askDate != null)
                                if ($util.Long)
                                    (message.askDate = $util.Long.fromValue(object.askDate)).unsigned = false;
                                else if (typeof object.askDate === "string")
                                    message.askDate = parseInt(object.askDate, 10);
                                else if (typeof object.askDate === "number")
                                    message.askDate = object.askDate;
                                else if (typeof object.askDate === "object")
                                    message.askDate = new $util.LongBits(object.askDate.low >>> 0, object.askDate.high >>> 0).toNumber();
                            if (object.answerDate != null)
                                if ($util.Long)
                                    (message.answerDate = $util.Long.fromValue(object.answerDate)).unsigned = false;
                                else if (typeof object.answerDate === "string")
                                    message.answerDate = parseInt(object.answerDate, 10);
                                else if (typeof object.answerDate === "number")
                                    message.answerDate = object.answerDate;
                                else if (typeof object.answerDate === "object")
                                    message.answerDate = new $util.LongBits(object.answerDate.low >>> 0, object.answerDate.high >>> 0).toNumber();
                            if (object.closeDate != null)
                                if ($util.Long)
                                    (message.closeDate = $util.Long.fromValue(object.closeDate)).unsigned = false;
                                else if (typeof object.closeDate === "string")
                                    message.closeDate = parseInt(object.closeDate, 10);
                                else if (typeof object.closeDate === "number")
                                    message.closeDate = object.closeDate;
                                else if (typeof object.closeDate === "object")
                                    message.closeDate = new $util.LongBits(object.closeDate.low >>> 0, object.closeDate.high >>> 0).toNumber();
                            if (object.solved != null)
                                message.solved = Boolean(object.solved);
                            if (object.open != null)
                                message.open = Boolean(object.open);
                            if (object.platform != null)
                                message.platform = object.platform | 0;
                            if (object.category != null)
                                message.category = String(object.category);
                            if (object.categoryCode != null)
                                message.categoryCode = object.categoryCode | 0;
                            if (object.satisfiedAnswerId != null)
                                message.satisfiedAnswerId = String(object.satisfiedAnswerId);
                            if (object.satisfiedUserId != null)
                                message.satisfiedUserId = String(object.satisfiedUserId);
                            if (object.satisfiedUserName != null)
                                message.satisfiedUserName = String(object.satisfiedUserName);
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.deleted != null)
                                message.deleted = Boolean(object.deleted);
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.number != null)
                                if ($util.Long)
                                    (message.number = $util.Long.fromValue(object.number)).unsigned = false;
                                else if (typeof object.number === "string")
                                    message.number = parseInt(object.number, 10);
                                else if (typeof object.number === "number")
                                    message.number = object.number;
                                else if (typeof object.number === "object")
                                    message.number = new $util.LongBits(object.number.low >>> 0, object.number.high >>> 0).toNumber();
                            if (object.answerNumber != null)
                                message.answerNumber = object.answerNumber | 0;
                            if (object.focusNumber != null)
                                if ($util.Long)
                                    (message.focusNumber = $util.Long.fromValue(object.focusNumber)).unsigned = false;
                                else if (typeof object.focusNumber === "string")
                                    message.focusNumber = parseInt(object.focusNumber, 10);
                                else if (typeof object.focusNumber === "number")
                                    message.focusNumber = object.focusNumber;
                                else if (typeof object.focusNumber === "object")
                                    message.focusNumber = new $util.LongBits(object.focusNumber.low >>> 0, object.focusNumber.high >>> 0).toNumber();
                            if (object.loveNumber != null)
                                if ($util.Long)
                                    (message.loveNumber = $util.Long.fromValue(object.loveNumber)).unsigned = false;
                                else if (typeof object.loveNumber === "string")
                                    message.loveNumber = parseInt(object.loveNumber, 10);
                                else if (typeof object.loveNumber === "number")
                                    message.loveNumber = object.loveNumber;
                                else if (typeof object.loveNumber === "object")
                                    message.loveNumber = new $util.LongBits(object.loveNumber.low >>> 0, object.loveNumber.high >>> 0).toNumber();
                            if (object.despiseNumber != null)
                                if ($util.Long)
                                    (message.despiseNumber = $util.Long.fromValue(object.despiseNumber)).unsigned = false;
                                else if (typeof object.despiseNumber === "string")
                                    message.despiseNumber = parseInt(object.despiseNumber, 10);
                                else if (typeof object.despiseNumber === "number")
                                    message.despiseNumber = object.despiseNumber;
                                else if (typeof object.despiseNumber === "object")
                                    message.despiseNumber = new $util.LongBits(object.despiseNumber.low >>> 0, object.despiseNumber.high >>> 0).toNumber();
                            if (object.fee != null)
                                message.fee = object.fee | 0;
                            if (object.serviceType != null)
                                message.serviceType = object.serviceType | 0;
                            if (object.deleteDate != null)
                                if ($util.Long)
                                    (message.deleteDate = $util.Long.fromValue(object.deleteDate)).unsigned = false;
                                else if (typeof object.deleteDate === "string")
                                    message.deleteDate = parseInt(object.deleteDate, 10);
                                else if (typeof object.deleteDate === "number")
                                    message.deleteDate = object.deleteDate;
                                else if (typeof object.deleteDate === "object")
                                    message.deleteDate = new $util.LongBits(object.deleteDate.low >>> 0, object.deleteDate.high >>> 0).toNumber();
                            if (object.terminal != null)
                                message.terminal = object.terminal | 0;
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.tokenId != null)
                                message.tokenId = String(object.tokenId);
                            if (object.fileList) {
                                if (!Array.isArray(object.fileList))
                                    throw TypeError(".com.xueershangda.tianxun.question.model.Question.fileList: array expected");
                                message.fileList = [];
                                for (let i = 0; i < object.fileList.length; ++i) {
                                    if (typeof object.fileList[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.question.model.Question.fileList: object expected");
                                    message.fileList[i] = $root.com.xueershangda.tianxun.article.model.Images.fromObject(object.fileList[i]);
                                }
                            }
                            if (object.answer != null) {
                                if (typeof object.answer !== "object")
                                    throw TypeError(".com.xueershangda.tianxun.question.model.Question.answer: object expected");
                                message.answer = $root.com.xueershangda.tianxun.answer.model.Answer.fromObject(object.answer);
                            }
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.filePath != null)
                                message.filePath = String(object.filePath);
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.ids) {
                                if (!Array.isArray(object.ids))
                                    throw TypeError(".com.xueershangda.tianxun.question.model.Question.ids: array expected");
                                message.ids = [];
                                for (let i = 0; i < object.ids.length; ++i)
                                    message.ids[i] = String(object.ids[i]);
                            }
                            if (object.account != null)
                                message.account = String(object.account);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Question message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.Question} message Question
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Question.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.fileList = [];
                                object.ids = [];
                            }
                            if (options.defaults) {
                                object.id = "";
                                object.title = "";
                                object.summary = "";
                                object.price = 0;
                                object.asker = "";
                                object.askerName = "";
                                object.askDate = 0;
                                object.answerDate = 0;
                                object.closeDate = 0;
                                object.solved = false;
                                object.open = false;
                                object.platform = 0;
                                object.category = "";
                                object.categoryCode = 0;
                                object.satisfiedAnswerId = "";
                                object.satisfiedUserId = "";
                                object.satisfiedUserName = "";
                                object.state = 0;
                                object.deleted = false;
                                object.content = "";
                                object.number = 0;
                                object.answerNumber = 0;
                                object.focusNumber = 0;
                                object.loveNumber = 0;
                                object.despiseNumber = 0;
                                object.fee = 0;
                                object.serviceType = 0;
                                object.deleteDate = 0;
                                object.terminal = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.tokenId = "";
                                object.answer = null;
                                object.userId = "";
                                object.filePath = "";
                                object.type = "";
                                object.account = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                object.summary = message.summary;
                            if (message.price != null && message.hasOwnProperty("price"))
                                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
                            if (message.asker != null && message.hasOwnProperty("asker"))
                                object.asker = message.asker;
                            if (message.askerName != null && message.hasOwnProperty("askerName"))
                                object.askerName = message.askerName;
                            if (message.askDate != null && message.hasOwnProperty("askDate"))
                                if (typeof message.askDate === "number")
                                    object.askDate = options.longs === String ? String(message.askDate) : message.askDate;
                                else
                                    object.askDate = options.longs === String ? $util.Long.prototype.toString.call(message.askDate) : options.longs === Number ? new $util.LongBits(message.askDate.low >>> 0, message.askDate.high >>> 0).toNumber() : message.askDate;
                            if (message.answerDate != null && message.hasOwnProperty("answerDate"))
                                if (typeof message.answerDate === "number")
                                    object.answerDate = options.longs === String ? String(message.answerDate) : message.answerDate;
                                else
                                    object.answerDate = options.longs === String ? $util.Long.prototype.toString.call(message.answerDate) : options.longs === Number ? new $util.LongBits(message.answerDate.low >>> 0, message.answerDate.high >>> 0).toNumber() : message.answerDate;
                            if (message.closeDate != null && message.hasOwnProperty("closeDate"))
                                if (typeof message.closeDate === "number")
                                    object.closeDate = options.longs === String ? String(message.closeDate) : message.closeDate;
                                else
                                    object.closeDate = options.longs === String ? $util.Long.prototype.toString.call(message.closeDate) : options.longs === Number ? new $util.LongBits(message.closeDate.low >>> 0, message.closeDate.high >>> 0).toNumber() : message.closeDate;
                            if (message.solved != null && message.hasOwnProperty("solved"))
                                object.solved = message.solved;
                            if (message.open != null && message.hasOwnProperty("open"))
                                object.open = message.open;
                            if (message.platform != null && message.hasOwnProperty("platform"))
                                object.platform = message.platform;
                            if (message.category != null && message.hasOwnProperty("category"))
                                object.category = message.category;
                            if (message.categoryCode != null && message.hasOwnProperty("categoryCode"))
                                object.categoryCode = message.categoryCode;
                            if (message.satisfiedAnswerId != null && message.hasOwnProperty("satisfiedAnswerId"))
                                object.satisfiedAnswerId = message.satisfiedAnswerId;
                            if (message.satisfiedUserId != null && message.hasOwnProperty("satisfiedUserId"))
                                object.satisfiedUserId = message.satisfiedUserId;
                            if (message.satisfiedUserName != null && message.hasOwnProperty("satisfiedUserName"))
                                object.satisfiedUserName = message.satisfiedUserName;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.deleted != null && message.hasOwnProperty("deleted"))
                                object.deleted = message.deleted;
                            if (message.content != null && message.hasOwnProperty("content"))
                                object.content = message.content;
                            if (message.number != null && message.hasOwnProperty("number"))
                                if (typeof message.number === "number")
                                    object.number = options.longs === String ? String(message.number) : message.number;
                                else
                                    object.number = options.longs === String ? $util.Long.prototype.toString.call(message.number) : options.longs === Number ? new $util.LongBits(message.number.low >>> 0, message.number.high >>> 0).toNumber() : message.number;
                            if (message.answerNumber != null && message.hasOwnProperty("answerNumber"))
                                object.answerNumber = message.answerNumber;
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (typeof message.focusNumber === "number")
                                    object.focusNumber = options.longs === String ? String(message.focusNumber) : message.focusNumber;
                                else
                                    object.focusNumber = options.longs === String ? $util.Long.prototype.toString.call(message.focusNumber) : options.longs === Number ? new $util.LongBits(message.focusNumber.low >>> 0, message.focusNumber.high >>> 0).toNumber() : message.focusNumber;
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (typeof message.loveNumber === "number")
                                    object.loveNumber = options.longs === String ? String(message.loveNumber) : message.loveNumber;
                                else
                                    object.loveNumber = options.longs === String ? $util.Long.prototype.toString.call(message.loveNumber) : options.longs === Number ? new $util.LongBits(message.loveNumber.low >>> 0, message.loveNumber.high >>> 0).toNumber() : message.loveNumber;
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                if (typeof message.despiseNumber === "number")
                                    object.despiseNumber = options.longs === String ? String(message.despiseNumber) : message.despiseNumber;
                                else
                                    object.despiseNumber = options.longs === String ? $util.Long.prototype.toString.call(message.despiseNumber) : options.longs === Number ? new $util.LongBits(message.despiseNumber.low >>> 0, message.despiseNumber.high >>> 0).toNumber() : message.despiseNumber;
                            if (message.fee != null && message.hasOwnProperty("fee"))
                                object.fee = message.fee;
                            if (message.serviceType != null && message.hasOwnProperty("serviceType"))
                                object.serviceType = message.serviceType;
                            if (message.deleteDate != null && message.hasOwnProperty("deleteDate"))
                                if (typeof message.deleteDate === "number")
                                    object.deleteDate = options.longs === String ? String(message.deleteDate) : message.deleteDate;
                                else
                                    object.deleteDate = options.longs === String ? $util.Long.prototype.toString.call(message.deleteDate) : options.longs === Number ? new $util.LongBits(message.deleteDate.low >>> 0, message.deleteDate.high >>> 0).toNumber() : message.deleteDate;
                            if (message.terminal != null && message.hasOwnProperty("terminal"))
                                object.terminal = message.terminal;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.tokenId != null && message.hasOwnProperty("tokenId"))
                                object.tokenId = message.tokenId;
                            if (message.fileList && message.fileList.length) {
                                object.fileList = [];
                                for (let j = 0; j < message.fileList.length; ++j)
                                    object.fileList[j] = $root.com.xueershangda.tianxun.article.model.Images.toObject(message.fileList[j], options);
                            }
                            if (message.answer != null && message.hasOwnProperty("answer"))
                                object.answer = $root.com.xueershangda.tianxun.answer.model.Answer.toObject(message.answer, options);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.filePath != null && message.hasOwnProperty("filePath"))
                                object.filePath = message.filePath;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.ids && message.ids.length) {
                                object.ids = [];
                                for (let j = 0; j < message.ids.length; ++j)
                                    object.ids[j] = message.ids[j];
                            }
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            return object;
                        };

                        /**
                         * Converts this Question to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.question.model.Question
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Question.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Question;
                    })();

                    model.QuestionReply = (function() {

                        /**
                         * Properties of a QuestionReply.
                         * @memberof com.xueershangda.tianxun.question.model
                         * @interface IQuestionReply
                         * @property {number|null} [code] QuestionReply code
                         * @property {string|null} [message] QuestionReply message
                         * @property {Array.<com.xueershangda.tianxun.question.model.IQuestion>|null} [data] QuestionReply data
                         * @property {string|null} [account] QuestionReply account
                         * @property {number|null} [price] QuestionReply price
                         * @property {string|null} [title] QuestionReply title
                         * @property {string|null} [type] QuestionReply type
                         * @property {string|null} [targetId] QuestionReply targetId
                         */

                        /**
                         * Constructs a new QuestionReply.
                         * @memberof com.xueershangda.tianxun.question.model
                         * @classdesc Represents a QuestionReply.
                         * @implements IQuestionReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.question.model.IQuestionReply=} [properties] Properties to set
                         */
                        function QuestionReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * QuestionReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @instance
                         */
                        QuestionReply.prototype.code = 0;

                        /**
                         * QuestionReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @instance
                         */
                        QuestionReply.prototype.message = "";

                        /**
                         * QuestionReply data.
                         * @member {Array.<com.xueershangda.tianxun.question.model.IQuestion>} data
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @instance
                         */
                        QuestionReply.prototype.data = $util.emptyArray;

                        /**
                         * QuestionReply account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @instance
                         */
                        QuestionReply.prototype.account = "";

                        /**
                         * QuestionReply price.
                         * @member {number} price
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @instance
                         */
                        QuestionReply.prototype.price = 0;

                        /**
                         * QuestionReply title.
                         * @member {string} title
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @instance
                         */
                        QuestionReply.prototype.title = "";

                        /**
                         * QuestionReply type.
                         * @member {string} type
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @instance
                         */
                        QuestionReply.prototype.type = "";

                        /**
                         * QuestionReply targetId.
                         * @member {string} targetId
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @instance
                         */
                        QuestionReply.prototype.targetId = "";

                        /**
                         * Creates a new QuestionReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.IQuestionReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.question.model.QuestionReply} QuestionReply instance
                         */
                        QuestionReply.create = function create(properties) {
                            return new QuestionReply(properties);
                        };

                        /**
                         * Encodes the specified QuestionReply message. Does not implicitly {@link com.xueershangda.tianxun.question.model.QuestionReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.IQuestionReply} message QuestionReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QuestionReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.question.model.Question.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.account);
                            if (message.price != null && message.hasOwnProperty("price"))
                                writer.uint32(/* id 5, wireType 1 =*/41).double(message.price);
                            if (message.title != null && message.hasOwnProperty("title"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.title);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.type);
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.targetId);
                            return writer;
                        };

                        /**
                         * Encodes the specified QuestionReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.question.model.QuestionReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.IQuestionReply} message QuestionReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QuestionReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a QuestionReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.question.model.QuestionReply} QuestionReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QuestionReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.question.model.QuestionReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.question.model.Question.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    message.account = reader.string();
                                    break;
                                case 5:
                                    message.price = reader.double();
                                    break;
                                case 6:
                                    message.title = reader.string();
                                    break;
                                case 7:
                                    message.type = reader.string();
                                    break;
                                case 8:
                                    message.targetId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a QuestionReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.question.model.QuestionReply} QuestionReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QuestionReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a QuestionReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QuestionReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.question.model.Question.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            if (message.price != null && message.hasOwnProperty("price"))
                                if (typeof message.price !== "number")
                                    return "price: number expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                if (!$util.isString(message.targetId))
                                    return "targetId: string expected";
                            return null;
                        };

                        /**
                         * Creates a QuestionReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.question.model.QuestionReply} QuestionReply
                         */
                        QuestionReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.question.model.QuestionReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.question.model.QuestionReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.question.model.QuestionReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.question.model.QuestionReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.question.model.Question.fromObject(object.data[i]);
                                }
                            }
                            if (object.account != null)
                                message.account = String(object.account);
                            if (object.price != null)
                                message.price = Number(object.price);
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.targetId != null)
                                message.targetId = String(object.targetId);
                            return message;
                        };

                        /**
                         * Creates a plain object from a QuestionReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.QuestionReply} message QuestionReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QuestionReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                                object.account = "";
                                object.price = 0;
                                object.title = "";
                                object.type = "";
                                object.targetId = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.question.model.Question.toObject(message.data[j], options);
                            }
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            if (message.price != null && message.hasOwnProperty("price"))
                                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                object.targetId = message.targetId;
                            return object;
                        };

                        /**
                         * Converts this QuestionReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.question.model.QuestionReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QuestionReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return QuestionReply;
                    })();

                    model.Category = (function() {

                        /**
                         * Properties of a Category.
                         * @memberof com.xueershangda.tianxun.question.model
                         * @interface ICategory
                         * @property {string|null} [id] Category id
                         * @property {string|null} [text] Category text
                         * @property {number|null} [status] Category status
                         * @property {number|null} [level] Category level
                         * @property {string|null} [parent] Category parent
                         * @property {string|null} [icon] Category icon
                         * @property {string|null} [orderBy] Category orderBy
                         * @property {number|null} [page] Category page
                         * @property {number|null} [pageSize] Category pageSize
                         */

                        /**
                         * Constructs a new Category.
                         * @memberof com.xueershangda.tianxun.question.model
                         * @classdesc Represents a Category.
                         * @implements ICategory
                         * @constructor
                         * @param {com.xueershangda.tianxun.question.model.ICategory=} [properties] Properties to set
                         */
                        function Category(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Category id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @instance
                         */
                        Category.prototype.id = "";

                        /**
                         * Category text.
                         * @member {string} text
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @instance
                         */
                        Category.prototype.text = "";

                        /**
                         * Category status.
                         * @member {number} status
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @instance
                         */
                        Category.prototype.status = 0;

                        /**
                         * Category level.
                         * @member {number} level
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @instance
                         */
                        Category.prototype.level = 0;

                        /**
                         * Category parent.
                         * @member {string} parent
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @instance
                         */
                        Category.prototype.parent = "";

                        /**
                         * Category icon.
                         * @member {string} icon
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @instance
                         */
                        Category.prototype.icon = "";

                        /**
                         * Category orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @instance
                         */
                        Category.prototype.orderBy = "";

                        /**
                         * Category page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @instance
                         */
                        Category.prototype.page = 0;

                        /**
                         * Category pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @instance
                         */
                        Category.prototype.pageSize = 0;

                        /**
                         * Creates a new Category instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.ICategory=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.question.model.Category} Category instance
                         */
                        Category.create = function create(properties) {
                            return new Category(properties);
                        };

                        /**
                         * Encodes the specified Category message. Does not implicitly {@link com.xueershangda.tianxun.question.model.Category.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.ICategory} message Category message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Category.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.text != null && message.hasOwnProperty("text"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                            if (message.status != null && message.hasOwnProperty("status"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.status);
                            if (message.level != null && message.hasOwnProperty("level"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.parent);
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.icon);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.orderBy);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.pageSize);
                            return writer;
                        };

                        /**
                         * Encodes the specified Category message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.question.model.Category.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.ICategory} message Category message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Category.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Category message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.question.model.Category} Category
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Category.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.question.model.Category();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.text = reader.string();
                                    break;
                                case 3:
                                    message.status = reader.int32();
                                    break;
                                case 4:
                                    message.level = reader.int32();
                                    break;
                                case 5:
                                    message.parent = reader.string();
                                    break;
                                case 6:
                                    message.icon = reader.string();
                                    break;
                                case 7:
                                    message.orderBy = reader.string();
                                    break;
                                case 8:
                                    message.page = reader.int32();
                                    break;
                                case 9:
                                    message.pageSize = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Category message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.question.model.Category} Category
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Category.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Category message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Category.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.status != null && message.hasOwnProperty("status"))
                                if (!$util.isInteger(message.status))
                                    return "status: integer expected";
                            if (message.level != null && message.hasOwnProperty("level"))
                                if (!$util.isInteger(message.level))
                                    return "level: integer expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                if (!$util.isString(message.icon))
                                    return "icon: string expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            return null;
                        };

                        /**
                         * Creates a Category message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.question.model.Category} Category
                         */
                        Category.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.question.model.Category)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.question.model.Category();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.status != null)
                                message.status = object.status | 0;
                            if (object.level != null)
                                message.level = object.level | 0;
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.icon != null)
                                message.icon = String(object.icon);
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a Category message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.Category} message Category
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Category.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.text = "";
                                object.status = 0;
                                object.level = 0;
                                object.parent = "";
                                object.icon = "";
                                object.orderBy = "";
                                object.page = 0;
                                object.pageSize = 0;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = message.status;
                            if (message.level != null && message.hasOwnProperty("level"))
                                object.level = message.level;
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                object.icon = message.icon;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            return object;
                        };

                        /**
                         * Converts this Category to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.question.model.Category
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Category.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Category;
                    })();

                    model.CategoryReply = (function() {

                        /**
                         * Properties of a CategoryReply.
                         * @memberof com.xueershangda.tianxun.question.model
                         * @interface ICategoryReply
                         * @property {number|null} [code] CategoryReply code
                         * @property {string|null} [message] CategoryReply message
                         * @property {Array.<com.xueershangda.tianxun.question.model.ICategory>|null} [data] CategoryReply data
                         */

                        /**
                         * Constructs a new CategoryReply.
                         * @memberof com.xueershangda.tianxun.question.model
                         * @classdesc Represents a CategoryReply.
                         * @implements ICategoryReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.question.model.ICategoryReply=} [properties] Properties to set
                         */
                        function CategoryReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * CategoryReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @instance
                         */
                        CategoryReply.prototype.code = 0;

                        /**
                         * CategoryReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @instance
                         */
                        CategoryReply.prototype.message = "";

                        /**
                         * CategoryReply data.
                         * @member {Array.<com.xueershangda.tianxun.question.model.ICategory>} data
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @instance
                         */
                        CategoryReply.prototype.data = $util.emptyArray;

                        /**
                         * Creates a new CategoryReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.ICategoryReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.question.model.CategoryReply} CategoryReply instance
                         */
                        CategoryReply.create = function create(properties) {
                            return new CategoryReply(properties);
                        };

                        /**
                         * Encodes the specified CategoryReply message. Does not implicitly {@link com.xueershangda.tianxun.question.model.CategoryReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.ICategoryReply} message CategoryReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CategoryReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.question.model.Category.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified CategoryReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.question.model.CategoryReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.ICategoryReply} message CategoryReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CategoryReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a CategoryReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.question.model.CategoryReply} CategoryReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CategoryReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.question.model.CategoryReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.question.model.Category.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a CategoryReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.question.model.CategoryReply} CategoryReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CategoryReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a CategoryReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CategoryReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.question.model.Category.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a CategoryReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.question.model.CategoryReply} CategoryReply
                         */
                        CategoryReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.question.model.CategoryReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.question.model.CategoryReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.question.model.CategoryReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.question.model.CategoryReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.question.model.Category.fromObject(object.data[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a CategoryReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @static
                         * @param {com.xueershangda.tianxun.question.model.CategoryReply} message CategoryReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CategoryReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.question.model.Category.toObject(message.data[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this CategoryReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.question.model.CategoryReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CategoryReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return CategoryReply;
                    })();

                    return model;
                })();

                return question;
            })();

            tianxun.proto = (function() {

                /**
                 * Namespace proto.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const proto = {};

                proto.Content = (function() {

                    /**
                     * Properties of a Content.
                     * @memberof com.xueershangda.tianxun.proto
                     * @interface IContent
                     * @property {string|null} [id] Content id
                     * @property {string|null} [articleId] Content articleId
                     * @property {string|null} [text] Content text
                     * @property {number|null} [order] Content order
                     * @property {number|null} [page] Content page
                     * @property {number|null} [pageSize] Content pageSize
                     * @property {string|null} [orderBy] Content orderBy
                     */

                    /**
                     * Constructs a new Content.
                     * @memberof com.xueershangda.tianxun.proto
                     * @classdesc Represents a Content.
                     * @implements IContent
                     * @constructor
                     * @param {com.xueershangda.tianxun.proto.IContent=} [properties] Properties to set
                     */
                    function Content(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Content id.
                     * @member {string} id
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @instance
                     */
                    Content.prototype.id = "";

                    /**
                     * Content articleId.
                     * @member {string} articleId
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @instance
                     */
                    Content.prototype.articleId = "";

                    /**
                     * Content text.
                     * @member {string} text
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @instance
                     */
                    Content.prototype.text = "";

                    /**
                     * Content order.
                     * @member {number} order
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @instance
                     */
                    Content.prototype.order = 0;

                    /**
                     * Content page.
                     * @member {number} page
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @instance
                     */
                    Content.prototype.page = 0;

                    /**
                     * Content pageSize.
                     * @member {number} pageSize
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @instance
                     */
                    Content.prototype.pageSize = 0;

                    /**
                     * Content orderBy.
                     * @member {string} orderBy
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @instance
                     */
                    Content.prototype.orderBy = "";

                    /**
                     * Creates a new Content instance using the specified properties.
                     * @function create
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @static
                     * @param {com.xueershangda.tianxun.proto.IContent=} [properties] Properties to set
                     * @returns {com.xueershangda.tianxun.proto.Content} Content instance
                     */
                    Content.create = function create(properties) {
                        return new Content(properties);
                    };

                    /**
                     * Encodes the specified Content message. Does not implicitly {@link com.xueershangda.tianxun.proto.Content.verify|verify} messages.
                     * @function encode
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @static
                     * @param {com.xueershangda.tianxun.proto.IContent} message Content message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Content.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && message.hasOwnProperty("id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.articleId != null && message.hasOwnProperty("articleId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.articleId);
                        if (message.text != null && message.hasOwnProperty("text"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.text);
                        if (message.order != null && message.hasOwnProperty("order"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.order);
                        if (message.page != null && message.hasOwnProperty("page"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.page);
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.pageSize);
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.orderBy);
                        return writer;
                    };

                    /**
                     * Encodes the specified Content message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.proto.Content.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @static
                     * @param {com.xueershangda.tianxun.proto.IContent} message Content message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Content.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Content message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.xueershangda.tianxun.proto.Content} Content
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Content.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.proto.Content();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.articleId = reader.string();
                                break;
                            case 3:
                                message.text = reader.string();
                                break;
                            case 4:
                                message.order = reader.int32();
                                break;
                            case 5:
                                message.page = reader.int32();
                                break;
                            case 6:
                                message.pageSize = reader.int32();
                                break;
                            case 7:
                                message.orderBy = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Content message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.xueershangda.tianxun.proto.Content} Content
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Content.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Content message.
                     * @function verify
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Content.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.articleId != null && message.hasOwnProperty("articleId"))
                            if (!$util.isString(message.articleId))
                                return "articleId: string expected";
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        if (message.order != null && message.hasOwnProperty("order"))
                            if (!$util.isInteger(message.order))
                                return "order: integer expected";
                        if (message.page != null && message.hasOwnProperty("page"))
                            if (!$util.isInteger(message.page))
                                return "page: integer expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            if (!$util.isString(message.orderBy))
                                return "orderBy: string expected";
                        return null;
                    };

                    /**
                     * Creates a Content message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.xueershangda.tianxun.proto.Content} Content
                     */
                    Content.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.xueershangda.tianxun.proto.Content)
                            return object;
                        let message = new $root.com.xueershangda.tianxun.proto.Content();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.articleId != null)
                            message.articleId = String(object.articleId);
                        if (object.text != null)
                            message.text = String(object.text);
                        if (object.order != null)
                            message.order = object.order | 0;
                        if (object.page != null)
                            message.page = object.page | 0;
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.orderBy != null)
                            message.orderBy = String(object.orderBy);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Content message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @static
                     * @param {com.xueershangda.tianxun.proto.Content} message Content
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Content.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.articleId = "";
                            object.text = "";
                            object.order = 0;
                            object.page = 0;
                            object.pageSize = 0;
                            object.orderBy = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.articleId != null && message.hasOwnProperty("articleId"))
                            object.articleId = message.articleId;
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        if (message.order != null && message.hasOwnProperty("order"))
                            object.order = message.order;
                        if (message.page != null && message.hasOwnProperty("page"))
                            object.page = message.page;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            object.orderBy = message.orderBy;
                        return object;
                    };

                    /**
                     * Converts this Content to JSON.
                     * @function toJSON
                     * @memberof com.xueershangda.tianxun.proto.Content
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Content.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Content;
                })();

                proto.Follow = (function() {

                    /**
                     * Properties of a Follow.
                     * @memberof com.xueershangda.tianxun.proto
                     * @interface IFollow
                     * @property {string|null} [id] Follow id
                     * @property {string|null} [userId] Follow userId
                     * @property {number|Long|null} [followDate] Follow followDate
                     * @property {string|null} [followId] Follow followId
                     * @property {number|null} [type] Follow type
                     * @property {string|null} [targetId] Follow targetId
                     * @property {string|null} [name] Follow name
                     * @property {string|null} [remark] Follow remark
                     * @property {number|null} [page] Follow page
                     * @property {number|null} [pageSize] Follow pageSize
                     * @property {string|null} [orderBy] Follow orderBy
                     */

                    /**
                     * Constructs a new Follow.
                     * @memberof com.xueershangda.tianxun.proto
                     * @classdesc Represents a Follow.
                     * @implements IFollow
                     * @constructor
                     * @param {com.xueershangda.tianxun.proto.IFollow=} [properties] Properties to set
                     */
                    function Follow(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Follow id.
                     * @member {string} id
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.id = "";

                    /**
                     * Follow userId.
                     * @member {string} userId
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.userId = "";

                    /**
                     * Follow followDate.
                     * @member {number|Long} followDate
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.followDate = 0;

                    /**
                     * Follow followId.
                     * @member {string} followId
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.followId = "";

                    /**
                     * Follow type.
                     * @member {number} type
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.type = 0;

                    /**
                     * Follow targetId.
                     * @member {string} targetId
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.targetId = "";

                    /**
                     * Follow name.
                     * @member {string} name
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.name = "";

                    /**
                     * Follow remark.
                     * @member {string} remark
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.remark = "";

                    /**
                     * Follow page.
                     * @member {number} page
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.page = 0;

                    /**
                     * Follow pageSize.
                     * @member {number} pageSize
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.pageSize = 0;

                    /**
                     * Follow orderBy.
                     * @member {string} orderBy
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     */
                    Follow.prototype.orderBy = "";

                    /**
                     * Creates a new Follow instance using the specified properties.
                     * @function create
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @static
                     * @param {com.xueershangda.tianxun.proto.IFollow=} [properties] Properties to set
                     * @returns {com.xueershangda.tianxun.proto.Follow} Follow instance
                     */
                    Follow.create = function create(properties) {
                        return new Follow(properties);
                    };

                    /**
                     * Encodes the specified Follow message. Does not implicitly {@link com.xueershangda.tianxun.proto.Follow.verify|verify} messages.
                     * @function encode
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @static
                     * @param {com.xueershangda.tianxun.proto.IFollow} message Follow message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Follow.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && message.hasOwnProperty("id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.userId != null && message.hasOwnProperty("userId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);
                        if (message.followDate != null && message.hasOwnProperty("followDate"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.followDate);
                        if (message.followId != null && message.hasOwnProperty("followId"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.followId);
                        if (message.type != null && message.hasOwnProperty("type"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                        if (message.targetId != null && message.hasOwnProperty("targetId"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.targetId);
                        if (message.name != null && message.hasOwnProperty("name"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.name);
                        if (message.remark != null && message.hasOwnProperty("remark"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.remark);
                        if (message.page != null && message.hasOwnProperty("page"))
                            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.page);
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.pageSize);
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            writer.uint32(/* id 11, wireType 2 =*/90).string(message.orderBy);
                        return writer;
                    };

                    /**
                     * Encodes the specified Follow message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.proto.Follow.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @static
                     * @param {com.xueershangda.tianxun.proto.IFollow} message Follow message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Follow.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Follow message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.xueershangda.tianxun.proto.Follow} Follow
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Follow.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.proto.Follow();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.userId = reader.string();
                                break;
                            case 3:
                                message.followDate = reader.int64();
                                break;
                            case 4:
                                message.followId = reader.string();
                                break;
                            case 5:
                                message.type = reader.int32();
                                break;
                            case 6:
                                message.targetId = reader.string();
                                break;
                            case 7:
                                message.name = reader.string();
                                break;
                            case 8:
                                message.remark = reader.string();
                                break;
                            case 9:
                                message.page = reader.int32();
                                break;
                            case 10:
                                message.pageSize = reader.int32();
                                break;
                            case 11:
                                message.orderBy = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Follow message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.xueershangda.tianxun.proto.Follow} Follow
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Follow.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Follow message.
                     * @function verify
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Follow.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.userId != null && message.hasOwnProperty("userId"))
                            if (!$util.isString(message.userId))
                                return "userId: string expected";
                        if (message.followDate != null && message.hasOwnProperty("followDate"))
                            if (!$util.isInteger(message.followDate) && !(message.followDate && $util.isInteger(message.followDate.low) && $util.isInteger(message.followDate.high)))
                                return "followDate: integer|Long expected";
                        if (message.followId != null && message.hasOwnProperty("followId"))
                            if (!$util.isString(message.followId))
                                return "followId: string expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            if (!$util.isInteger(message.type))
                                return "type: integer expected";
                        if (message.targetId != null && message.hasOwnProperty("targetId"))
                            if (!$util.isString(message.targetId))
                                return "targetId: string expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.remark != null && message.hasOwnProperty("remark"))
                            if (!$util.isString(message.remark))
                                return "remark: string expected";
                        if (message.page != null && message.hasOwnProperty("page"))
                            if (!$util.isInteger(message.page))
                                return "page: integer expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            if (!$util.isString(message.orderBy))
                                return "orderBy: string expected";
                        return null;
                    };

                    /**
                     * Creates a Follow message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.xueershangda.tianxun.proto.Follow} Follow
                     */
                    Follow.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.xueershangda.tianxun.proto.Follow)
                            return object;
                        let message = new $root.com.xueershangda.tianxun.proto.Follow();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.userId != null)
                            message.userId = String(object.userId);
                        if (object.followDate != null)
                            if ($util.Long)
                                (message.followDate = $util.Long.fromValue(object.followDate)).unsigned = false;
                            else if (typeof object.followDate === "string")
                                message.followDate = parseInt(object.followDate, 10);
                            else if (typeof object.followDate === "number")
                                message.followDate = object.followDate;
                            else if (typeof object.followDate === "object")
                                message.followDate = new $util.LongBits(object.followDate.low >>> 0, object.followDate.high >>> 0).toNumber();
                        if (object.followId != null)
                            message.followId = String(object.followId);
                        if (object.type != null)
                            message.type = object.type | 0;
                        if (object.targetId != null)
                            message.targetId = String(object.targetId);
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.remark != null)
                            message.remark = String(object.remark);
                        if (object.page != null)
                            message.page = object.page | 0;
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.orderBy != null)
                            message.orderBy = String(object.orderBy);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Follow message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @static
                     * @param {com.xueershangda.tianxun.proto.Follow} message Follow
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Follow.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.userId = "";
                            object.followDate = 0;
                            object.followId = "";
                            object.type = 0;
                            object.targetId = "";
                            object.name = "";
                            object.remark = "";
                            object.page = 0;
                            object.pageSize = 0;
                            object.orderBy = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.userId != null && message.hasOwnProperty("userId"))
                            object.userId = message.userId;
                        if (message.followDate != null && message.hasOwnProperty("followDate"))
                            if (typeof message.followDate === "number")
                                object.followDate = options.longs === String ? String(message.followDate) : message.followDate;
                            else
                                object.followDate = options.longs === String ? $util.Long.prototype.toString.call(message.followDate) : options.longs === Number ? new $util.LongBits(message.followDate.low >>> 0, message.followDate.high >>> 0).toNumber() : message.followDate;
                        if (message.followId != null && message.hasOwnProperty("followId"))
                            object.followId = message.followId;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = message.type;
                        if (message.targetId != null && message.hasOwnProperty("targetId"))
                            object.targetId = message.targetId;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.remark != null && message.hasOwnProperty("remark"))
                            object.remark = message.remark;
                        if (message.page != null && message.hasOwnProperty("page"))
                            object.page = message.page;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            object.orderBy = message.orderBy;
                        return object;
                    };

                    /**
                     * Converts this Follow to JSON.
                     * @function toJSON
                     * @memberof com.xueershangda.tianxun.proto.Follow
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Follow.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Follow;
                })();

                proto.Tags = (function() {

                    /**
                     * Properties of a Tags.
                     * @memberof com.xueershangda.tianxun.proto
                     * @interface ITags
                     * @property {string|null} [id] Tags id
                     * @property {string|null} [name] Tags name
                     * @property {number|null} [state] Tags state
                     * @property {number|null} [hot] Tags hot
                     * @property {number|Long|null} [createDate] Tags createDate
                     * @property {number|Long|null} [focusNumber] Tags focusNumber
                     * @property {number|Long|null} [loveNumber] Tags loveNumber
                     * @property {number|Long|null} [despiseNumber] Tags despiseNumber
                     * @property {string|null} [description] Tags description
                     * @property {number|null} [page] Tags page
                     * @property {number|null} [pageSize] Tags pageSize
                     * @property {string|null} [orderBy] Tags orderBy
                     */

                    /**
                     * Constructs a new Tags.
                     * @memberof com.xueershangda.tianxun.proto
                     * @classdesc Represents a Tags.
                     * @implements ITags
                     * @constructor
                     * @param {com.xueershangda.tianxun.proto.ITags=} [properties] Properties to set
                     */
                    function Tags(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Tags id.
                     * @member {string} id
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.id = "";

                    /**
                     * Tags name.
                     * @member {string} name
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.name = "";

                    /**
                     * Tags state.
                     * @member {number} state
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.state = 0;

                    /**
                     * Tags hot.
                     * @member {number} hot
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.hot = 0;

                    /**
                     * Tags createDate.
                     * @member {number|Long} createDate
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.createDate = 0;

                    /**
                     * Tags focusNumber.
                     * @member {number|Long} focusNumber
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.focusNumber = 0;

                    /**
                     * Tags loveNumber.
                     * @member {number|Long} loveNumber
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.loveNumber = 0;

                    /**
                     * Tags despiseNumber.
                     * @member {number|Long} despiseNumber
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.despiseNumber = 0;

                    /**
                     * Tags description.
                     * @member {string} description
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.description = "";

                    /**
                     * Tags page.
                     * @member {number} page
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.page = 0;

                    /**
                     * Tags pageSize.
                     * @member {number} pageSize
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.pageSize = 0;

                    /**
                     * Tags orderBy.
                     * @member {string} orderBy
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     */
                    Tags.prototype.orderBy = "";

                    /**
                     * Creates a new Tags instance using the specified properties.
                     * @function create
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @static
                     * @param {com.xueershangda.tianxun.proto.ITags=} [properties] Properties to set
                     * @returns {com.xueershangda.tianxun.proto.Tags} Tags instance
                     */
                    Tags.create = function create(properties) {
                        return new Tags(properties);
                    };

                    /**
                     * Encodes the specified Tags message. Does not implicitly {@link com.xueershangda.tianxun.proto.Tags.verify|verify} messages.
                     * @function encode
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @static
                     * @param {com.xueershangda.tianxun.proto.ITags} message Tags message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Tags.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && message.hasOwnProperty("id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.name != null && message.hasOwnProperty("name"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                        if (message.state != null && message.hasOwnProperty("state"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                        if (message.hot != null && message.hasOwnProperty("hot"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.hot);
                        if (message.createDate != null && message.hasOwnProperty("createDate"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.createDate);
                        if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.focusNumber);
                        if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.loveNumber);
                        if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                            writer.uint32(/* id 8, wireType 0 =*/64).int64(message.despiseNumber);
                        if (message.description != null && message.hasOwnProperty("description"))
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.description);
                        if (message.page != null && message.hasOwnProperty("page"))
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.page);
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.pageSize);
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.orderBy);
                        return writer;
                    };

                    /**
                     * Encodes the specified Tags message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.proto.Tags.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @static
                     * @param {com.xueershangda.tianxun.proto.ITags} message Tags message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Tags.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Tags message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.xueershangda.tianxun.proto.Tags} Tags
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Tags.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.proto.Tags();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.name = reader.string();
                                break;
                            case 3:
                                message.state = reader.int32();
                                break;
                            case 4:
                                message.hot = reader.int32();
                                break;
                            case 5:
                                message.createDate = reader.int64();
                                break;
                            case 6:
                                message.focusNumber = reader.int64();
                                break;
                            case 7:
                                message.loveNumber = reader.int64();
                                break;
                            case 8:
                                message.despiseNumber = reader.int64();
                                break;
                            case 9:
                                message.description = reader.string();
                                break;
                            case 10:
                                message.page = reader.int32();
                                break;
                            case 11:
                                message.pageSize = reader.int32();
                                break;
                            case 12:
                                message.orderBy = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Tags message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.xueershangda.tianxun.proto.Tags} Tags
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Tags.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Tags message.
                     * @function verify
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Tags.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            if (!$util.isInteger(message.state))
                                return "state: integer expected";
                        if (message.hot != null && message.hasOwnProperty("hot"))
                            if (!$util.isInteger(message.hot))
                                return "hot: integer expected";
                        if (message.createDate != null && message.hasOwnProperty("createDate"))
                            if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                return "createDate: integer|Long expected";
                        if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                            if (!$util.isInteger(message.focusNumber) && !(message.focusNumber && $util.isInteger(message.focusNumber.low) && $util.isInteger(message.focusNumber.high)))
                                return "focusNumber: integer|Long expected";
                        if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                            if (!$util.isInteger(message.loveNumber) && !(message.loveNumber && $util.isInteger(message.loveNumber.low) && $util.isInteger(message.loveNumber.high)))
                                return "loveNumber: integer|Long expected";
                        if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                            if (!$util.isInteger(message.despiseNumber) && !(message.despiseNumber && $util.isInteger(message.despiseNumber.low) && $util.isInteger(message.despiseNumber.high)))
                                return "despiseNumber: integer|Long expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.page != null && message.hasOwnProperty("page"))
                            if (!$util.isInteger(message.page))
                                return "page: integer expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            if (!$util.isString(message.orderBy))
                                return "orderBy: string expected";
                        return null;
                    };

                    /**
                     * Creates a Tags message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.xueershangda.tianxun.proto.Tags} Tags
                     */
                    Tags.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.xueershangda.tianxun.proto.Tags)
                            return object;
                        let message = new $root.com.xueershangda.tianxun.proto.Tags();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.state != null)
                            message.state = object.state | 0;
                        if (object.hot != null)
                            message.hot = object.hot | 0;
                        if (object.createDate != null)
                            if ($util.Long)
                                (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                            else if (typeof object.createDate === "string")
                                message.createDate = parseInt(object.createDate, 10);
                            else if (typeof object.createDate === "number")
                                message.createDate = object.createDate;
                            else if (typeof object.createDate === "object")
                                message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                        if (object.focusNumber != null)
                            if ($util.Long)
                                (message.focusNumber = $util.Long.fromValue(object.focusNumber)).unsigned = false;
                            else if (typeof object.focusNumber === "string")
                                message.focusNumber = parseInt(object.focusNumber, 10);
                            else if (typeof object.focusNumber === "number")
                                message.focusNumber = object.focusNumber;
                            else if (typeof object.focusNumber === "object")
                                message.focusNumber = new $util.LongBits(object.focusNumber.low >>> 0, object.focusNumber.high >>> 0).toNumber();
                        if (object.loveNumber != null)
                            if ($util.Long)
                                (message.loveNumber = $util.Long.fromValue(object.loveNumber)).unsigned = false;
                            else if (typeof object.loveNumber === "string")
                                message.loveNumber = parseInt(object.loveNumber, 10);
                            else if (typeof object.loveNumber === "number")
                                message.loveNumber = object.loveNumber;
                            else if (typeof object.loveNumber === "object")
                                message.loveNumber = new $util.LongBits(object.loveNumber.low >>> 0, object.loveNumber.high >>> 0).toNumber();
                        if (object.despiseNumber != null)
                            if ($util.Long)
                                (message.despiseNumber = $util.Long.fromValue(object.despiseNumber)).unsigned = false;
                            else if (typeof object.despiseNumber === "string")
                                message.despiseNumber = parseInt(object.despiseNumber, 10);
                            else if (typeof object.despiseNumber === "number")
                                message.despiseNumber = object.despiseNumber;
                            else if (typeof object.despiseNumber === "object")
                                message.despiseNumber = new $util.LongBits(object.despiseNumber.low >>> 0, object.despiseNumber.high >>> 0).toNumber();
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.page != null)
                            message.page = object.page | 0;
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.orderBy != null)
                            message.orderBy = String(object.orderBy);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Tags message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @static
                     * @param {com.xueershangda.tianxun.proto.Tags} message Tags
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Tags.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.name = "";
                            object.state = 0;
                            object.hot = 0;
                            object.createDate = 0;
                            object.focusNumber = 0;
                            object.loveNumber = 0;
                            object.despiseNumber = 0;
                            object.description = "";
                            object.page = 0;
                            object.pageSize = 0;
                            object.orderBy = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = message.state;
                        if (message.hot != null && message.hasOwnProperty("hot"))
                            object.hot = message.hot;
                        if (message.createDate != null && message.hasOwnProperty("createDate"))
                            if (typeof message.createDate === "number")
                                object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                            else
                                object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                        if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                            if (typeof message.focusNumber === "number")
                                object.focusNumber = options.longs === String ? String(message.focusNumber) : message.focusNumber;
                            else
                                object.focusNumber = options.longs === String ? $util.Long.prototype.toString.call(message.focusNumber) : options.longs === Number ? new $util.LongBits(message.focusNumber.low >>> 0, message.focusNumber.high >>> 0).toNumber() : message.focusNumber;
                        if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                            if (typeof message.loveNumber === "number")
                                object.loveNumber = options.longs === String ? String(message.loveNumber) : message.loveNumber;
                            else
                                object.loveNumber = options.longs === String ? $util.Long.prototype.toString.call(message.loveNumber) : options.longs === Number ? new $util.LongBits(message.loveNumber.low >>> 0, message.loveNumber.high >>> 0).toNumber() : message.loveNumber;
                        if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                            if (typeof message.despiseNumber === "number")
                                object.despiseNumber = options.longs === String ? String(message.despiseNumber) : message.despiseNumber;
                            else
                                object.despiseNumber = options.longs === String ? $util.Long.prototype.toString.call(message.despiseNumber) : options.longs === Number ? new $util.LongBits(message.despiseNumber.low >>> 0, message.despiseNumber.high >>> 0).toNumber() : message.despiseNumber;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.page != null && message.hasOwnProperty("page"))
                            object.page = message.page;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            object.orderBy = message.orderBy;
                        return object;
                    };

                    /**
                     * Converts this Tags to JSON.
                     * @function toJSON
                     * @memberof com.xueershangda.tianxun.proto.Tags
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Tags.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Tags;
                })();

                return proto;
            })();

            tianxun.user = (function() {

                /**
                 * Namespace user.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const user = {};

                user.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.user
                     * @namespace
                     */
                    const model = {};

                    model.User = (function() {

                        /**
                         * Properties of a User.
                         * @memberof com.xueershangda.tianxun.user.model
                         * @interface IUser
                         * @property {string|null} [id] User id
                         * @property {string|null} [name] User name
                         * @property {string|null} [nickName] User nickName
                         * @property {string|null} [account] User account
                         * @property {string|null} [email] User email
                         * @property {string|null} [mobile] User mobile
                         * @property {string|null} [password] User password
                         * @property {number|Long|null} [registerDate] User registerDate
                         * @property {number|null} [age] User age
                         * @property {number|Long|null} [lastLoginDate] User lastLoginDate
                         * @property {number|null} [state] User state
                         * @property {number|null} [level] User level
                         * @property {number|null} [asker] User asker
                         * @property {number|null} [answer] User answer
                         * @property {string|null} [identityCard] User identityCard
                         * @property {number|null} [identityType] User identityType
                         * @property {string|null} [alipay] User alipay
                         * @property {string|null} [weixin] User weixin
                         * @property {string|null} [qq] User qq
                         * @property {string|null} [address] User address
                         * @property {string|null} [avatar] User avatar
                         * @property {number|Long|null} [birthday] User birthday
                         * @property {string|null} [summary] User summary
                         * @property {string|null} [signature] User signature
                         * @property {string|null} [title] User title
                         * @property {number|Long|null} [focusNumber] User focusNumber
                         * @property {number|Long|null} [loveNumber] User loveNumber
                         * @property {number|null} [page] User page
                         * @property {number|null} [pageSize] User pageSize
                         * @property {string|null} [orderBy] User orderBy
                         * @property {string|null} [tokenId] User tokenId
                         * @property {string|null} [oldPassword] User oldPassword
                         * @property {string|null} [checkPasswd] User checkPasswd
                         * @property {number|null} [gender] User gender
                         * @property {boolean|null} [agreement] User agreement
                         * @property {number|null} [source] User source
                         * @property {string|null} [targetId] User targetId
                         * @property {number|null} [type] User type
                         * @property {number|null} [grade] User grade
                         * @property {number|Long|null} [replyTime] User replyTime
                         * @property {string|null} [parent] User parent
                         * @property {number|null} [paymentAuthority] User paymentAuthority
                         * @property {number|null} [paymentAmount] User paymentAmount
                         * @property {number|null} [teacher] User teacher
                         * @property {string|null} [weixinQrcode] User weixinQrcode
                         * @property {string|null} [alipayQrcode] User alipayQrcode
                         */

                        /**
                         * Constructs a new User.
                         * @memberof com.xueershangda.tianxun.user.model
                         * @classdesc Represents a User.
                         * @implements IUser
                         * @constructor
                         * @param {com.xueershangda.tianxun.user.model.IUser=} [properties] Properties to set
                         */
                        function User(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * User id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.id = "";

                        /**
                         * User name.
                         * @member {string} name
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.name = "";

                        /**
                         * User nickName.
                         * @member {string} nickName
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.nickName = "";

                        /**
                         * User account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.account = "";

                        /**
                         * User email.
                         * @member {string} email
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.email = "";

                        /**
                         * User mobile.
                         * @member {string} mobile
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.mobile = "";

                        /**
                         * User password.
                         * @member {string} password
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.password = "";

                        /**
                         * User registerDate.
                         * @member {number|Long} registerDate
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.registerDate = 0;

                        /**
                         * User age.
                         * @member {number} age
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.age = 0;

                        /**
                         * User lastLoginDate.
                         * @member {number|Long} lastLoginDate
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.lastLoginDate = 0;

                        /**
                         * User state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.state = 0;

                        /**
                         * User level.
                         * @member {number} level
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.level = 0;

                        /**
                         * User asker.
                         * @member {number} asker
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.asker = 0;

                        /**
                         * User answer.
                         * @member {number} answer
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.answer = 0;

                        /**
                         * User identityCard.
                         * @member {string} identityCard
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.identityCard = "";

                        /**
                         * User identityType.
                         * @member {number} identityType
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.identityType = 0;

                        /**
                         * User alipay.
                         * @member {string} alipay
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.alipay = "";

                        /**
                         * User weixin.
                         * @member {string} weixin
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.weixin = "";

                        /**
                         * User qq.
                         * @member {string} qq
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.qq = "";

                        /**
                         * User address.
                         * @member {string} address
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.address = "";

                        /**
                         * User avatar.
                         * @member {string} avatar
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.avatar = "";

                        /**
                         * User birthday.
                         * @member {number|Long} birthday
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.birthday = 0;

                        /**
                         * User summary.
                         * @member {string} summary
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.summary = "";

                        /**
                         * User signature.
                         * @member {string} signature
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.signature = "";

                        /**
                         * User title.
                         * @member {string} title
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.title = "";

                        /**
                         * User focusNumber.
                         * @member {number|Long} focusNumber
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.focusNumber = 0;

                        /**
                         * User loveNumber.
                         * @member {number|Long} loveNumber
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.loveNumber = 0;

                        /**
                         * User page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.page = 0;

                        /**
                         * User pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.pageSize = 0;

                        /**
                         * User orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.orderBy = "";

                        /**
                         * User tokenId.
                         * @member {string} tokenId
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.tokenId = "";

                        /**
                         * User oldPassword.
                         * @member {string} oldPassword
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.oldPassword = "";

                        /**
                         * User checkPasswd.
                         * @member {string} checkPasswd
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.checkPasswd = "";

                        /**
                         * User gender.
                         * @member {number} gender
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.gender = 0;

                        /**
                         * User agreement.
                         * @member {boolean} agreement
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.agreement = false;

                        /**
                         * User source.
                         * @member {number} source
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.source = 0;

                        /**
                         * User targetId.
                         * @member {string} targetId
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.targetId = "";

                        /**
                         * User type.
                         * @member {number} type
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.type = 0;

                        /**
                         * User grade.
                         * @member {number} grade
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.grade = 0;

                        /**
                         * User replyTime.
                         * @member {number|Long} replyTime
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.replyTime = 0;

                        /**
                         * User parent.
                         * @member {string} parent
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.parent = "";

                        /**
                         * User paymentAuthority.
                         * @member {number} paymentAuthority
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.paymentAuthority = 0;

                        /**
                         * User paymentAmount.
                         * @member {number} paymentAmount
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.paymentAmount = 0;

                        /**
                         * User teacher.
                         * @member {number} teacher
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.teacher = 0;

                        /**
                         * User weixinQrcode.
                         * @member {string} weixinQrcode
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.weixinQrcode = "";

                        /**
                         * User alipayQrcode.
                         * @member {string} alipayQrcode
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         */
                        User.prototype.alipayQrcode = "";

                        /**
                         * Creates a new User instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IUser=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.user.model.User} User instance
                         */
                        User.create = function create(properties) {
                            return new User(properties);
                        };

                        /**
                         * Encodes the specified User message. Does not implicitly {@link com.xueershangda.tianxun.user.model.User.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IUser} message User message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        User.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickName);
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.account);
                            if (message.email != null && message.hasOwnProperty("email"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.email);
                            if (message.mobile != null && message.hasOwnProperty("mobile"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.mobile);
                            if (message.password != null && message.hasOwnProperty("password"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.password);
                            if (message.registerDate != null && message.hasOwnProperty("registerDate"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.registerDate);
                            if (message.age != null && message.hasOwnProperty("age"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.age);
                            if (message.lastLoginDate != null && message.hasOwnProperty("lastLoginDate"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.lastLoginDate);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.state);
                            if (message.level != null && message.hasOwnProperty("level"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.level);
                            if (message.asker != null && message.hasOwnProperty("asker"))
                                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.asker);
                            if (message.answer != null && message.hasOwnProperty("answer"))
                                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.answer);
                            if (message.identityCard != null && message.hasOwnProperty("identityCard"))
                                writer.uint32(/* id 15, wireType 2 =*/122).string(message.identityCard);
                            if (message.identityType != null && message.hasOwnProperty("identityType"))
                                writer.uint32(/* id 16, wireType 0 =*/128).int32(message.identityType);
                            if (message.alipay != null && message.hasOwnProperty("alipay"))
                                writer.uint32(/* id 17, wireType 2 =*/138).string(message.alipay);
                            if (message.weixin != null && message.hasOwnProperty("weixin"))
                                writer.uint32(/* id 18, wireType 2 =*/146).string(message.weixin);
                            if (message.qq != null && message.hasOwnProperty("qq"))
                                writer.uint32(/* id 19, wireType 2 =*/154).string(message.qq);
                            if (message.address != null && message.hasOwnProperty("address"))
                                writer.uint32(/* id 20, wireType 2 =*/162).string(message.address);
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                writer.uint32(/* id 21, wireType 2 =*/170).string(message.avatar);
                            if (message.birthday != null && message.hasOwnProperty("birthday"))
                                writer.uint32(/* id 22, wireType 0 =*/176).int64(message.birthday);
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                writer.uint32(/* id 23, wireType 2 =*/186).string(message.summary);
                            if (message.signature != null && message.hasOwnProperty("signature"))
                                writer.uint32(/* id 24, wireType 2 =*/194).string(message.signature);
                            if (message.title != null && message.hasOwnProperty("title"))
                                writer.uint32(/* id 25, wireType 2 =*/202).string(message.title);
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                writer.uint32(/* id 26, wireType 0 =*/208).int64(message.focusNumber);
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                writer.uint32(/* id 27, wireType 0 =*/216).int64(message.loveNumber);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 28, wireType 0 =*/224).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 29, wireType 0 =*/232).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 30, wireType 2 =*/242).string(message.orderBy);
                            if (message.tokenId != null && message.hasOwnProperty("tokenId"))
                                writer.uint32(/* id 31, wireType 2 =*/250).string(message.tokenId);
                            if (message.oldPassword != null && message.hasOwnProperty("oldPassword"))
                                writer.uint32(/* id 32, wireType 2 =*/258).string(message.oldPassword);
                            if (message.checkPasswd != null && message.hasOwnProperty("checkPasswd"))
                                writer.uint32(/* id 33, wireType 2 =*/266).string(message.checkPasswd);
                            if (message.gender != null && message.hasOwnProperty("gender"))
                                writer.uint32(/* id 34, wireType 0 =*/272).int32(message.gender);
                            if (message.agreement != null && message.hasOwnProperty("agreement"))
                                writer.uint32(/* id 35, wireType 0 =*/280).bool(message.agreement);
                            if (message.source != null && message.hasOwnProperty("source"))
                                writer.uint32(/* id 36, wireType 0 =*/288).int32(message.source);
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                writer.uint32(/* id 37, wireType 2 =*/298).string(message.targetId);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 38, wireType 0 =*/304).int32(message.type);
                            if (message.grade != null && message.hasOwnProperty("grade"))
                                writer.uint32(/* id 39, wireType 0 =*/312).int32(message.grade);
                            if (message.replyTime != null && message.hasOwnProperty("replyTime"))
                                writer.uint32(/* id 40, wireType 0 =*/320).int64(message.replyTime);
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 41, wireType 2 =*/330).string(message.parent);
                            if (message.paymentAuthority != null && message.hasOwnProperty("paymentAuthority"))
                                writer.uint32(/* id 42, wireType 0 =*/336).int32(message.paymentAuthority);
                            if (message.paymentAmount != null && message.hasOwnProperty("paymentAmount"))
                                writer.uint32(/* id 43, wireType 0 =*/344).int32(message.paymentAmount);
                            if (message.teacher != null && message.hasOwnProperty("teacher"))
                                writer.uint32(/* id 44, wireType 0 =*/352).int32(message.teacher);
                            if (message.weixinQrcode != null && message.hasOwnProperty("weixinQrcode"))
                                writer.uint32(/* id 45, wireType 2 =*/362).string(message.weixinQrcode);
                            if (message.alipayQrcode != null && message.hasOwnProperty("alipayQrcode"))
                                writer.uint32(/* id 46, wireType 2 =*/370).string(message.alipayQrcode);
                            return writer;
                        };

                        /**
                         * Encodes the specified User message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.user.model.User.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IUser} message User message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        User.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a User message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.user.model.User} User
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        User.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.user.model.User();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.name = reader.string();
                                    break;
                                case 3:
                                    message.nickName = reader.string();
                                    break;
                                case 4:
                                    message.account = reader.string();
                                    break;
                                case 5:
                                    message.email = reader.string();
                                    break;
                                case 6:
                                    message.mobile = reader.string();
                                    break;
                                case 7:
                                    message.password = reader.string();
                                    break;
                                case 8:
                                    message.registerDate = reader.int64();
                                    break;
                                case 9:
                                    message.age = reader.int32();
                                    break;
                                case 10:
                                    message.lastLoginDate = reader.int64();
                                    break;
                                case 11:
                                    message.state = reader.int32();
                                    break;
                                case 12:
                                    message.level = reader.int32();
                                    break;
                                case 13:
                                    message.asker = reader.int32();
                                    break;
                                case 14:
                                    message.answer = reader.int32();
                                    break;
                                case 15:
                                    message.identityCard = reader.string();
                                    break;
                                case 16:
                                    message.identityType = reader.int32();
                                    break;
                                case 17:
                                    message.alipay = reader.string();
                                    break;
                                case 18:
                                    message.weixin = reader.string();
                                    break;
                                case 19:
                                    message.qq = reader.string();
                                    break;
                                case 20:
                                    message.address = reader.string();
                                    break;
                                case 21:
                                    message.avatar = reader.string();
                                    break;
                                case 22:
                                    message.birthday = reader.int64();
                                    break;
                                case 23:
                                    message.summary = reader.string();
                                    break;
                                case 24:
                                    message.signature = reader.string();
                                    break;
                                case 25:
                                    message.title = reader.string();
                                    break;
                                case 26:
                                    message.focusNumber = reader.int64();
                                    break;
                                case 27:
                                    message.loveNumber = reader.int64();
                                    break;
                                case 28:
                                    message.page = reader.int32();
                                    break;
                                case 29:
                                    message.pageSize = reader.int32();
                                    break;
                                case 30:
                                    message.orderBy = reader.string();
                                    break;
                                case 31:
                                    message.tokenId = reader.string();
                                    break;
                                case 32:
                                    message.oldPassword = reader.string();
                                    break;
                                case 33:
                                    message.checkPasswd = reader.string();
                                    break;
                                case 34:
                                    message.gender = reader.int32();
                                    break;
                                case 35:
                                    message.agreement = reader.bool();
                                    break;
                                case 36:
                                    message.source = reader.int32();
                                    break;
                                case 37:
                                    message.targetId = reader.string();
                                    break;
                                case 38:
                                    message.type = reader.int32();
                                    break;
                                case 39:
                                    message.grade = reader.int32();
                                    break;
                                case 40:
                                    message.replyTime = reader.int64();
                                    break;
                                case 41:
                                    message.parent = reader.string();
                                    break;
                                case 42:
                                    message.paymentAuthority = reader.int32();
                                    break;
                                case 43:
                                    message.paymentAmount = reader.int32();
                                    break;
                                case 44:
                                    message.teacher = reader.int32();
                                    break;
                                case 45:
                                    message.weixinQrcode = reader.string();
                                    break;
                                case 46:
                                    message.alipayQrcode = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a User message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.user.model.User} User
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        User.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a User message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        User.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                if (!$util.isString(message.nickName))
                                    return "nickName: string expected";
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            if (message.email != null && message.hasOwnProperty("email"))
                                if (!$util.isString(message.email))
                                    return "email: string expected";
                            if (message.mobile != null && message.hasOwnProperty("mobile"))
                                if (!$util.isString(message.mobile))
                                    return "mobile: string expected";
                            if (message.password != null && message.hasOwnProperty("password"))
                                if (!$util.isString(message.password))
                                    return "password: string expected";
                            if (message.registerDate != null && message.hasOwnProperty("registerDate"))
                                if (!$util.isInteger(message.registerDate) && !(message.registerDate && $util.isInteger(message.registerDate.low) && $util.isInteger(message.registerDate.high)))
                                    return "registerDate: integer|Long expected";
                            if (message.age != null && message.hasOwnProperty("age"))
                                if (!$util.isInteger(message.age))
                                    return "age: integer expected";
                            if (message.lastLoginDate != null && message.hasOwnProperty("lastLoginDate"))
                                if (!$util.isInteger(message.lastLoginDate) && !(message.lastLoginDate && $util.isInteger(message.lastLoginDate.low) && $util.isInteger(message.lastLoginDate.high)))
                                    return "lastLoginDate: integer|Long expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.level != null && message.hasOwnProperty("level"))
                                if (!$util.isInteger(message.level))
                                    return "level: integer expected";
                            if (message.asker != null && message.hasOwnProperty("asker"))
                                if (!$util.isInteger(message.asker))
                                    return "asker: integer expected";
                            if (message.answer != null && message.hasOwnProperty("answer"))
                                if (!$util.isInteger(message.answer))
                                    return "answer: integer expected";
                            if (message.identityCard != null && message.hasOwnProperty("identityCard"))
                                if (!$util.isString(message.identityCard))
                                    return "identityCard: string expected";
                            if (message.identityType != null && message.hasOwnProperty("identityType"))
                                if (!$util.isInteger(message.identityType))
                                    return "identityType: integer expected";
                            if (message.alipay != null && message.hasOwnProperty("alipay"))
                                if (!$util.isString(message.alipay))
                                    return "alipay: string expected";
                            if (message.weixin != null && message.hasOwnProperty("weixin"))
                                if (!$util.isString(message.weixin))
                                    return "weixin: string expected";
                            if (message.qq != null && message.hasOwnProperty("qq"))
                                if (!$util.isString(message.qq))
                                    return "qq: string expected";
                            if (message.address != null && message.hasOwnProperty("address"))
                                if (!$util.isString(message.address))
                                    return "address: string expected";
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                if (!$util.isString(message.avatar))
                                    return "avatar: string expected";
                            if (message.birthday != null && message.hasOwnProperty("birthday"))
                                if (!$util.isInteger(message.birthday) && !(message.birthday && $util.isInteger(message.birthday.low) && $util.isInteger(message.birthday.high)))
                                    return "birthday: integer|Long expected";
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                if (!$util.isString(message.summary))
                                    return "summary: string expected";
                            if (message.signature != null && message.hasOwnProperty("signature"))
                                if (!$util.isString(message.signature))
                                    return "signature: string expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (!$util.isInteger(message.focusNumber) && !(message.focusNumber && $util.isInteger(message.focusNumber.low) && $util.isInteger(message.focusNumber.high)))
                                    return "focusNumber: integer|Long expected";
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (!$util.isInteger(message.loveNumber) && !(message.loveNumber && $util.isInteger(message.loveNumber.low) && $util.isInteger(message.loveNumber.high)))
                                    return "loveNumber: integer|Long expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.tokenId != null && message.hasOwnProperty("tokenId"))
                                if (!$util.isString(message.tokenId))
                                    return "tokenId: string expected";
                            if (message.oldPassword != null && message.hasOwnProperty("oldPassword"))
                                if (!$util.isString(message.oldPassword))
                                    return "oldPassword: string expected";
                            if (message.checkPasswd != null && message.hasOwnProperty("checkPasswd"))
                                if (!$util.isString(message.checkPasswd))
                                    return "checkPasswd: string expected";
                            if (message.gender != null && message.hasOwnProperty("gender"))
                                if (!$util.isInteger(message.gender))
                                    return "gender: integer expected";
                            if (message.agreement != null && message.hasOwnProperty("agreement"))
                                if (typeof message.agreement !== "boolean")
                                    return "agreement: boolean expected";
                            if (message.source != null && message.hasOwnProperty("source"))
                                if (!$util.isInteger(message.source))
                                    return "source: integer expected";
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                if (!$util.isString(message.targetId))
                                    return "targetId: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isInteger(message.type))
                                    return "type: integer expected";
                            if (message.grade != null && message.hasOwnProperty("grade"))
                                if (!$util.isInteger(message.grade))
                                    return "grade: integer expected";
                            if (message.replyTime != null && message.hasOwnProperty("replyTime"))
                                if (!$util.isInteger(message.replyTime) && !(message.replyTime && $util.isInteger(message.replyTime.low) && $util.isInteger(message.replyTime.high)))
                                    return "replyTime: integer|Long expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.paymentAuthority != null && message.hasOwnProperty("paymentAuthority"))
                                if (!$util.isInteger(message.paymentAuthority))
                                    return "paymentAuthority: integer expected";
                            if (message.paymentAmount != null && message.hasOwnProperty("paymentAmount"))
                                if (!$util.isInteger(message.paymentAmount))
                                    return "paymentAmount: integer expected";
                            if (message.teacher != null && message.hasOwnProperty("teacher"))
                                if (!$util.isInteger(message.teacher))
                                    return "teacher: integer expected";
                            if (message.weixinQrcode != null && message.hasOwnProperty("weixinQrcode"))
                                if (!$util.isString(message.weixinQrcode))
                                    return "weixinQrcode: string expected";
                            if (message.alipayQrcode != null && message.hasOwnProperty("alipayQrcode"))
                                if (!$util.isString(message.alipayQrcode))
                                    return "alipayQrcode: string expected";
                            return null;
                        };

                        /**
                         * Creates a User message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.user.model.User} User
                         */
                        User.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.user.model.User)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.user.model.User();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.nickName != null)
                                message.nickName = String(object.nickName);
                            if (object.account != null)
                                message.account = String(object.account);
                            if (object.email != null)
                                message.email = String(object.email);
                            if (object.mobile != null)
                                message.mobile = String(object.mobile);
                            if (object.password != null)
                                message.password = String(object.password);
                            if (object.registerDate != null)
                                if ($util.Long)
                                    (message.registerDate = $util.Long.fromValue(object.registerDate)).unsigned = false;
                                else if (typeof object.registerDate === "string")
                                    message.registerDate = parseInt(object.registerDate, 10);
                                else if (typeof object.registerDate === "number")
                                    message.registerDate = object.registerDate;
                                else if (typeof object.registerDate === "object")
                                    message.registerDate = new $util.LongBits(object.registerDate.low >>> 0, object.registerDate.high >>> 0).toNumber();
                            if (object.age != null)
                                message.age = object.age | 0;
                            if (object.lastLoginDate != null)
                                if ($util.Long)
                                    (message.lastLoginDate = $util.Long.fromValue(object.lastLoginDate)).unsigned = false;
                                else if (typeof object.lastLoginDate === "string")
                                    message.lastLoginDate = parseInt(object.lastLoginDate, 10);
                                else if (typeof object.lastLoginDate === "number")
                                    message.lastLoginDate = object.lastLoginDate;
                                else if (typeof object.lastLoginDate === "object")
                                    message.lastLoginDate = new $util.LongBits(object.lastLoginDate.low >>> 0, object.lastLoginDate.high >>> 0).toNumber();
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.level != null)
                                message.level = object.level | 0;
                            if (object.asker != null)
                                message.asker = object.asker | 0;
                            if (object.answer != null)
                                message.answer = object.answer | 0;
                            if (object.identityCard != null)
                                message.identityCard = String(object.identityCard);
                            if (object.identityType != null)
                                message.identityType = object.identityType | 0;
                            if (object.alipay != null)
                                message.alipay = String(object.alipay);
                            if (object.weixin != null)
                                message.weixin = String(object.weixin);
                            if (object.qq != null)
                                message.qq = String(object.qq);
                            if (object.address != null)
                                message.address = String(object.address);
                            if (object.avatar != null)
                                message.avatar = String(object.avatar);
                            if (object.birthday != null)
                                if ($util.Long)
                                    (message.birthday = $util.Long.fromValue(object.birthday)).unsigned = false;
                                else if (typeof object.birthday === "string")
                                    message.birthday = parseInt(object.birthday, 10);
                                else if (typeof object.birthday === "number")
                                    message.birthday = object.birthday;
                                else if (typeof object.birthday === "object")
                                    message.birthday = new $util.LongBits(object.birthday.low >>> 0, object.birthday.high >>> 0).toNumber();
                            if (object.summary != null)
                                message.summary = String(object.summary);
                            if (object.signature != null)
                                message.signature = String(object.signature);
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.focusNumber != null)
                                if ($util.Long)
                                    (message.focusNumber = $util.Long.fromValue(object.focusNumber)).unsigned = false;
                                else if (typeof object.focusNumber === "string")
                                    message.focusNumber = parseInt(object.focusNumber, 10);
                                else if (typeof object.focusNumber === "number")
                                    message.focusNumber = object.focusNumber;
                                else if (typeof object.focusNumber === "object")
                                    message.focusNumber = new $util.LongBits(object.focusNumber.low >>> 0, object.focusNumber.high >>> 0).toNumber();
                            if (object.loveNumber != null)
                                if ($util.Long)
                                    (message.loveNumber = $util.Long.fromValue(object.loveNumber)).unsigned = false;
                                else if (typeof object.loveNumber === "string")
                                    message.loveNumber = parseInt(object.loveNumber, 10);
                                else if (typeof object.loveNumber === "number")
                                    message.loveNumber = object.loveNumber;
                                else if (typeof object.loveNumber === "object")
                                    message.loveNumber = new $util.LongBits(object.loveNumber.low >>> 0, object.loveNumber.high >>> 0).toNumber();
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.tokenId != null)
                                message.tokenId = String(object.tokenId);
                            if (object.oldPassword != null)
                                message.oldPassword = String(object.oldPassword);
                            if (object.checkPasswd != null)
                                message.checkPasswd = String(object.checkPasswd);
                            if (object.gender != null)
                                message.gender = object.gender | 0;
                            if (object.agreement != null)
                                message.agreement = Boolean(object.agreement);
                            if (object.source != null)
                                message.source = object.source | 0;
                            if (object.targetId != null)
                                message.targetId = String(object.targetId);
                            if (object.type != null)
                                message.type = object.type | 0;
                            if (object.grade != null)
                                message.grade = object.grade | 0;
                            if (object.replyTime != null)
                                if ($util.Long)
                                    (message.replyTime = $util.Long.fromValue(object.replyTime)).unsigned = false;
                                else if (typeof object.replyTime === "string")
                                    message.replyTime = parseInt(object.replyTime, 10);
                                else if (typeof object.replyTime === "number")
                                    message.replyTime = object.replyTime;
                                else if (typeof object.replyTime === "object")
                                    message.replyTime = new $util.LongBits(object.replyTime.low >>> 0, object.replyTime.high >>> 0).toNumber();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.paymentAuthority != null)
                                message.paymentAuthority = object.paymentAuthority | 0;
                            if (object.paymentAmount != null)
                                message.paymentAmount = object.paymentAmount | 0;
                            if (object.teacher != null)
                                message.teacher = object.teacher | 0;
                            if (object.weixinQrcode != null)
                                message.weixinQrcode = String(object.weixinQrcode);
                            if (object.alipayQrcode != null)
                                message.alipayQrcode = String(object.alipayQrcode);
                            return message;
                        };

                        /**
                         * Creates a plain object from a User message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.User} message User
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        User.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.name = "";
                                object.nickName = "";
                                object.account = "";
                                object.email = "";
                                object.mobile = "";
                                object.password = "";
                                object.registerDate = 0;
                                object.age = 0;
                                object.lastLoginDate = 0;
                                object.state = 0;
                                object.level = 0;
                                object.asker = 0;
                                object.answer = 0;
                                object.identityCard = "";
                                object.identityType = 0;
                                object.alipay = "";
                                object.weixin = "";
                                object.qq = "";
                                object.address = "";
                                object.avatar = "";
                                object.birthday = 0;
                                object.summary = "";
                                object.signature = "";
                                object.title = "";
                                object.focusNumber = 0;
                                object.loveNumber = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.tokenId = "";
                                object.oldPassword = "";
                                object.checkPasswd = "";
                                object.gender = 0;
                                object.agreement = false;
                                object.source = 0;
                                object.targetId = "";
                                object.type = 0;
                                object.grade = 0;
                                object.replyTime = 0;
                                object.parent = "";
                                object.paymentAuthority = 0;
                                object.paymentAmount = 0;
                                object.teacher = 0;
                                object.weixinQrcode = "";
                                object.alipayQrcode = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                object.nickName = message.nickName;
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            if (message.email != null && message.hasOwnProperty("email"))
                                object.email = message.email;
                            if (message.mobile != null && message.hasOwnProperty("mobile"))
                                object.mobile = message.mobile;
                            if (message.password != null && message.hasOwnProperty("password"))
                                object.password = message.password;
                            if (message.registerDate != null && message.hasOwnProperty("registerDate"))
                                if (typeof message.registerDate === "number")
                                    object.registerDate = options.longs === String ? String(message.registerDate) : message.registerDate;
                                else
                                    object.registerDate = options.longs === String ? $util.Long.prototype.toString.call(message.registerDate) : options.longs === Number ? new $util.LongBits(message.registerDate.low >>> 0, message.registerDate.high >>> 0).toNumber() : message.registerDate;
                            if (message.age != null && message.hasOwnProperty("age"))
                                object.age = message.age;
                            if (message.lastLoginDate != null && message.hasOwnProperty("lastLoginDate"))
                                if (typeof message.lastLoginDate === "number")
                                    object.lastLoginDate = options.longs === String ? String(message.lastLoginDate) : message.lastLoginDate;
                                else
                                    object.lastLoginDate = options.longs === String ? $util.Long.prototype.toString.call(message.lastLoginDate) : options.longs === Number ? new $util.LongBits(message.lastLoginDate.low >>> 0, message.lastLoginDate.high >>> 0).toNumber() : message.lastLoginDate;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.level != null && message.hasOwnProperty("level"))
                                object.level = message.level;
                            if (message.asker != null && message.hasOwnProperty("asker"))
                                object.asker = message.asker;
                            if (message.answer != null && message.hasOwnProperty("answer"))
                                object.answer = message.answer;
                            if (message.identityCard != null && message.hasOwnProperty("identityCard"))
                                object.identityCard = message.identityCard;
                            if (message.identityType != null && message.hasOwnProperty("identityType"))
                                object.identityType = message.identityType;
                            if (message.alipay != null && message.hasOwnProperty("alipay"))
                                object.alipay = message.alipay;
                            if (message.weixin != null && message.hasOwnProperty("weixin"))
                                object.weixin = message.weixin;
                            if (message.qq != null && message.hasOwnProperty("qq"))
                                object.qq = message.qq;
                            if (message.address != null && message.hasOwnProperty("address"))
                                object.address = message.address;
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                object.avatar = message.avatar;
                            if (message.birthday != null && message.hasOwnProperty("birthday"))
                                if (typeof message.birthday === "number")
                                    object.birthday = options.longs === String ? String(message.birthday) : message.birthday;
                                else
                                    object.birthday = options.longs === String ? $util.Long.prototype.toString.call(message.birthday) : options.longs === Number ? new $util.LongBits(message.birthday.low >>> 0, message.birthday.high >>> 0).toNumber() : message.birthday;
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                object.summary = message.summary;
                            if (message.signature != null && message.hasOwnProperty("signature"))
                                object.signature = message.signature;
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (typeof message.focusNumber === "number")
                                    object.focusNumber = options.longs === String ? String(message.focusNumber) : message.focusNumber;
                                else
                                    object.focusNumber = options.longs === String ? $util.Long.prototype.toString.call(message.focusNumber) : options.longs === Number ? new $util.LongBits(message.focusNumber.low >>> 0, message.focusNumber.high >>> 0).toNumber() : message.focusNumber;
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (typeof message.loveNumber === "number")
                                    object.loveNumber = options.longs === String ? String(message.loveNumber) : message.loveNumber;
                                else
                                    object.loveNumber = options.longs === String ? $util.Long.prototype.toString.call(message.loveNumber) : options.longs === Number ? new $util.LongBits(message.loveNumber.low >>> 0, message.loveNumber.high >>> 0).toNumber() : message.loveNumber;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.tokenId != null && message.hasOwnProperty("tokenId"))
                                object.tokenId = message.tokenId;
                            if (message.oldPassword != null && message.hasOwnProperty("oldPassword"))
                                object.oldPassword = message.oldPassword;
                            if (message.checkPasswd != null && message.hasOwnProperty("checkPasswd"))
                                object.checkPasswd = message.checkPasswd;
                            if (message.gender != null && message.hasOwnProperty("gender"))
                                object.gender = message.gender;
                            if (message.agreement != null && message.hasOwnProperty("agreement"))
                                object.agreement = message.agreement;
                            if (message.source != null && message.hasOwnProperty("source"))
                                object.source = message.source;
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                object.targetId = message.targetId;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.grade != null && message.hasOwnProperty("grade"))
                                object.grade = message.grade;
                            if (message.replyTime != null && message.hasOwnProperty("replyTime"))
                                if (typeof message.replyTime === "number")
                                    object.replyTime = options.longs === String ? String(message.replyTime) : message.replyTime;
                                else
                                    object.replyTime = options.longs === String ? $util.Long.prototype.toString.call(message.replyTime) : options.longs === Number ? new $util.LongBits(message.replyTime.low >>> 0, message.replyTime.high >>> 0).toNumber() : message.replyTime;
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.paymentAuthority != null && message.hasOwnProperty("paymentAuthority"))
                                object.paymentAuthority = message.paymentAuthority;
                            if (message.paymentAmount != null && message.hasOwnProperty("paymentAmount"))
                                object.paymentAmount = message.paymentAmount;
                            if (message.teacher != null && message.hasOwnProperty("teacher"))
                                object.teacher = message.teacher;
                            if (message.weixinQrcode != null && message.hasOwnProperty("weixinQrcode"))
                                object.weixinQrcode = message.weixinQrcode;
                            if (message.alipayQrcode != null && message.hasOwnProperty("alipayQrcode"))
                                object.alipayQrcode = message.alipayQrcode;
                            return object;
                        };

                        /**
                         * Converts this User to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.user.model.User
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        User.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return User;
                    })();

                    model.UserReply = (function() {

                        /**
                         * Properties of a UserReply.
                         * @memberof com.xueershangda.tianxun.user.model
                         * @interface IUserReply
                         * @property {number|null} [code] UserReply code
                         * @property {string|null} [message] UserReply message
                         * @property {Array.<com.xueershangda.tianxun.user.model.IUser>|null} [data] UserReply data
                         * @property {Array.<com.xueershangda.tianxun.question.model.IQuestion>|null} [questionList] UserReply questionList
                         */

                        /**
                         * Constructs a new UserReply.
                         * @memberof com.xueershangda.tianxun.user.model
                         * @classdesc Represents a UserReply.
                         * @implements IUserReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.user.model.IUserReply=} [properties] Properties to set
                         */
                        function UserReply(properties) {
                            this.data = [];
                            this.questionList = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * UserReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @instance
                         */
                        UserReply.prototype.code = 0;

                        /**
                         * UserReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @instance
                         */
                        UserReply.prototype.message = "";

                        /**
                         * UserReply data.
                         * @member {Array.<com.xueershangda.tianxun.user.model.IUser>} data
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @instance
                         */
                        UserReply.prototype.data = $util.emptyArray;

                        /**
                         * UserReply questionList.
                         * @member {Array.<com.xueershangda.tianxun.question.model.IQuestion>} questionList
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @instance
                         */
                        UserReply.prototype.questionList = $util.emptyArray;

                        /**
                         * Creates a new UserReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IUserReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.user.model.UserReply} UserReply instance
                         */
                        UserReply.create = function create(properties) {
                            return new UserReply(properties);
                        };

                        /**
                         * Encodes the specified UserReply message. Does not implicitly {@link com.xueershangda.tianxun.user.model.UserReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IUserReply} message UserReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UserReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.user.model.User.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.questionList != null && message.questionList.length)
                                for (let i = 0; i < message.questionList.length; ++i)
                                    $root.com.xueershangda.tianxun.question.model.Question.encode(message.questionList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified UserReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.user.model.UserReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IUserReply} message UserReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UserReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a UserReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.user.model.UserReply} UserReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UserReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.user.model.UserReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.user.model.User.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    if (!(message.questionList && message.questionList.length))
                                        message.questionList = [];
                                    message.questionList.push($root.com.xueershangda.tianxun.question.model.Question.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a UserReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.user.model.UserReply} UserReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UserReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a UserReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UserReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.user.model.User.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.questionList != null && message.hasOwnProperty("questionList")) {
                                if (!Array.isArray(message.questionList))
                                    return "questionList: array expected";
                                for (let i = 0; i < message.questionList.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.question.model.Question.verify(message.questionList[i]);
                                    if (error)
                                        return "questionList." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a UserReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.user.model.UserReply} UserReply
                         */
                        UserReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.user.model.UserReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.user.model.UserReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.user.model.UserReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.user.model.UserReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.user.model.User.fromObject(object.data[i]);
                                }
                            }
                            if (object.questionList) {
                                if (!Array.isArray(object.questionList))
                                    throw TypeError(".com.xueershangda.tianxun.user.model.UserReply.questionList: array expected");
                                message.questionList = [];
                                for (let i = 0; i < object.questionList.length; ++i) {
                                    if (typeof object.questionList[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.user.model.UserReply.questionList: object expected");
                                    message.questionList[i] = $root.com.xueershangda.tianxun.question.model.Question.fromObject(object.questionList[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a UserReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.UserReply} message UserReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UserReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.data = [];
                                object.questionList = [];
                            }
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.user.model.User.toObject(message.data[j], options);
                            }
                            if (message.questionList && message.questionList.length) {
                                object.questionList = [];
                                for (let j = 0; j < message.questionList.length; ++j)
                                    object.questionList[j] = $root.com.xueershangda.tianxun.question.model.Question.toObject(message.questionList[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this UserReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.user.model.UserReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UserReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return UserReply;
                    })();

                    model.Favorite = (function() {

                        /**
                         * Properties of a Favorite.
                         * @memberof com.xueershangda.tianxun.user.model
                         * @interface IFavorite
                         * @property {string|null} [id] Favorite id
                         * @property {number|Long|null} [favoriteDate] Favorite favoriteDate
                         * @property {string|null} [targetId] Favorite targetId
                         * @property {number|null} [targetType] Favorite targetType
                         * @property {string|null} [userId] Favorite userId
                         * @property {string|null} [remark] Favorite remark
                         * @property {string|null} [name] Favorite name
                         * @property {number|null} [state] Favorite state
                         * @property {number|null} [page] Favorite page
                         * @property {number|null} [pageSize] Favorite pageSize
                         * @property {string|null} [orderBy] Favorite orderBy
                         */

                        /**
                         * Constructs a new Favorite.
                         * @memberof com.xueershangda.tianxun.user.model
                         * @classdesc Represents a Favorite.
                         * @implements IFavorite
                         * @constructor
                         * @param {com.xueershangda.tianxun.user.model.IFavorite=} [properties] Properties to set
                         */
                        function Favorite(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Favorite id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.id = "";

                        /**
                         * Favorite favoriteDate.
                         * @member {number|Long} favoriteDate
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.favoriteDate = 0;

                        /**
                         * Favorite targetId.
                         * @member {string} targetId
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.targetId = "";

                        /**
                         * Favorite targetType.
                         * @member {number} targetType
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.targetType = 0;

                        /**
                         * Favorite userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.userId = "";

                        /**
                         * Favorite remark.
                         * @member {string} remark
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.remark = "";

                        /**
                         * Favorite name.
                         * @member {string} name
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.name = "";

                        /**
                         * Favorite state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.state = 0;

                        /**
                         * Favorite page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.page = 0;

                        /**
                         * Favorite pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.pageSize = 0;

                        /**
                         * Favorite orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         */
                        Favorite.prototype.orderBy = "";

                        /**
                         * Creates a new Favorite instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IFavorite=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.user.model.Favorite} Favorite instance
                         */
                        Favorite.create = function create(properties) {
                            return new Favorite(properties);
                        };

                        /**
                         * Encodes the specified Favorite message. Does not implicitly {@link com.xueershangda.tianxun.user.model.Favorite.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IFavorite} message Favorite message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Favorite.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.favoriteDate != null && message.hasOwnProperty("favoriteDate"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.favoriteDate);
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.targetId);
                            if (message.targetType != null && message.hasOwnProperty("targetType"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.targetType);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.userId);
                            if (message.remark != null && message.hasOwnProperty("remark"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.remark);
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.name);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.state);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.orderBy);
                            return writer;
                        };

                        /**
                         * Encodes the specified Favorite message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.user.model.Favorite.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IFavorite} message Favorite message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Favorite.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Favorite message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.user.model.Favorite} Favorite
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Favorite.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.user.model.Favorite();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.favoriteDate = reader.int64();
                                    break;
                                case 3:
                                    message.targetId = reader.string();
                                    break;
                                case 4:
                                    message.targetType = reader.int32();
                                    break;
                                case 5:
                                    message.userId = reader.string();
                                    break;
                                case 6:
                                    message.remark = reader.string();
                                    break;
                                case 7:
                                    message.name = reader.string();
                                    break;
                                case 8:
                                    message.state = reader.int32();
                                    break;
                                case 9:
                                    message.page = reader.int32();
                                    break;
                                case 10:
                                    message.pageSize = reader.int32();
                                    break;
                                case 11:
                                    message.orderBy = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Favorite message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.user.model.Favorite} Favorite
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Favorite.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Favorite message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Favorite.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.favoriteDate != null && message.hasOwnProperty("favoriteDate"))
                                if (!$util.isInteger(message.favoriteDate) && !(message.favoriteDate && $util.isInteger(message.favoriteDate.low) && $util.isInteger(message.favoriteDate.high)))
                                    return "favoriteDate: integer|Long expected";
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                if (!$util.isString(message.targetId))
                                    return "targetId: string expected";
                            if (message.targetType != null && message.hasOwnProperty("targetType"))
                                if (!$util.isInteger(message.targetType))
                                    return "targetType: integer expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.remark != null && message.hasOwnProperty("remark"))
                                if (!$util.isString(message.remark))
                                    return "remark: string expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            return null;
                        };

                        /**
                         * Creates a Favorite message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.user.model.Favorite} Favorite
                         */
                        Favorite.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.user.model.Favorite)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.user.model.Favorite();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.favoriteDate != null)
                                if ($util.Long)
                                    (message.favoriteDate = $util.Long.fromValue(object.favoriteDate)).unsigned = false;
                                else if (typeof object.favoriteDate === "string")
                                    message.favoriteDate = parseInt(object.favoriteDate, 10);
                                else if (typeof object.favoriteDate === "number")
                                    message.favoriteDate = object.favoriteDate;
                                else if (typeof object.favoriteDate === "object")
                                    message.favoriteDate = new $util.LongBits(object.favoriteDate.low >>> 0, object.favoriteDate.high >>> 0).toNumber();
                            if (object.targetId != null)
                                message.targetId = String(object.targetId);
                            if (object.targetType != null)
                                message.targetType = object.targetType | 0;
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.remark != null)
                                message.remark = String(object.remark);
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Favorite message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.Favorite} message Favorite
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Favorite.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.favoriteDate = 0;
                                object.targetId = "";
                                object.targetType = 0;
                                object.userId = "";
                                object.remark = "";
                                object.name = "";
                                object.state = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.favoriteDate != null && message.hasOwnProperty("favoriteDate"))
                                if (typeof message.favoriteDate === "number")
                                    object.favoriteDate = options.longs === String ? String(message.favoriteDate) : message.favoriteDate;
                                else
                                    object.favoriteDate = options.longs === String ? $util.Long.prototype.toString.call(message.favoriteDate) : options.longs === Number ? new $util.LongBits(message.favoriteDate.low >>> 0, message.favoriteDate.high >>> 0).toNumber() : message.favoriteDate;
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                object.targetId = message.targetId;
                            if (message.targetType != null && message.hasOwnProperty("targetType"))
                                object.targetType = message.targetType;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.remark != null && message.hasOwnProperty("remark"))
                                object.remark = message.remark;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };

                        /**
                         * Converts this Favorite to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.user.model.Favorite
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Favorite.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Favorite;
                    })();

                    model.FavoriteReply = (function() {

                        /**
                         * Properties of a FavoriteReply.
                         * @memberof com.xueershangda.tianxun.user.model
                         * @interface IFavoriteReply
                         * @property {number|null} [code] FavoriteReply code
                         * @property {string|null} [message] FavoriteReply message
                         * @property {Array.<com.xueershangda.tianxun.user.model.IFavorite>|null} [data] FavoriteReply data
                         */

                        /**
                         * Constructs a new FavoriteReply.
                         * @memberof com.xueershangda.tianxun.user.model
                         * @classdesc Represents a FavoriteReply.
                         * @implements IFavoriteReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.user.model.IFavoriteReply=} [properties] Properties to set
                         */
                        function FavoriteReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * FavoriteReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @instance
                         */
                        FavoriteReply.prototype.code = 0;

                        /**
                         * FavoriteReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @instance
                         */
                        FavoriteReply.prototype.message = "";

                        /**
                         * FavoriteReply data.
                         * @member {Array.<com.xueershangda.tianxun.user.model.IFavorite>} data
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @instance
                         */
                        FavoriteReply.prototype.data = $util.emptyArray;

                        /**
                         * Creates a new FavoriteReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IFavoriteReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.user.model.FavoriteReply} FavoriteReply instance
                         */
                        FavoriteReply.create = function create(properties) {
                            return new FavoriteReply(properties);
                        };

                        /**
                         * Encodes the specified FavoriteReply message. Does not implicitly {@link com.xueershangda.tianxun.user.model.FavoriteReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IFavoriteReply} message FavoriteReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FavoriteReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.user.model.Favorite.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified FavoriteReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.user.model.FavoriteReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.IFavoriteReply} message FavoriteReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FavoriteReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a FavoriteReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.user.model.FavoriteReply} FavoriteReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FavoriteReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.user.model.FavoriteReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.user.model.Favorite.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a FavoriteReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.user.model.FavoriteReply} FavoriteReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FavoriteReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a FavoriteReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FavoriteReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.user.model.Favorite.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a FavoriteReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.user.model.FavoriteReply} FavoriteReply
                         */
                        FavoriteReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.user.model.FavoriteReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.user.model.FavoriteReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.user.model.FavoriteReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.user.model.FavoriteReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.user.model.Favorite.fromObject(object.data[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a FavoriteReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @static
                         * @param {com.xueershangda.tianxun.user.model.FavoriteReply} message FavoriteReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FavoriteReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.user.model.Favorite.toObject(message.data[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this FavoriteReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.user.model.FavoriteReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FavoriteReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return FavoriteReply;
                    })();

                    return model;
                })();

                return user;
            })();

            tianxun.orders = (function() {

                /**
                 * Namespace orders.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const orders = {};

                orders.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.orders
                     * @namespace
                     */
                    const model = {};

                    model.Orders = (function() {

                        /**
                         * Properties of an Orders.
                         * @memberof com.xueershangda.tianxun.orders.model
                         * @interface IOrders
                         * @property {string|null} [id] Orders id
                         * @property {string|null} [targetId] Orders targetId
                         * @property {number|null} [type] Orders type
                         * @property {number|Long|null} [createDate] Orders createDate
                         * @property {number|Long|null} [payDate] Orders payDate
                         * @property {number|null} [amount] Orders amount
                         * @property {number|null} [state] Orders state
                         * @property {string|null} [buyer] Orders buyer
                         * @property {string|null} [seller] Orders seller
                         * @property {string|null} [payChannel] Orders payChannel
                         * @property {string|null} [account] Orders account
                         * @property {string|null} [remark] Orders remark
                         * @property {string|null} [subject] Orders subject
                         * @property {string|null} [tradeNo] Orders tradeNo
                         * @property {number|null} [page] Orders page
                         * @property {number|null} [pageSize] Orders pageSize
                         * @property {string|null} [orderBy] Orders orderBy
                         */

                        /**
                         * Constructs a new Orders.
                         * @memberof com.xueershangda.tianxun.orders.model
                         * @classdesc Represents an Orders.
                         * @implements IOrders
                         * @constructor
                         * @param {com.xueershangda.tianxun.orders.model.IOrders=} [properties] Properties to set
                         */
                        function Orders(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Orders id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.id = "";

                        /**
                         * Orders targetId.
                         * @member {string} targetId
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.targetId = "";

                        /**
                         * Orders type.
                         * @member {number} type
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.type = 0;

                        /**
                         * Orders createDate.
                         * @member {number|Long} createDate
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.createDate = 0;

                        /**
                         * Orders payDate.
                         * @member {number|Long} payDate
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.payDate = 0;

                        /**
                         * Orders amount.
                         * @member {number} amount
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.amount = 0;

                        /**
                         * Orders state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.state = 0;

                        /**
                         * Orders buyer.
                         * @member {string} buyer
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.buyer = "";

                        /**
                         * Orders seller.
                         * @member {string} seller
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.seller = "";

                        /**
                         * Orders payChannel.
                         * @member {string} payChannel
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.payChannel = "";

                        /**
                         * Orders account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.account = "";

                        /**
                         * Orders remark.
                         * @member {string} remark
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.remark = "";

                        /**
                         * Orders subject.
                         * @member {string} subject
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.subject = "";

                        /**
                         * Orders tradeNo.
                         * @member {string} tradeNo
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.tradeNo = "";

                        /**
                         * Orders page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.page = 0;

                        /**
                         * Orders pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.pageSize = 0;

                        /**
                         * Orders orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         */
                        Orders.prototype.orderBy = "";

                        /**
                         * Creates a new Orders instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @static
                         * @param {com.xueershangda.tianxun.orders.model.IOrders=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.orders.model.Orders} Orders instance
                         */
                        Orders.create = function create(properties) {
                            return new Orders(properties);
                        };

                        /**
                         * Encodes the specified Orders message. Does not implicitly {@link com.xueershangda.tianxun.orders.model.Orders.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @static
                         * @param {com.xueershangda.tianxun.orders.model.IOrders} message Orders message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Orders.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.targetId);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.createDate);
                            if (message.payDate != null && message.hasOwnProperty("payDate"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.payDate);
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                writer.uint32(/* id 6, wireType 1 =*/49).double(message.amount);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.state);
                            if (message.buyer != null && message.hasOwnProperty("buyer"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.buyer);
                            if (message.seller != null && message.hasOwnProperty("seller"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.seller);
                            if (message.payChannel != null && message.hasOwnProperty("payChannel"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.payChannel);
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.account);
                            if (message.remark != null && message.hasOwnProperty("remark"))
                                writer.uint32(/* id 12, wireType 2 =*/98).string(message.remark);
                            if (message.subject != null && message.hasOwnProperty("subject"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.subject);
                            if (message.tradeNo != null && message.hasOwnProperty("tradeNo"))
                                writer.uint32(/* id 14, wireType 2 =*/114).string(message.tradeNo);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 16, wireType 0 =*/128).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 17, wireType 2 =*/138).string(message.orderBy);
                            return writer;
                        };

                        /**
                         * Encodes the specified Orders message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.orders.model.Orders.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @static
                         * @param {com.xueershangda.tianxun.orders.model.IOrders} message Orders message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Orders.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Orders message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.orders.model.Orders} Orders
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Orders.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.orders.model.Orders();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.targetId = reader.string();
                                    break;
                                case 3:
                                    message.type = reader.int32();
                                    break;
                                case 4:
                                    message.createDate = reader.int64();
                                    break;
                                case 5:
                                    message.payDate = reader.int64();
                                    break;
                                case 6:
                                    message.amount = reader.double();
                                    break;
                                case 7:
                                    message.state = reader.int32();
                                    break;
                                case 8:
                                    message.buyer = reader.string();
                                    break;
                                case 9:
                                    message.seller = reader.string();
                                    break;
                                case 10:
                                    message.payChannel = reader.string();
                                    break;
                                case 11:
                                    message.account = reader.string();
                                    break;
                                case 12:
                                    message.remark = reader.string();
                                    break;
                                case 13:
                                    message.subject = reader.string();
                                    break;
                                case 14:
                                    message.tradeNo = reader.string();
                                    break;
                                case 15:
                                    message.page = reader.int32();
                                    break;
                                case 16:
                                    message.pageSize = reader.int32();
                                    break;
                                case 17:
                                    message.orderBy = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Orders message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.orders.model.Orders} Orders
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Orders.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Orders message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Orders.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                if (!$util.isString(message.targetId))
                                    return "targetId: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isInteger(message.type))
                                    return "type: integer expected";
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                    return "createDate: integer|Long expected";
                            if (message.payDate != null && message.hasOwnProperty("payDate"))
                                if (!$util.isInteger(message.payDate) && !(message.payDate && $util.isInteger(message.payDate.low) && $util.isInteger(message.payDate.high)))
                                    return "payDate: integer|Long expected";
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                if (typeof message.amount !== "number")
                                    return "amount: number expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.buyer != null && message.hasOwnProperty("buyer"))
                                if (!$util.isString(message.buyer))
                                    return "buyer: string expected";
                            if (message.seller != null && message.hasOwnProperty("seller"))
                                if (!$util.isString(message.seller))
                                    return "seller: string expected";
                            if (message.payChannel != null && message.hasOwnProperty("payChannel"))
                                if (!$util.isString(message.payChannel))
                                    return "payChannel: string expected";
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            if (message.remark != null && message.hasOwnProperty("remark"))
                                if (!$util.isString(message.remark))
                                    return "remark: string expected";
                            if (message.subject != null && message.hasOwnProperty("subject"))
                                if (!$util.isString(message.subject))
                                    return "subject: string expected";
                            if (message.tradeNo != null && message.hasOwnProperty("tradeNo"))
                                if (!$util.isString(message.tradeNo))
                                    return "tradeNo: string expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            return null;
                        };

                        /**
                         * Creates an Orders message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.orders.model.Orders} Orders
                         */
                        Orders.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.orders.model.Orders)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.orders.model.Orders();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.targetId != null)
                                message.targetId = String(object.targetId);
                            if (object.type != null)
                                message.type = object.type | 0;
                            if (object.createDate != null)
                                if ($util.Long)
                                    (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                                else if (typeof object.createDate === "string")
                                    message.createDate = parseInt(object.createDate, 10);
                                else if (typeof object.createDate === "number")
                                    message.createDate = object.createDate;
                                else if (typeof object.createDate === "object")
                                    message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                            if (object.payDate != null)
                                if ($util.Long)
                                    (message.payDate = $util.Long.fromValue(object.payDate)).unsigned = false;
                                else if (typeof object.payDate === "string")
                                    message.payDate = parseInt(object.payDate, 10);
                                else if (typeof object.payDate === "number")
                                    message.payDate = object.payDate;
                                else if (typeof object.payDate === "object")
                                    message.payDate = new $util.LongBits(object.payDate.low >>> 0, object.payDate.high >>> 0).toNumber();
                            if (object.amount != null)
                                message.amount = Number(object.amount);
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.buyer != null)
                                message.buyer = String(object.buyer);
                            if (object.seller != null)
                                message.seller = String(object.seller);
                            if (object.payChannel != null)
                                message.payChannel = String(object.payChannel);
                            if (object.account != null)
                                message.account = String(object.account);
                            if (object.remark != null)
                                message.remark = String(object.remark);
                            if (object.subject != null)
                                message.subject = String(object.subject);
                            if (object.tradeNo != null)
                                message.tradeNo = String(object.tradeNo);
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            return message;
                        };

                        /**
                         * Creates a plain object from an Orders message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @static
                         * @param {com.xueershangda.tianxun.orders.model.Orders} message Orders
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Orders.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.targetId = "";
                                object.type = 0;
                                object.createDate = 0;
                                object.payDate = 0;
                                object.amount = 0;
                                object.state = 0;
                                object.buyer = "";
                                object.seller = "";
                                object.payChannel = "";
                                object.account = "";
                                object.remark = "";
                                object.subject = "";
                                object.tradeNo = "";
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                object.targetId = message.targetId;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (typeof message.createDate === "number")
                                    object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                                else
                                    object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                            if (message.payDate != null && message.hasOwnProperty("payDate"))
                                if (typeof message.payDate === "number")
                                    object.payDate = options.longs === String ? String(message.payDate) : message.payDate;
                                else
                                    object.payDate = options.longs === String ? $util.Long.prototype.toString.call(message.payDate) : options.longs === Number ? new $util.LongBits(message.payDate.low >>> 0, message.payDate.high >>> 0).toNumber() : message.payDate;
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.buyer != null && message.hasOwnProperty("buyer"))
                                object.buyer = message.buyer;
                            if (message.seller != null && message.hasOwnProperty("seller"))
                                object.seller = message.seller;
                            if (message.payChannel != null && message.hasOwnProperty("payChannel"))
                                object.payChannel = message.payChannel;
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            if (message.remark != null && message.hasOwnProperty("remark"))
                                object.remark = message.remark;
                            if (message.subject != null && message.hasOwnProperty("subject"))
                                object.subject = message.subject;
                            if (message.tradeNo != null && message.hasOwnProperty("tradeNo"))
                                object.tradeNo = message.tradeNo;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };

                        /**
                         * Converts this Orders to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.orders.model.Orders
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Orders.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Orders;
                    })();

                    model.OrdersReply = (function() {

                        /**
                         * Properties of an OrdersReply.
                         * @memberof com.xueershangda.tianxun.orders.model
                         * @interface IOrdersReply
                         * @property {number|null} [code] OrdersReply code
                         * @property {string|null} [message] OrdersReply message
                         * @property {Array.<com.xueershangda.tianxun.orders.model.IOrders>|null} [data] OrdersReply data
                         */

                        /**
                         * Constructs a new OrdersReply.
                         * @memberof com.xueershangda.tianxun.orders.model
                         * @classdesc Represents an OrdersReply.
                         * @implements IOrdersReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.orders.model.IOrdersReply=} [properties] Properties to set
                         */
                        function OrdersReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * OrdersReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @instance
                         */
                        OrdersReply.prototype.code = 0;

                        /**
                         * OrdersReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @instance
                         */
                        OrdersReply.prototype.message = "";

                        /**
                         * OrdersReply data.
                         * @member {Array.<com.xueershangda.tianxun.orders.model.IOrders>} data
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @instance
                         */
                        OrdersReply.prototype.data = $util.emptyArray;

                        /**
                         * Creates a new OrdersReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @static
                         * @param {com.xueershangda.tianxun.orders.model.IOrdersReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.orders.model.OrdersReply} OrdersReply instance
                         */
                        OrdersReply.create = function create(properties) {
                            return new OrdersReply(properties);
                        };

                        /**
                         * Encodes the specified OrdersReply message. Does not implicitly {@link com.xueershangda.tianxun.orders.model.OrdersReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @static
                         * @param {com.xueershangda.tianxun.orders.model.IOrdersReply} message OrdersReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OrdersReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.orders.model.Orders.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified OrdersReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.orders.model.OrdersReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @static
                         * @param {com.xueershangda.tianxun.orders.model.IOrdersReply} message OrdersReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OrdersReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an OrdersReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.orders.model.OrdersReply} OrdersReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OrdersReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.orders.model.OrdersReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.orders.model.Orders.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an OrdersReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.orders.model.OrdersReply} OrdersReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OrdersReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an OrdersReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        OrdersReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.orders.model.Orders.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates an OrdersReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.orders.model.OrdersReply} OrdersReply
                         */
                        OrdersReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.orders.model.OrdersReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.orders.model.OrdersReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.orders.model.OrdersReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.orders.model.OrdersReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.orders.model.Orders.fromObject(object.data[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an OrdersReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @static
                         * @param {com.xueershangda.tianxun.orders.model.OrdersReply} message OrdersReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        OrdersReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.orders.model.Orders.toObject(message.data[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this OrdersReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.orders.model.OrdersReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        OrdersReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return OrdersReply;
                    })();

                    return model;
                })();

                return orders;
            })();

            tianxun.comment = (function() {

                /**
                 * Namespace comment.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const comment = {};

                comment.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.comment
                     * @namespace
                     */
                    const model = {};

                    model.Comment = (function() {

                        /**
                         * Properties of a Comment.
                         * @memberof com.xueershangda.tianxun.comment.model
                         * @interface IComment
                         * @property {string|null} [id] Comment id
                         * @property {string|null} [content] Comment content
                         * @property {string|null} [userId] Comment userId
                         * @property {string|null} [nickName] Comment nickName
                         * @property {number|Long|null} [commentDate] Comment commentDate
                         * @property {string|null} [articleId] Comment articleId
                         * @property {number|null} [type] Comment type
                         * @property {number|null} [orders] Comment orders
                         * @property {number|null} [state] Comment state
                         * @property {number|null} [page] Comment page
                         * @property {number|null} [pageSize] Comment pageSize
                         * @property {string|null} [orderBy] Comment orderBy
                         * @property {string|null} [targetTitle] Comment targetTitle
                         */

                        /**
                         * Constructs a new Comment.
                         * @memberof com.xueershangda.tianxun.comment.model
                         * @classdesc Represents a Comment.
                         * @implements IComment
                         * @constructor
                         * @param {com.xueershangda.tianxun.comment.model.IComment=} [properties] Properties to set
                         */
                        function Comment(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Comment id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.id = "";

                        /**
                         * Comment content.
                         * @member {string} content
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.content = "";

                        /**
                         * Comment userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.userId = "";

                        /**
                         * Comment nickName.
                         * @member {string} nickName
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.nickName = "";

                        /**
                         * Comment commentDate.
                         * @member {number|Long} commentDate
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.commentDate = 0;

                        /**
                         * Comment articleId.
                         * @member {string} articleId
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.articleId = "";

                        /**
                         * Comment type.
                         * @member {number} type
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.type = 0;

                        /**
                         * Comment orders.
                         * @member {number} orders
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.orders = 0;

                        /**
                         * Comment state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.state = 0;

                        /**
                         * Comment page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.page = 0;

                        /**
                         * Comment pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.pageSize = 0;

                        /**
                         * Comment orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.orderBy = "";

                        /**
                         * Comment targetTitle.
                         * @member {string} targetTitle
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         */
                        Comment.prototype.targetTitle = "";

                        /**
                         * Creates a new Comment instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @static
                         * @param {com.xueershangda.tianxun.comment.model.IComment=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.comment.model.Comment} Comment instance
                         */
                        Comment.create = function create(properties) {
                            return new Comment(properties);
                        };

                        /**
                         * Encodes the specified Comment message. Does not implicitly {@link com.xueershangda.tianxun.comment.model.Comment.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @static
                         * @param {com.xueershangda.tianxun.comment.model.IComment} message Comment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Comment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.content != null && message.hasOwnProperty("content"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId);
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.nickName);
                            if (message.commentDate != null && message.hasOwnProperty("commentDate"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.commentDate);
                            if (message.articleId != null && message.hasOwnProperty("articleId"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.articleId);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.type);
                            if (message.orders != null && message.hasOwnProperty("orders"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.orders);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.state);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 12, wireType 2 =*/98).string(message.orderBy);
                            if (message.targetTitle != null && message.hasOwnProperty("targetTitle"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.targetTitle);
                            return writer;
                        };

                        /**
                         * Encodes the specified Comment message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.comment.model.Comment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @static
                         * @param {com.xueershangda.tianxun.comment.model.IComment} message Comment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Comment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Comment message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.comment.model.Comment} Comment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Comment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.comment.model.Comment();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.content = reader.string();
                                    break;
                                case 3:
                                    message.userId = reader.string();
                                    break;
                                case 4:
                                    message.nickName = reader.string();
                                    break;
                                case 5:
                                    message.commentDate = reader.int64();
                                    break;
                                case 6:
                                    message.articleId = reader.string();
                                    break;
                                case 7:
                                    message.type = reader.int32();
                                    break;
                                case 8:
                                    message.orders = reader.int32();
                                    break;
                                case 9:
                                    message.state = reader.int32();
                                    break;
                                case 10:
                                    message.page = reader.int32();
                                    break;
                                case 11:
                                    message.pageSize = reader.int32();
                                    break;
                                case 12:
                                    message.orderBy = reader.string();
                                    break;
                                case 13:
                                    message.targetTitle = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Comment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.comment.model.Comment} Comment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Comment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Comment message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Comment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.content != null && message.hasOwnProperty("content"))
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                if (!$util.isString(message.nickName))
                                    return "nickName: string expected";
                            if (message.commentDate != null && message.hasOwnProperty("commentDate"))
                                if (!$util.isInteger(message.commentDate) && !(message.commentDate && $util.isInteger(message.commentDate.low) && $util.isInteger(message.commentDate.high)))
                                    return "commentDate: integer|Long expected";
                            if (message.articleId != null && message.hasOwnProperty("articleId"))
                                if (!$util.isString(message.articleId))
                                    return "articleId: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isInteger(message.type))
                                    return "type: integer expected";
                            if (message.orders != null && message.hasOwnProperty("orders"))
                                if (!$util.isInteger(message.orders))
                                    return "orders: integer expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.targetTitle != null && message.hasOwnProperty("targetTitle"))
                                if (!$util.isString(message.targetTitle))
                                    return "targetTitle: string expected";
                            return null;
                        };

                        /**
                         * Creates a Comment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.comment.model.Comment} Comment
                         */
                        Comment.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.comment.model.Comment)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.comment.model.Comment();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.nickName != null)
                                message.nickName = String(object.nickName);
                            if (object.commentDate != null)
                                if ($util.Long)
                                    (message.commentDate = $util.Long.fromValue(object.commentDate)).unsigned = false;
                                else if (typeof object.commentDate === "string")
                                    message.commentDate = parseInt(object.commentDate, 10);
                                else if (typeof object.commentDate === "number")
                                    message.commentDate = object.commentDate;
                                else if (typeof object.commentDate === "object")
                                    message.commentDate = new $util.LongBits(object.commentDate.low >>> 0, object.commentDate.high >>> 0).toNumber();
                            if (object.articleId != null)
                                message.articleId = String(object.articleId);
                            if (object.type != null)
                                message.type = object.type | 0;
                            if (object.orders != null)
                                message.orders = object.orders | 0;
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.targetTitle != null)
                                message.targetTitle = String(object.targetTitle);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Comment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @static
                         * @param {com.xueershangda.tianxun.comment.model.Comment} message Comment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Comment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.content = "";
                                object.userId = "";
                                object.nickName = "";
                                object.commentDate = 0;
                                object.articleId = "";
                                object.type = 0;
                                object.orders = 0;
                                object.state = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.targetTitle = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.content != null && message.hasOwnProperty("content"))
                                object.content = message.content;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                object.nickName = message.nickName;
                            if (message.commentDate != null && message.hasOwnProperty("commentDate"))
                                if (typeof message.commentDate === "number")
                                    object.commentDate = options.longs === String ? String(message.commentDate) : message.commentDate;
                                else
                                    object.commentDate = options.longs === String ? $util.Long.prototype.toString.call(message.commentDate) : options.longs === Number ? new $util.LongBits(message.commentDate.low >>> 0, message.commentDate.high >>> 0).toNumber() : message.commentDate;
                            if (message.articleId != null && message.hasOwnProperty("articleId"))
                                object.articleId = message.articleId;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.orders != null && message.hasOwnProperty("orders"))
                                object.orders = message.orders;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.targetTitle != null && message.hasOwnProperty("targetTitle"))
                                object.targetTitle = message.targetTitle;
                            return object;
                        };

                        /**
                         * Converts this Comment to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.comment.model.Comment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Comment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Comment;
                    })();

                    model.CommentReply = (function() {

                        /**
                         * Properties of a CommentReply.
                         * @memberof com.xueershangda.tianxun.comment.model
                         * @interface ICommentReply
                         * @property {number|null} [code] CommentReply code
                         * @property {string|null} [message] CommentReply message
                         * @property {Array.<com.xueershangda.tianxun.comment.model.IComment>|null} [data] CommentReply data
                         */

                        /**
                         * Constructs a new CommentReply.
                         * @memberof com.xueershangda.tianxun.comment.model
                         * @classdesc Represents a CommentReply.
                         * @implements ICommentReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.comment.model.ICommentReply=} [properties] Properties to set
                         */
                        function CommentReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * CommentReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @instance
                         */
                        CommentReply.prototype.code = 0;

                        /**
                         * CommentReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @instance
                         */
                        CommentReply.prototype.message = "";

                        /**
                         * CommentReply data.
                         * @member {Array.<com.xueershangda.tianxun.comment.model.IComment>} data
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @instance
                         */
                        CommentReply.prototype.data = $util.emptyArray;

                        /**
                         * Creates a new CommentReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @static
                         * @param {com.xueershangda.tianxun.comment.model.ICommentReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.comment.model.CommentReply} CommentReply instance
                         */
                        CommentReply.create = function create(properties) {
                            return new CommentReply(properties);
                        };

                        /**
                         * Encodes the specified CommentReply message. Does not implicitly {@link com.xueershangda.tianxun.comment.model.CommentReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @static
                         * @param {com.xueershangda.tianxun.comment.model.ICommentReply} message CommentReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CommentReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.comment.model.Comment.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified CommentReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.comment.model.CommentReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @static
                         * @param {com.xueershangda.tianxun.comment.model.ICommentReply} message CommentReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CommentReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a CommentReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.comment.model.CommentReply} CommentReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CommentReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.comment.model.CommentReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.comment.model.Comment.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a CommentReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.comment.model.CommentReply} CommentReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CommentReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a CommentReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CommentReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.comment.model.Comment.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a CommentReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.comment.model.CommentReply} CommentReply
                         */
                        CommentReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.comment.model.CommentReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.comment.model.CommentReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.comment.model.CommentReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.comment.model.CommentReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.comment.model.Comment.fromObject(object.data[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a CommentReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @static
                         * @param {com.xueershangda.tianxun.comment.model.CommentReply} message CommentReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CommentReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.comment.model.Comment.toObject(message.data[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this CommentReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.comment.model.CommentReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CommentReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return CommentReply;
                    })();

                    return model;
                })();

                return comment;
            })();

            tianxun.game = (function() {

                /**
                 * Namespace game.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const game = {};

                game.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.game
                     * @namespace
                     */
                    const model = {};

                    model.Equipment = (function() {

                        /**
                         * Properties of an Equipment.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @interface IEquipment
                         * @property {string|null} [id] Equipment id
                         * @property {string|null} [name] Equipment name
                         * @property {string|null} [occupation] Equipment occupation
                         * @property {string|null} [type] Equipment type
                         * @property {number|null} [damage] Equipment damage
                         * @property {number|null} [defense] Equipment defense
                         * @property {number|null} [healthPoint] Equipment healthPoint
                         * @property {string|null} [userId] Equipment userId
                         * @property {number|null} [state] Equipment state
                         * @property {boolean|null} [dressed] Equipment dressed
                         * @property {number|null} [page] Equipment page
                         * @property {number|null} [pageSize] Equipment pageSize
                         * @property {string|null} [orderBy] Equipment orderBy
                         * @property {number|null} [level] Equipment level
                         * @property {string|null} [coverImage] Equipment coverImage
                         * @property {string|null} [summary] Equipment summary
                         * @property {string|null} [text] Equipment text
                         * @property {string|null} [itemsId] Equipment itemsId
                         * @property {number|null} [heatDegree] Equipment heatDegree
                         */

                        /**
                         * Constructs a new Equipment.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @classdesc Represents an Equipment.
                         * @implements IEquipment
                         * @constructor
                         * @param {com.xueershangda.tianxun.game.model.IEquipment=} [properties] Properties to set
                         */
                        function Equipment(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Equipment id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.id = "";

                        /**
                         * Equipment name.
                         * @member {string} name
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.name = "";

                        /**
                         * Equipment occupation.
                         * @member {string} occupation
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.occupation = "";

                        /**
                         * Equipment type.
                         * @member {string} type
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.type = "";

                        /**
                         * Equipment damage.
                         * @member {number} damage
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.damage = 0;

                        /**
                         * Equipment defense.
                         * @member {number} defense
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.defense = 0;

                        /**
                         * Equipment healthPoint.
                         * @member {number} healthPoint
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.healthPoint = 0;

                        /**
                         * Equipment userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.userId = "";

                        /**
                         * Equipment state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.state = 0;

                        /**
                         * Equipment dressed.
                         * @member {boolean} dressed
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.dressed = false;

                        /**
                         * Equipment page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.page = 0;

                        /**
                         * Equipment pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.pageSize = 0;

                        /**
                         * Equipment orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.orderBy = "";

                        /**
                         * Equipment level.
                         * @member {number} level
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.level = 0;

                        /**
                         * Equipment coverImage.
                         * @member {string} coverImage
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.coverImage = "";

                        /**
                         * Equipment summary.
                         * @member {string} summary
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.summary = "";

                        /**
                         * Equipment text.
                         * @member {string} text
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.text = "";

                        /**
                         * Equipment itemsId.
                         * @member {string} itemsId
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.itemsId = "";

                        /**
                         * Equipment heatDegree.
                         * @member {number} heatDegree
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         */
                        Equipment.prototype.heatDegree = 0;

                        /**
                         * Creates a new Equipment instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IEquipment=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.game.model.Equipment} Equipment instance
                         */
                        Equipment.create = function create(properties) {
                            return new Equipment(properties);
                        };

                        /**
                         * Encodes the specified Equipment message. Does not implicitly {@link com.xueershangda.tianxun.game.model.Equipment.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IEquipment} message Equipment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Equipment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                            if (message.occupation != null && message.hasOwnProperty("occupation"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.occupation);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.type);
                            if (message.damage != null && message.hasOwnProperty("damage"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.damage);
                            if (message.defense != null && message.hasOwnProperty("defense"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.defense);
                            if (message.healthPoint != null && message.hasOwnProperty("healthPoint"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.healthPoint);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.userId);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.state);
                            if (message.dressed != null && message.hasOwnProperty("dressed"))
                                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.dressed);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.orderBy);
                            if (message.level != null && message.hasOwnProperty("level"))
                                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.level);
                            if (message.coverImage != null && message.hasOwnProperty("coverImage"))
                                writer.uint32(/* id 15, wireType 2 =*/122).string(message.coverImage);
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                writer.uint32(/* id 16, wireType 2 =*/130).string(message.summary);
                            if (message.text != null && message.hasOwnProperty("text"))
                                writer.uint32(/* id 17, wireType 2 =*/138).string(message.text);
                            if (message.itemsId != null && message.hasOwnProperty("itemsId"))
                                writer.uint32(/* id 18, wireType 2 =*/146).string(message.itemsId);
                            if (message.heatDegree != null && message.hasOwnProperty("heatDegree"))
                                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.heatDegree);
                            return writer;
                        };

                        /**
                         * Encodes the specified Equipment message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.game.model.Equipment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IEquipment} message Equipment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Equipment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Equipment message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.game.model.Equipment} Equipment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Equipment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.game.model.Equipment();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.name = reader.string();
                                    break;
                                case 3:
                                    message.occupation = reader.string();
                                    break;
                                case 4:
                                    message.type = reader.string();
                                    break;
                                case 5:
                                    message.damage = reader.int32();
                                    break;
                                case 6:
                                    message.defense = reader.int32();
                                    break;
                                case 7:
                                    message.healthPoint = reader.int32();
                                    break;
                                case 8:
                                    message.userId = reader.string();
                                    break;
                                case 9:
                                    message.state = reader.int32();
                                    break;
                                case 10:
                                    message.dressed = reader.bool();
                                    break;
                                case 11:
                                    message.page = reader.int32();
                                    break;
                                case 12:
                                    message.pageSize = reader.int32();
                                    break;
                                case 13:
                                    message.orderBy = reader.string();
                                    break;
                                case 14:
                                    message.level = reader.int32();
                                    break;
                                case 15:
                                    message.coverImage = reader.string();
                                    break;
                                case 16:
                                    message.summary = reader.string();
                                    break;
                                case 17:
                                    message.text = reader.string();
                                    break;
                                case 18:
                                    message.itemsId = reader.string();
                                    break;
                                case 19:
                                    message.heatDegree = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Equipment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.game.model.Equipment} Equipment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Equipment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Equipment message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Equipment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.occupation != null && message.hasOwnProperty("occupation"))
                                if (!$util.isString(message.occupation))
                                    return "occupation: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.damage != null && message.hasOwnProperty("damage"))
                                if (!$util.isInteger(message.damage))
                                    return "damage: integer expected";
                            if (message.defense != null && message.hasOwnProperty("defense"))
                                if (!$util.isInteger(message.defense))
                                    return "defense: integer expected";
                            if (message.healthPoint != null && message.hasOwnProperty("healthPoint"))
                                if (!$util.isInteger(message.healthPoint))
                                    return "healthPoint: integer expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.dressed != null && message.hasOwnProperty("dressed"))
                                if (typeof message.dressed !== "boolean")
                                    return "dressed: boolean expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.level != null && message.hasOwnProperty("level"))
                                if (!$util.isInteger(message.level))
                                    return "level: integer expected";
                            if (message.coverImage != null && message.hasOwnProperty("coverImage"))
                                if (!$util.isString(message.coverImage))
                                    return "coverImage: string expected";
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                if (!$util.isString(message.summary))
                                    return "summary: string expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.itemsId != null && message.hasOwnProperty("itemsId"))
                                if (!$util.isString(message.itemsId))
                                    return "itemsId: string expected";
                            if (message.heatDegree != null && message.hasOwnProperty("heatDegree"))
                                if (!$util.isInteger(message.heatDegree))
                                    return "heatDegree: integer expected";
                            return null;
                        };

                        /**
                         * Creates an Equipment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.game.model.Equipment} Equipment
                         */
                        Equipment.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.game.model.Equipment)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.game.model.Equipment();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.occupation != null)
                                message.occupation = String(object.occupation);
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.damage != null)
                                message.damage = object.damage | 0;
                            if (object.defense != null)
                                message.defense = object.defense | 0;
                            if (object.healthPoint != null)
                                message.healthPoint = object.healthPoint | 0;
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.dressed != null)
                                message.dressed = Boolean(object.dressed);
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.level != null)
                                message.level = object.level | 0;
                            if (object.coverImage != null)
                                message.coverImage = String(object.coverImage);
                            if (object.summary != null)
                                message.summary = String(object.summary);
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.itemsId != null)
                                message.itemsId = String(object.itemsId);
                            if (object.heatDegree != null)
                                message.heatDegree = object.heatDegree | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from an Equipment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.Equipment} message Equipment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Equipment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.name = "";
                                object.occupation = "";
                                object.type = "";
                                object.damage = 0;
                                object.defense = 0;
                                object.healthPoint = 0;
                                object.userId = "";
                                object.state = 0;
                                object.dressed = false;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.level = 0;
                                object.coverImage = "";
                                object.summary = "";
                                object.text = "";
                                object.itemsId = "";
                                object.heatDegree = 0;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.occupation != null && message.hasOwnProperty("occupation"))
                                object.occupation = message.occupation;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.damage != null && message.hasOwnProperty("damage"))
                                object.damage = message.damage;
                            if (message.defense != null && message.hasOwnProperty("defense"))
                                object.defense = message.defense;
                            if (message.healthPoint != null && message.hasOwnProperty("healthPoint"))
                                object.healthPoint = message.healthPoint;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.dressed != null && message.hasOwnProperty("dressed"))
                                object.dressed = message.dressed;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.level != null && message.hasOwnProperty("level"))
                                object.level = message.level;
                            if (message.coverImage != null && message.hasOwnProperty("coverImage"))
                                object.coverImage = message.coverImage;
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                object.summary = message.summary;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.itemsId != null && message.hasOwnProperty("itemsId"))
                                object.itemsId = message.itemsId;
                            if (message.heatDegree != null && message.hasOwnProperty("heatDegree"))
                                object.heatDegree = message.heatDegree;
                            return object;
                        };

                        /**
                         * Converts this Equipment to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.game.model.Equipment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Equipment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Equipment;
                    })();

                    model.EquipmentReply = (function() {

                        /**
                         * Properties of an EquipmentReply.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @interface IEquipmentReply
                         * @property {number|null} [code] EquipmentReply code
                         * @property {string|null} [message] EquipmentReply message
                         * @property {Array.<com.xueershangda.tianxun.game.model.IEquipment>|null} [data] EquipmentReply data
                         */

                        /**
                         * Constructs a new EquipmentReply.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @classdesc Represents an EquipmentReply.
                         * @implements IEquipmentReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.game.model.IEquipmentReply=} [properties] Properties to set
                         */
                        function EquipmentReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * EquipmentReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @instance
                         */
                        EquipmentReply.prototype.code = 0;

                        /**
                         * EquipmentReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @instance
                         */
                        EquipmentReply.prototype.message = "";

                        /**
                         * EquipmentReply data.
                         * @member {Array.<com.xueershangda.tianxun.game.model.IEquipment>} data
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @instance
                         */
                        EquipmentReply.prototype.data = $util.emptyArray;

                        /**
                         * Creates a new EquipmentReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IEquipmentReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.game.model.EquipmentReply} EquipmentReply instance
                         */
                        EquipmentReply.create = function create(properties) {
                            return new EquipmentReply(properties);
                        };

                        /**
                         * Encodes the specified EquipmentReply message. Does not implicitly {@link com.xueershangda.tianxun.game.model.EquipmentReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IEquipmentReply} message EquipmentReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        EquipmentReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.game.model.Equipment.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified EquipmentReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.game.model.EquipmentReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IEquipmentReply} message EquipmentReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        EquipmentReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an EquipmentReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.game.model.EquipmentReply} EquipmentReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        EquipmentReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.game.model.EquipmentReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.game.model.Equipment.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an EquipmentReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.game.model.EquipmentReply} EquipmentReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        EquipmentReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an EquipmentReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        EquipmentReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.game.model.Equipment.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates an EquipmentReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.game.model.EquipmentReply} EquipmentReply
                         */
                        EquipmentReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.game.model.EquipmentReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.game.model.EquipmentReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.game.model.EquipmentReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.game.model.EquipmentReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.game.model.Equipment.fromObject(object.data[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an EquipmentReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.EquipmentReply} message EquipmentReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        EquipmentReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.game.model.Equipment.toObject(message.data[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this EquipmentReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.game.model.EquipmentReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        EquipmentReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return EquipmentReply;
                    })();

                    model.Characters = (function() {

                        /**
                         * Properties of a Characters.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @interface ICharacters
                         * @property {string|null} [id] Characters id
                         * @property {string|null} [userId] Characters userId
                         * @property {string|null} [arms] Characters arms
                         * @property {string|null} [armour] Characters armour
                         * @property {string|null} [gaiter] Characters gaiter
                         * @property {string|null} [shoes] Characters shoes
                         * @property {string|null} [helmet] Characters helmet
                         * @property {string|null} [wrister] Characters wrister
                         * @property {string|null} [ringRight] Characters ringRight
                         * @property {string|null} [ringLeft] Characters ringLeft
                         * @property {string|null} [necklace] Characters necklace
                         * @property {string|null} [belt] Characters belt
                         * @property {string|null} [shoulder] Characters shoulder
                         * @property {number|null} [damage] Characters damage
                         * @property {number|null} [defense] Characters defense
                         * @property {number|null} [healthPoint] Characters healthPoint
                         * @property {number|null} [grade] Characters grade
                         * @property {number|Long|null} [experience] Characters experience
                         * @property {number|null} [state] Characters state
                         * @property {number|null} [page] Characters page
                         * @property {number|null} [pageSize] Characters pageSize
                         * @property {string|null} [orderBy] Characters orderBy
                         * @property {string|null} [nickName] Characters nickName
                         * @property {string|null} [account] Characters account
                         * @property {string|null} [avatar] Characters avatar
                         * @property {string|null} [text] Characters text
                         * @property {number|null} [attack] Characters attack
                         * @property {number|null} [currentPoint] Characters currentPoint
                         * @property {number|Long|null} [gradeExperience] Characters gradeExperience
                         * @property {number|null} [powerValue] Characters powerValue
                         */

                        /**
                         * Constructs a new Characters.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @classdesc Represents a Characters.
                         * @implements ICharacters
                         * @constructor
                         * @param {com.xueershangda.tianxun.game.model.ICharacters=} [properties] Properties to set
                         */
                        function Characters(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Characters id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.id = "";

                        /**
                         * Characters userId.
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.userId = "";

                        /**
                         * Characters arms.
                         * @member {string} arms
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.arms = "";

                        /**
                         * Characters armour.
                         * @member {string} armour
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.armour = "";

                        /**
                         * Characters gaiter.
                         * @member {string} gaiter
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.gaiter = "";

                        /**
                         * Characters shoes.
                         * @member {string} shoes
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.shoes = "";

                        /**
                         * Characters helmet.
                         * @member {string} helmet
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.helmet = "";

                        /**
                         * Characters wrister.
                         * @member {string} wrister
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.wrister = "";

                        /**
                         * Characters ringRight.
                         * @member {string} ringRight
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.ringRight = "";

                        /**
                         * Characters ringLeft.
                         * @member {string} ringLeft
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.ringLeft = "";

                        /**
                         * Characters necklace.
                         * @member {string} necklace
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.necklace = "";

                        /**
                         * Characters belt.
                         * @member {string} belt
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.belt = "";

                        /**
                         * Characters shoulder.
                         * @member {string} shoulder
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.shoulder = "";

                        /**
                         * Characters damage.
                         * @member {number} damage
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.damage = 0;

                        /**
                         * Characters defense.
                         * @member {number} defense
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.defense = 0;

                        /**
                         * Characters healthPoint.
                         * @member {number} healthPoint
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.healthPoint = 0;

                        /**
                         * Characters grade.
                         * @member {number} grade
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.grade = 0;

                        /**
                         * Characters experience.
                         * @member {number|Long} experience
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.experience = 0;

                        /**
                         * Characters state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.state = 0;

                        /**
                         * Characters page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.page = 0;

                        /**
                         * Characters pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.pageSize = 0;

                        /**
                         * Characters orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.orderBy = "";

                        /**
                         * Characters nickName.
                         * @member {string} nickName
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.nickName = "";

                        /**
                         * Characters account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.account = "";

                        /**
                         * Characters avatar.
                         * @member {string} avatar
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.avatar = "";

                        /**
                         * Characters text.
                         * @member {string} text
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.text = "";

                        /**
                         * Characters attack.
                         * @member {number} attack
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.attack = 0;

                        /**
                         * Characters currentPoint.
                         * @member {number} currentPoint
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.currentPoint = 0;

                        /**
                         * Characters gradeExperience.
                         * @member {number|Long} gradeExperience
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.gradeExperience = 0;

                        /**
                         * Characters powerValue.
                         * @member {number} powerValue
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         */
                        Characters.prototype.powerValue = 0;

                        /**
                         * Creates a new Characters instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.ICharacters=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.game.model.Characters} Characters instance
                         */
                        Characters.create = function create(properties) {
                            return new Characters(properties);
                        };

                        /**
                         * Encodes the specified Characters message. Does not implicitly {@link com.xueershangda.tianxun.game.model.Characters.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.ICharacters} message Characters message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Characters.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);
                            if (message.arms != null && message.hasOwnProperty("arms"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.arms);
                            if (message.armour != null && message.hasOwnProperty("armour"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.armour);
                            if (message.gaiter != null && message.hasOwnProperty("gaiter"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.gaiter);
                            if (message.shoes != null && message.hasOwnProperty("shoes"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.shoes);
                            if (message.helmet != null && message.hasOwnProperty("helmet"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.helmet);
                            if (message.wrister != null && message.hasOwnProperty("wrister"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.wrister);
                            if (message.ringRight != null && message.hasOwnProperty("ringRight"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.ringRight);
                            if (message.ringLeft != null && message.hasOwnProperty("ringLeft"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.ringLeft);
                            if (message.necklace != null && message.hasOwnProperty("necklace"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.necklace);
                            if (message.belt != null && message.hasOwnProperty("belt"))
                                writer.uint32(/* id 12, wireType 2 =*/98).string(message.belt);
                            if (message.shoulder != null && message.hasOwnProperty("shoulder"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.shoulder);
                            if (message.damage != null && message.hasOwnProperty("damage"))
                                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.damage);
                            if (message.defense != null && message.hasOwnProperty("defense"))
                                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.defense);
                            if (message.healthPoint != null && message.hasOwnProperty("healthPoint"))
                                writer.uint32(/* id 16, wireType 0 =*/128).int32(message.healthPoint);
                            if (message.grade != null && message.hasOwnProperty("grade"))
                                writer.uint32(/* id 17, wireType 0 =*/136).int32(message.grade);
                            if (message.experience != null && message.hasOwnProperty("experience"))
                                writer.uint32(/* id 18, wireType 0 =*/144).int64(message.experience);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.state);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 21, wireType 0 =*/168).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 22, wireType 2 =*/178).string(message.orderBy);
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                writer.uint32(/* id 23, wireType 2 =*/186).string(message.nickName);
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 24, wireType 2 =*/194).string(message.account);
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                writer.uint32(/* id 25, wireType 2 =*/202).string(message.avatar);
                            if (message.text != null && message.hasOwnProperty("text"))
                                writer.uint32(/* id 26, wireType 2 =*/210).string(message.text);
                            if (message.attack != null && message.hasOwnProperty("attack"))
                                writer.uint32(/* id 27, wireType 0 =*/216).int32(message.attack);
                            if (message.currentPoint != null && message.hasOwnProperty("currentPoint"))
                                writer.uint32(/* id 28, wireType 0 =*/224).int32(message.currentPoint);
                            if (message.gradeExperience != null && message.hasOwnProperty("gradeExperience"))
                                writer.uint32(/* id 29, wireType 0 =*/232).int64(message.gradeExperience);
                            if (message.powerValue != null && message.hasOwnProperty("powerValue"))
                                writer.uint32(/* id 30, wireType 0 =*/240).int32(message.powerValue);
                            return writer;
                        };

                        /**
                         * Encodes the specified Characters message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.game.model.Characters.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.ICharacters} message Characters message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Characters.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Characters message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.game.model.Characters} Characters
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Characters.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.game.model.Characters();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.userId = reader.string();
                                    break;
                                case 3:
                                    message.arms = reader.string();
                                    break;
                                case 4:
                                    message.armour = reader.string();
                                    break;
                                case 5:
                                    message.gaiter = reader.string();
                                    break;
                                case 6:
                                    message.shoes = reader.string();
                                    break;
                                case 7:
                                    message.helmet = reader.string();
                                    break;
                                case 8:
                                    message.wrister = reader.string();
                                    break;
                                case 9:
                                    message.ringRight = reader.string();
                                    break;
                                case 10:
                                    message.ringLeft = reader.string();
                                    break;
                                case 11:
                                    message.necklace = reader.string();
                                    break;
                                case 12:
                                    message.belt = reader.string();
                                    break;
                                case 13:
                                    message.shoulder = reader.string();
                                    break;
                                case 14:
                                    message.damage = reader.int32();
                                    break;
                                case 15:
                                    message.defense = reader.int32();
                                    break;
                                case 16:
                                    message.healthPoint = reader.int32();
                                    break;
                                case 17:
                                    message.grade = reader.int32();
                                    break;
                                case 18:
                                    message.experience = reader.int64();
                                    break;
                                case 19:
                                    message.state = reader.int32();
                                    break;
                                case 20:
                                    message.page = reader.int32();
                                    break;
                                case 21:
                                    message.pageSize = reader.int32();
                                    break;
                                case 22:
                                    message.orderBy = reader.string();
                                    break;
                                case 23:
                                    message.nickName = reader.string();
                                    break;
                                case 24:
                                    message.account = reader.string();
                                    break;
                                case 25:
                                    message.avatar = reader.string();
                                    break;
                                case 26:
                                    message.text = reader.string();
                                    break;
                                case 27:
                                    message.attack = reader.int32();
                                    break;
                                case 28:
                                    message.currentPoint = reader.int32();
                                    break;
                                case 29:
                                    message.gradeExperience = reader.int64();
                                    break;
                                case 30:
                                    message.powerValue = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Characters message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.game.model.Characters} Characters
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Characters.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Characters message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Characters.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.arms != null && message.hasOwnProperty("arms"))
                                if (!$util.isString(message.arms))
                                    return "arms: string expected";
                            if (message.armour != null && message.hasOwnProperty("armour"))
                                if (!$util.isString(message.armour))
                                    return "armour: string expected";
                            if (message.gaiter != null && message.hasOwnProperty("gaiter"))
                                if (!$util.isString(message.gaiter))
                                    return "gaiter: string expected";
                            if (message.shoes != null && message.hasOwnProperty("shoes"))
                                if (!$util.isString(message.shoes))
                                    return "shoes: string expected";
                            if (message.helmet != null && message.hasOwnProperty("helmet"))
                                if (!$util.isString(message.helmet))
                                    return "helmet: string expected";
                            if (message.wrister != null && message.hasOwnProperty("wrister"))
                                if (!$util.isString(message.wrister))
                                    return "wrister: string expected";
                            if (message.ringRight != null && message.hasOwnProperty("ringRight"))
                                if (!$util.isString(message.ringRight))
                                    return "ringRight: string expected";
                            if (message.ringLeft != null && message.hasOwnProperty("ringLeft"))
                                if (!$util.isString(message.ringLeft))
                                    return "ringLeft: string expected";
                            if (message.necklace != null && message.hasOwnProperty("necklace"))
                                if (!$util.isString(message.necklace))
                                    return "necklace: string expected";
                            if (message.belt != null && message.hasOwnProperty("belt"))
                                if (!$util.isString(message.belt))
                                    return "belt: string expected";
                            if (message.shoulder != null && message.hasOwnProperty("shoulder"))
                                if (!$util.isString(message.shoulder))
                                    return "shoulder: string expected";
                            if (message.damage != null && message.hasOwnProperty("damage"))
                                if (!$util.isInteger(message.damage))
                                    return "damage: integer expected";
                            if (message.defense != null && message.hasOwnProperty("defense"))
                                if (!$util.isInteger(message.defense))
                                    return "defense: integer expected";
                            if (message.healthPoint != null && message.hasOwnProperty("healthPoint"))
                                if (!$util.isInteger(message.healthPoint))
                                    return "healthPoint: integer expected";
                            if (message.grade != null && message.hasOwnProperty("grade"))
                                if (!$util.isInteger(message.grade))
                                    return "grade: integer expected";
                            if (message.experience != null && message.hasOwnProperty("experience"))
                                if (!$util.isInteger(message.experience) && !(message.experience && $util.isInteger(message.experience.low) && $util.isInteger(message.experience.high)))
                                    return "experience: integer|Long expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                if (!$util.isString(message.nickName))
                                    return "nickName: string expected";
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                if (!$util.isString(message.avatar))
                                    return "avatar: string expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.attack != null && message.hasOwnProperty("attack"))
                                if (!$util.isInteger(message.attack))
                                    return "attack: integer expected";
                            if (message.currentPoint != null && message.hasOwnProperty("currentPoint"))
                                if (!$util.isInteger(message.currentPoint))
                                    return "currentPoint: integer expected";
                            if (message.gradeExperience != null && message.hasOwnProperty("gradeExperience"))
                                if (!$util.isInteger(message.gradeExperience) && !(message.gradeExperience && $util.isInteger(message.gradeExperience.low) && $util.isInteger(message.gradeExperience.high)))
                                    return "gradeExperience: integer|Long expected";
                            if (message.powerValue != null && message.hasOwnProperty("powerValue"))
                                if (!$util.isInteger(message.powerValue))
                                    return "powerValue: integer expected";
                            return null;
                        };

                        /**
                         * Creates a Characters message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.game.model.Characters} Characters
                         */
                        Characters.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.game.model.Characters)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.game.model.Characters();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.arms != null)
                                message.arms = String(object.arms);
                            if (object.armour != null)
                                message.armour = String(object.armour);
                            if (object.gaiter != null)
                                message.gaiter = String(object.gaiter);
                            if (object.shoes != null)
                                message.shoes = String(object.shoes);
                            if (object.helmet != null)
                                message.helmet = String(object.helmet);
                            if (object.wrister != null)
                                message.wrister = String(object.wrister);
                            if (object.ringRight != null)
                                message.ringRight = String(object.ringRight);
                            if (object.ringLeft != null)
                                message.ringLeft = String(object.ringLeft);
                            if (object.necklace != null)
                                message.necklace = String(object.necklace);
                            if (object.belt != null)
                                message.belt = String(object.belt);
                            if (object.shoulder != null)
                                message.shoulder = String(object.shoulder);
                            if (object.damage != null)
                                message.damage = object.damage | 0;
                            if (object.defense != null)
                                message.defense = object.defense | 0;
                            if (object.healthPoint != null)
                                message.healthPoint = object.healthPoint | 0;
                            if (object.grade != null)
                                message.grade = object.grade | 0;
                            if (object.experience != null)
                                if ($util.Long)
                                    (message.experience = $util.Long.fromValue(object.experience)).unsigned = false;
                                else if (typeof object.experience === "string")
                                    message.experience = parseInt(object.experience, 10);
                                else if (typeof object.experience === "number")
                                    message.experience = object.experience;
                                else if (typeof object.experience === "object")
                                    message.experience = new $util.LongBits(object.experience.low >>> 0, object.experience.high >>> 0).toNumber();
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.nickName != null)
                                message.nickName = String(object.nickName);
                            if (object.account != null)
                                message.account = String(object.account);
                            if (object.avatar != null)
                                message.avatar = String(object.avatar);
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.attack != null)
                                message.attack = object.attack | 0;
                            if (object.currentPoint != null)
                                message.currentPoint = object.currentPoint | 0;
                            if (object.gradeExperience != null)
                                if ($util.Long)
                                    (message.gradeExperience = $util.Long.fromValue(object.gradeExperience)).unsigned = false;
                                else if (typeof object.gradeExperience === "string")
                                    message.gradeExperience = parseInt(object.gradeExperience, 10);
                                else if (typeof object.gradeExperience === "number")
                                    message.gradeExperience = object.gradeExperience;
                                else if (typeof object.gradeExperience === "object")
                                    message.gradeExperience = new $util.LongBits(object.gradeExperience.low >>> 0, object.gradeExperience.high >>> 0).toNumber();
                            if (object.powerValue != null)
                                message.powerValue = object.powerValue | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a Characters message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.Characters} message Characters
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Characters.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.userId = "";
                                object.arms = "";
                                object.armour = "";
                                object.gaiter = "";
                                object.shoes = "";
                                object.helmet = "";
                                object.wrister = "";
                                object.ringRight = "";
                                object.ringLeft = "";
                                object.necklace = "";
                                object.belt = "";
                                object.shoulder = "";
                                object.damage = 0;
                                object.defense = 0;
                                object.healthPoint = 0;
                                object.grade = 0;
                                object.experience = 0;
                                object.state = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.nickName = "";
                                object.account = "";
                                object.avatar = "";
                                object.text = "";
                                object.attack = 0;
                                object.currentPoint = 0;
                                object.gradeExperience = 0;
                                object.powerValue = 0;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.arms != null && message.hasOwnProperty("arms"))
                                object.arms = message.arms;
                            if (message.armour != null && message.hasOwnProperty("armour"))
                                object.armour = message.armour;
                            if (message.gaiter != null && message.hasOwnProperty("gaiter"))
                                object.gaiter = message.gaiter;
                            if (message.shoes != null && message.hasOwnProperty("shoes"))
                                object.shoes = message.shoes;
                            if (message.helmet != null && message.hasOwnProperty("helmet"))
                                object.helmet = message.helmet;
                            if (message.wrister != null && message.hasOwnProperty("wrister"))
                                object.wrister = message.wrister;
                            if (message.ringRight != null && message.hasOwnProperty("ringRight"))
                                object.ringRight = message.ringRight;
                            if (message.ringLeft != null && message.hasOwnProperty("ringLeft"))
                                object.ringLeft = message.ringLeft;
                            if (message.necklace != null && message.hasOwnProperty("necklace"))
                                object.necklace = message.necklace;
                            if (message.belt != null && message.hasOwnProperty("belt"))
                                object.belt = message.belt;
                            if (message.shoulder != null && message.hasOwnProperty("shoulder"))
                                object.shoulder = message.shoulder;
                            if (message.damage != null && message.hasOwnProperty("damage"))
                                object.damage = message.damage;
                            if (message.defense != null && message.hasOwnProperty("defense"))
                                object.defense = message.defense;
                            if (message.healthPoint != null && message.hasOwnProperty("healthPoint"))
                                object.healthPoint = message.healthPoint;
                            if (message.grade != null && message.hasOwnProperty("grade"))
                                object.grade = message.grade;
                            if (message.experience != null && message.hasOwnProperty("experience"))
                                if (typeof message.experience === "number")
                                    object.experience = options.longs === String ? String(message.experience) : message.experience;
                                else
                                    object.experience = options.longs === String ? $util.Long.prototype.toString.call(message.experience) : options.longs === Number ? new $util.LongBits(message.experience.low >>> 0, message.experience.high >>> 0).toNumber() : message.experience;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.nickName != null && message.hasOwnProperty("nickName"))
                                object.nickName = message.nickName;
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                object.avatar = message.avatar;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.attack != null && message.hasOwnProperty("attack"))
                                object.attack = message.attack;
                            if (message.currentPoint != null && message.hasOwnProperty("currentPoint"))
                                object.currentPoint = message.currentPoint;
                            if (message.gradeExperience != null && message.hasOwnProperty("gradeExperience"))
                                if (typeof message.gradeExperience === "number")
                                    object.gradeExperience = options.longs === String ? String(message.gradeExperience) : message.gradeExperience;
                                else
                                    object.gradeExperience = options.longs === String ? $util.Long.prototype.toString.call(message.gradeExperience) : options.longs === Number ? new $util.LongBits(message.gradeExperience.low >>> 0, message.gradeExperience.high >>> 0).toNumber() : message.gradeExperience;
                            if (message.powerValue != null && message.hasOwnProperty("powerValue"))
                                object.powerValue = message.powerValue;
                            return object;
                        };

                        /**
                         * Converts this Characters to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.game.model.Characters
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Characters.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Characters;
                    })();

                    model.CharactersReply = (function() {

                        /**
                         * Properties of a CharactersReply.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @interface ICharactersReply
                         * @property {number|null} [code] CharactersReply code
                         * @property {string|null} [message] CharactersReply message
                         * @property {Array.<com.xueershangda.tianxun.game.model.ICharacters>|null} [data] CharactersReply data
                         * @property {com.xueershangda.tianxun.game.model.ICharacters|null} [characters] CharactersReply characters
                         */

                        /**
                         * Constructs a new CharactersReply.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @classdesc Represents a CharactersReply.
                         * @implements ICharactersReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.game.model.ICharactersReply=} [properties] Properties to set
                         */
                        function CharactersReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * CharactersReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @instance
                         */
                        CharactersReply.prototype.code = 0;

                        /**
                         * CharactersReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @instance
                         */
                        CharactersReply.prototype.message = "";

                        /**
                         * CharactersReply data.
                         * @member {Array.<com.xueershangda.tianxun.game.model.ICharacters>} data
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @instance
                         */
                        CharactersReply.prototype.data = $util.emptyArray;

                        /**
                         * CharactersReply characters.
                         * @member {com.xueershangda.tianxun.game.model.ICharacters|null|undefined} characters
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @instance
                         */
                        CharactersReply.prototype.characters = null;

                        /**
                         * Creates a new CharactersReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.ICharactersReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.game.model.CharactersReply} CharactersReply instance
                         */
                        CharactersReply.create = function create(properties) {
                            return new CharactersReply(properties);
                        };

                        /**
                         * Encodes the specified CharactersReply message. Does not implicitly {@link com.xueershangda.tianxun.game.model.CharactersReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.ICharactersReply} message CharactersReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CharactersReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.game.model.Characters.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.characters != null && message.hasOwnProperty("characters"))
                                $root.com.xueershangda.tianxun.game.model.Characters.encode(message.characters, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified CharactersReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.game.model.CharactersReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.ICharactersReply} message CharactersReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CharactersReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a CharactersReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.game.model.CharactersReply} CharactersReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CharactersReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.game.model.CharactersReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.game.model.Characters.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    message.characters = $root.com.xueershangda.tianxun.game.model.Characters.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a CharactersReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.game.model.CharactersReply} CharactersReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CharactersReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a CharactersReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CharactersReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.game.model.Characters.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.characters != null && message.hasOwnProperty("characters")) {
                                let error = $root.com.xueershangda.tianxun.game.model.Characters.verify(message.characters);
                                if (error)
                                    return "characters." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a CharactersReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.game.model.CharactersReply} CharactersReply
                         */
                        CharactersReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.game.model.CharactersReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.game.model.CharactersReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.game.model.CharactersReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.game.model.CharactersReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.game.model.Characters.fromObject(object.data[i]);
                                }
                            }
                            if (object.characters != null) {
                                if (typeof object.characters !== "object")
                                    throw TypeError(".com.xueershangda.tianxun.game.model.CharactersReply.characters: object expected");
                                message.characters = $root.com.xueershangda.tianxun.game.model.Characters.fromObject(object.characters);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a CharactersReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.CharactersReply} message CharactersReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CharactersReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                                object.characters = null;
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.game.model.Characters.toObject(message.data[j], options);
                            }
                            if (message.characters != null && message.hasOwnProperty("characters"))
                                object.characters = $root.com.xueershangda.tianxun.game.model.Characters.toObject(message.characters, options);
                            return object;
                        };

                        /**
                         * Converts this CharactersReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.game.model.CharactersReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CharactersReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return CharactersReply;
                    })();

                    model.VirtualItems = (function() {

                        /**
                         * Properties of a VirtualItems.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @interface IVirtualItems
                         * @property {string|null} [id] VirtualItems id
                         * @property {string|null} [name] VirtualItems name
                         * @property {string|null} [occupation] VirtualItems occupation
                         * @property {string|null} [type] VirtualItems type
                         * @property {number|null} [damage] VirtualItems damage
                         * @property {number|null} [defense] VirtualItems defense
                         * @property {number|null} [healthPoint] VirtualItems healthPoint
                         * @property {number|null} [level] VirtualItems level
                         * @property {number|null} [state] VirtualItems state
                         * @property {boolean|null} [dressed] VirtualItems dressed
                         * @property {number|null} [page] VirtualItems page
                         * @property {number|null} [pageSize] VirtualItems pageSize
                         * @property {string|null} [orderBy] VirtualItems orderBy
                         * @property {string|null} [coverImage] VirtualItems coverImage
                         * @property {number|Long|null} [number] VirtualItems number
                         * @property {number|Long|null} [focusNumber] VirtualItems focusNumber
                         * @property {number|Long|null} [loveNumber] VirtualItems loveNumber
                         * @property {number|null} [price] VirtualItems price
                         * @property {string|null} [summary] VirtualItems summary
                         * @property {string|null} [text] VirtualItems text
                         */

                        /**
                         * Constructs a new VirtualItems.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @classdesc Represents a VirtualItems.
                         * @implements IVirtualItems
                         * @constructor
                         * @param {com.xueershangda.tianxun.game.model.IVirtualItems=} [properties] Properties to set
                         */
                        function VirtualItems(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * VirtualItems id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.id = "";

                        /**
                         * VirtualItems name.
                         * @member {string} name
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.name = "";

                        /**
                         * VirtualItems occupation.
                         * @member {string} occupation
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.occupation = "";

                        /**
                         * VirtualItems type.
                         * @member {string} type
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.type = "";

                        /**
                         * VirtualItems damage.
                         * @member {number} damage
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.damage = 0;

                        /**
                         * VirtualItems defense.
                         * @member {number} defense
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.defense = 0;

                        /**
                         * VirtualItems healthPoint.
                         * @member {number} healthPoint
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.healthPoint = 0;

                        /**
                         * VirtualItems level.
                         * @member {number} level
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.level = 0;

                        /**
                         * VirtualItems state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.state = 0;

                        /**
                         * VirtualItems dressed.
                         * @member {boolean} dressed
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.dressed = false;

                        /**
                         * VirtualItems page.
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.page = 0;

                        /**
                         * VirtualItems pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.pageSize = 0;

                        /**
                         * VirtualItems orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.orderBy = "";

                        /**
                         * VirtualItems coverImage.
                         * @member {string} coverImage
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.coverImage = "";

                        /**
                         * VirtualItems number.
                         * @member {number|Long} number
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.number = 0;

                        /**
                         * VirtualItems focusNumber.
                         * @member {number|Long} focusNumber
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.focusNumber = 0;

                        /**
                         * VirtualItems loveNumber.
                         * @member {number|Long} loveNumber
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.loveNumber = 0;

                        /**
                         * VirtualItems price.
                         * @member {number} price
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.price = 0;

                        /**
                         * VirtualItems summary.
                         * @member {string} summary
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.summary = "";

                        /**
                         * VirtualItems text.
                         * @member {string} text
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         */
                        VirtualItems.prototype.text = "";

                        /**
                         * Creates a new VirtualItems instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IVirtualItems=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.game.model.VirtualItems} VirtualItems instance
                         */
                        VirtualItems.create = function create(properties) {
                            return new VirtualItems(properties);
                        };

                        /**
                         * Encodes the specified VirtualItems message. Does not implicitly {@link com.xueershangda.tianxun.game.model.VirtualItems.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IVirtualItems} message VirtualItems message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VirtualItems.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                            if (message.occupation != null && message.hasOwnProperty("occupation"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.occupation);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.type);
                            if (message.damage != null && message.hasOwnProperty("damage"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.damage);
                            if (message.defense != null && message.hasOwnProperty("defense"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.defense);
                            if (message.healthPoint != null && message.hasOwnProperty("healthPoint"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.healthPoint);
                            if (message.level != null && message.hasOwnProperty("level"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.level);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.state);
                            if (message.dressed != null && message.hasOwnProperty("dressed"))
                                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.dressed);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.pageSize);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.orderBy);
                            if (message.coverImage != null && message.hasOwnProperty("coverImage"))
                                writer.uint32(/* id 14, wireType 2 =*/114).string(message.coverImage);
                            if (message.number != null && message.hasOwnProperty("number"))
                                writer.uint32(/* id 15, wireType 0 =*/120).int64(message.number);
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                writer.uint32(/* id 16, wireType 0 =*/128).int64(message.focusNumber);
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                writer.uint32(/* id 17, wireType 0 =*/136).int64(message.loveNumber);
                            if (message.price != null && message.hasOwnProperty("price"))
                                writer.uint32(/* id 18, wireType 0 =*/144).int32(message.price);
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                writer.uint32(/* id 19, wireType 2 =*/154).string(message.summary);
                            if (message.text != null && message.hasOwnProperty("text"))
                                writer.uint32(/* id 20, wireType 2 =*/162).string(message.text);
                            return writer;
                        };

                        /**
                         * Encodes the specified VirtualItems message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.game.model.VirtualItems.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IVirtualItems} message VirtualItems message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VirtualItems.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a VirtualItems message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.game.model.VirtualItems} VirtualItems
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VirtualItems.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.game.model.VirtualItems();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.name = reader.string();
                                    break;
                                case 3:
                                    message.occupation = reader.string();
                                    break;
                                case 4:
                                    message.type = reader.string();
                                    break;
                                case 5:
                                    message.damage = reader.int32();
                                    break;
                                case 6:
                                    message.defense = reader.int32();
                                    break;
                                case 7:
                                    message.healthPoint = reader.int32();
                                    break;
                                case 8:
                                    message.level = reader.int32();
                                    break;
                                case 9:
                                    message.state = reader.int32();
                                    break;
                                case 10:
                                    message.dressed = reader.bool();
                                    break;
                                case 11:
                                    message.page = reader.int32();
                                    break;
                                case 12:
                                    message.pageSize = reader.int32();
                                    break;
                                case 13:
                                    message.orderBy = reader.string();
                                    break;
                                case 14:
                                    message.coverImage = reader.string();
                                    break;
                                case 15:
                                    message.number = reader.int64();
                                    break;
                                case 16:
                                    message.focusNumber = reader.int64();
                                    break;
                                case 17:
                                    message.loveNumber = reader.int64();
                                    break;
                                case 18:
                                    message.price = reader.int32();
                                    break;
                                case 19:
                                    message.summary = reader.string();
                                    break;
                                case 20:
                                    message.text = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a VirtualItems message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.game.model.VirtualItems} VirtualItems
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VirtualItems.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a VirtualItems message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VirtualItems.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.occupation != null && message.hasOwnProperty("occupation"))
                                if (!$util.isString(message.occupation))
                                    return "occupation: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.damage != null && message.hasOwnProperty("damage"))
                                if (!$util.isInteger(message.damage))
                                    return "damage: integer expected";
                            if (message.defense != null && message.hasOwnProperty("defense"))
                                if (!$util.isInteger(message.defense))
                                    return "defense: integer expected";
                            if (message.healthPoint != null && message.hasOwnProperty("healthPoint"))
                                if (!$util.isInteger(message.healthPoint))
                                    return "healthPoint: integer expected";
                            if (message.level != null && message.hasOwnProperty("level"))
                                if (!$util.isInteger(message.level))
                                    return "level: integer expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.dressed != null && message.hasOwnProperty("dressed"))
                                if (typeof message.dressed !== "boolean")
                                    return "dressed: boolean expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.coverImage != null && message.hasOwnProperty("coverImage"))
                                if (!$util.isString(message.coverImage))
                                    return "coverImage: string expected";
                            if (message.number != null && message.hasOwnProperty("number"))
                                if (!$util.isInteger(message.number) && !(message.number && $util.isInteger(message.number.low) && $util.isInteger(message.number.high)))
                                    return "number: integer|Long expected";
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (!$util.isInteger(message.focusNumber) && !(message.focusNumber && $util.isInteger(message.focusNumber.low) && $util.isInteger(message.focusNumber.high)))
                                    return "focusNumber: integer|Long expected";
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (!$util.isInteger(message.loveNumber) && !(message.loveNumber && $util.isInteger(message.loveNumber.low) && $util.isInteger(message.loveNumber.high)))
                                    return "loveNumber: integer|Long expected";
                            if (message.price != null && message.hasOwnProperty("price"))
                                if (!$util.isInteger(message.price))
                                    return "price: integer expected";
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                if (!$util.isString(message.summary))
                                    return "summary: string expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            return null;
                        };

                        /**
                         * Creates a VirtualItems message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.game.model.VirtualItems} VirtualItems
                         */
                        VirtualItems.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.game.model.VirtualItems)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.game.model.VirtualItems();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.occupation != null)
                                message.occupation = String(object.occupation);
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.damage != null)
                                message.damage = object.damage | 0;
                            if (object.defense != null)
                                message.defense = object.defense | 0;
                            if (object.healthPoint != null)
                                message.healthPoint = object.healthPoint | 0;
                            if (object.level != null)
                                message.level = object.level | 0;
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.dressed != null)
                                message.dressed = Boolean(object.dressed);
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.coverImage != null)
                                message.coverImage = String(object.coverImage);
                            if (object.number != null)
                                if ($util.Long)
                                    (message.number = $util.Long.fromValue(object.number)).unsigned = false;
                                else if (typeof object.number === "string")
                                    message.number = parseInt(object.number, 10);
                                else if (typeof object.number === "number")
                                    message.number = object.number;
                                else if (typeof object.number === "object")
                                    message.number = new $util.LongBits(object.number.low >>> 0, object.number.high >>> 0).toNumber();
                            if (object.focusNumber != null)
                                if ($util.Long)
                                    (message.focusNumber = $util.Long.fromValue(object.focusNumber)).unsigned = false;
                                else if (typeof object.focusNumber === "string")
                                    message.focusNumber = parseInt(object.focusNumber, 10);
                                else if (typeof object.focusNumber === "number")
                                    message.focusNumber = object.focusNumber;
                                else if (typeof object.focusNumber === "object")
                                    message.focusNumber = new $util.LongBits(object.focusNumber.low >>> 0, object.focusNumber.high >>> 0).toNumber();
                            if (object.loveNumber != null)
                                if ($util.Long)
                                    (message.loveNumber = $util.Long.fromValue(object.loveNumber)).unsigned = false;
                                else if (typeof object.loveNumber === "string")
                                    message.loveNumber = parseInt(object.loveNumber, 10);
                                else if (typeof object.loveNumber === "number")
                                    message.loveNumber = object.loveNumber;
                                else if (typeof object.loveNumber === "object")
                                    message.loveNumber = new $util.LongBits(object.loveNumber.low >>> 0, object.loveNumber.high >>> 0).toNumber();
                            if (object.price != null)
                                message.price = object.price | 0;
                            if (object.summary != null)
                                message.summary = String(object.summary);
                            if (object.text != null)
                                message.text = String(object.text);
                            return message;
                        };

                        /**
                         * Creates a plain object from a VirtualItems message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.VirtualItems} message VirtualItems
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VirtualItems.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.name = "";
                                object.occupation = "";
                                object.type = "";
                                object.damage = 0;
                                object.defense = 0;
                                object.healthPoint = 0;
                                object.level = 0;
                                object.state = 0;
                                object.dressed = false;
                                object.page = 0;
                                object.pageSize = 0;
                                object.orderBy = "";
                                object.coverImage = "";
                                object.number = 0;
                                object.focusNumber = 0;
                                object.loveNumber = 0;
                                object.price = 0;
                                object.summary = "";
                                object.text = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.occupation != null && message.hasOwnProperty("occupation"))
                                object.occupation = message.occupation;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.damage != null && message.hasOwnProperty("damage"))
                                object.damage = message.damage;
                            if (message.defense != null && message.hasOwnProperty("defense"))
                                object.defense = message.defense;
                            if (message.healthPoint != null && message.hasOwnProperty("healthPoint"))
                                object.healthPoint = message.healthPoint;
                            if (message.level != null && message.hasOwnProperty("level"))
                                object.level = message.level;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.dressed != null && message.hasOwnProperty("dressed"))
                                object.dressed = message.dressed;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.coverImage != null && message.hasOwnProperty("coverImage"))
                                object.coverImage = message.coverImage;
                            if (message.number != null && message.hasOwnProperty("number"))
                                if (typeof message.number === "number")
                                    object.number = options.longs === String ? String(message.number) : message.number;
                                else
                                    object.number = options.longs === String ? $util.Long.prototype.toString.call(message.number) : options.longs === Number ? new $util.LongBits(message.number.low >>> 0, message.number.high >>> 0).toNumber() : message.number;
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (typeof message.focusNumber === "number")
                                    object.focusNumber = options.longs === String ? String(message.focusNumber) : message.focusNumber;
                                else
                                    object.focusNumber = options.longs === String ? $util.Long.prototype.toString.call(message.focusNumber) : options.longs === Number ? new $util.LongBits(message.focusNumber.low >>> 0, message.focusNumber.high >>> 0).toNumber() : message.focusNumber;
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (typeof message.loveNumber === "number")
                                    object.loveNumber = options.longs === String ? String(message.loveNumber) : message.loveNumber;
                                else
                                    object.loveNumber = options.longs === String ? $util.Long.prototype.toString.call(message.loveNumber) : options.longs === Number ? new $util.LongBits(message.loveNumber.low >>> 0, message.loveNumber.high >>> 0).toNumber() : message.loveNumber;
                            if (message.price != null && message.hasOwnProperty("price"))
                                object.price = message.price;
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                object.summary = message.summary;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            return object;
                        };

                        /**
                         * Converts this VirtualItems to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItems
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VirtualItems.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return VirtualItems;
                    })();

                    model.VirtualItemsReply = (function() {

                        /**
                         * Properties of a VirtualItemsReply.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @interface IVirtualItemsReply
                         * @property {number|null} [code] VirtualItemsReply code
                         * @property {string|null} [message] VirtualItemsReply message
                         * @property {Array.<com.xueershangda.tianxun.game.model.IVirtualItems>|null} [data] VirtualItemsReply data
                         * @property {Array.<com.xueershangda.tianxun.game.model.IEquipment>|null} [equipmentList] VirtualItemsReply equipmentList
                         */

                        /**
                         * Constructs a new VirtualItemsReply.
                         * @memberof com.xueershangda.tianxun.game.model
                         * @classdesc Represents a VirtualItemsReply.
                         * @implements IVirtualItemsReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.game.model.IVirtualItemsReply=} [properties] Properties to set
                         */
                        function VirtualItemsReply(properties) {
                            this.data = [];
                            this.equipmentList = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * VirtualItemsReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @instance
                         */
                        VirtualItemsReply.prototype.code = 0;

                        /**
                         * VirtualItemsReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @instance
                         */
                        VirtualItemsReply.prototype.message = "";

                        /**
                         * VirtualItemsReply data.
                         * @member {Array.<com.xueershangda.tianxun.game.model.IVirtualItems>} data
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @instance
                         */
                        VirtualItemsReply.prototype.data = $util.emptyArray;

                        /**
                         * VirtualItemsReply equipmentList.
                         * @member {Array.<com.xueershangda.tianxun.game.model.IEquipment>} equipmentList
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @instance
                         */
                        VirtualItemsReply.prototype.equipmentList = $util.emptyArray;

                        /**
                         * Creates a new VirtualItemsReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IVirtualItemsReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.game.model.VirtualItemsReply} VirtualItemsReply instance
                         */
                        VirtualItemsReply.create = function create(properties) {
                            return new VirtualItemsReply(properties);
                        };

                        /**
                         * Encodes the specified VirtualItemsReply message. Does not implicitly {@link com.xueershangda.tianxun.game.model.VirtualItemsReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IVirtualItemsReply} message VirtualItemsReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VirtualItemsReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.game.model.VirtualItems.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.equipmentList != null && message.equipmentList.length)
                                for (let i = 0; i < message.equipmentList.length; ++i)
                                    $root.com.xueershangda.tianxun.game.model.Equipment.encode(message.equipmentList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified VirtualItemsReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.game.model.VirtualItemsReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.IVirtualItemsReply} message VirtualItemsReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VirtualItemsReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a VirtualItemsReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.game.model.VirtualItemsReply} VirtualItemsReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VirtualItemsReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.game.model.VirtualItemsReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.game.model.VirtualItems.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    if (!(message.equipmentList && message.equipmentList.length))
                                        message.equipmentList = [];
                                    message.equipmentList.push($root.com.xueershangda.tianxun.game.model.Equipment.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a VirtualItemsReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.game.model.VirtualItemsReply} VirtualItemsReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VirtualItemsReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a VirtualItemsReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VirtualItemsReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.game.model.VirtualItems.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.equipmentList != null && message.hasOwnProperty("equipmentList")) {
                                if (!Array.isArray(message.equipmentList))
                                    return "equipmentList: array expected";
                                for (let i = 0; i < message.equipmentList.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.game.model.Equipment.verify(message.equipmentList[i]);
                                    if (error)
                                        return "equipmentList." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a VirtualItemsReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.game.model.VirtualItemsReply} VirtualItemsReply
                         */
                        VirtualItemsReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.game.model.VirtualItemsReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.game.model.VirtualItemsReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.game.model.VirtualItemsReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.game.model.VirtualItemsReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.game.model.VirtualItems.fromObject(object.data[i]);
                                }
                            }
                            if (object.equipmentList) {
                                if (!Array.isArray(object.equipmentList))
                                    throw TypeError(".com.xueershangda.tianxun.game.model.VirtualItemsReply.equipmentList: array expected");
                                message.equipmentList = [];
                                for (let i = 0; i < object.equipmentList.length; ++i) {
                                    if (typeof object.equipmentList[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.game.model.VirtualItemsReply.equipmentList: object expected");
                                    message.equipmentList[i] = $root.com.xueershangda.tianxun.game.model.Equipment.fromObject(object.equipmentList[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a VirtualItemsReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @static
                         * @param {com.xueershangda.tianxun.game.model.VirtualItemsReply} message VirtualItemsReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VirtualItemsReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.data = [];
                                object.equipmentList = [];
                            }
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.game.model.VirtualItems.toObject(message.data[j], options);
                            }
                            if (message.equipmentList && message.equipmentList.length) {
                                object.equipmentList = [];
                                for (let j = 0; j < message.equipmentList.length; ++j)
                                    object.equipmentList[j] = $root.com.xueershangda.tianxun.game.model.Equipment.toObject(message.equipmentList[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this VirtualItemsReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.game.model.VirtualItemsReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VirtualItemsReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return VirtualItemsReply;
                    })();

                    return model;
                })();

                return game;
            })();

            tianxun.video = (function() {

                /**
                 * Namespace video.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const video = {};

                video.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.video
                     * @namespace
                     */
                    const model = {};

                    model.Video = (function() {

                        /**
                         * Properties of a Video.
                         * @memberof com.xueershangda.tianxun.video.model
                         * @interface IVideo
                         * @property {string|null} [id] Video id
                         * @property {string|null} [title] 视频标题
                         * @property {string|null} [url] 视频url
                         * @property {string|null} [image] 视频封面
                         * @property {string|null} [summary] 视频简介
                         * @property {number|Long|null} [createDate] 创建时间
                         * @property {number|Long|null} [updateDate] 更新时间
                         * @property {number|null} [price] 价格
                         * @property {number|null} [freeTime] 免费时长
                         * @property {boolean|null} [free] 是否免费
                         * @property {number|null} [number] 销售数
                         * @property {number|null} [loveNumber] 点赞数
                         * @property {number|null} [focusNumber] 关注数
                         * @property {number|null} [despiseNumber] 鄙视数
                         * @property {number|null} [state] 状态
                         * @property {string|null} [category] 分类
                         * @property {string|null} [ads] 广告语
                         * @property {string|null} [remark] 备注
                         * @property {string|null} [userId] 用户id/平台
                         * @property {string|null} [videoType] 视频类型
                         * @property {number|null} [update] 1新增2更新
                         * @property {string|null} [previewUrl] 预览url，试看
                         * @property {string|null} [orderBy] order by 排序语句
                         * @property {number|null} [start] 分页开始记录
                         * @property {number|null} [page] 页码
                         * @property {number|null} [pageSize] 分页大小
                         * @property {number|null} [updateVideo] 1新增2更新
                         * @property {string|null} [datePath] 日期路径
                         */

                        /**
                         * Constructs a new Video.
                         * @memberof com.xueershangda.tianxun.video.model
                         * @classdesc Represents a Video.
                         * @implements IVideo
                         * @constructor
                         * @param {com.xueershangda.tianxun.video.model.IVideo=} [properties] Properties to set
                         */
                        function Video(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Video id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.id = "";

                        /**
                         * 视频标题
                         * @member {string} title
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.title = "";

                        /**
                         * 视频url
                         * @member {string} url
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.url = "";

                        /**
                         * 视频封面
                         * @member {string} image
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.image = "";

                        /**
                         * 视频简介
                         * @member {string} summary
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.summary = "";

                        /**
                         * 创建时间
                         * @member {number|Long} createDate
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.createDate = 0;

                        /**
                         * 更新时间
                         * @member {number|Long} updateDate
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.updateDate = 0;

                        /**
                         * 价格
                         * @member {number} price
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.price = 0;

                        /**
                         * 免费时长
                         * @member {number} freeTime
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.freeTime = 0;

                        /**
                         * 是否免费
                         * @member {boolean} free
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.free = false;

                        /**
                         * 销售数
                         * @member {number} number
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.number = 0;

                        /**
                         * 点赞数
                         * @member {number} loveNumber
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.loveNumber = 0;

                        /**
                         * 关注数
                         * @member {number} focusNumber
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.focusNumber = 0;

                        /**
                         * 鄙视数
                         * @member {number} despiseNumber
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.despiseNumber = 0;

                        /**
                         * 状态
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.state = 0;

                        /**
                         * 分类
                         * @member {string} category
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.category = "";

                        /**
                         * 广告语
                         * @member {string} ads
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.ads = "";

                        /**
                         * 备注
                         * @member {string} remark
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.remark = "";

                        /**
                         * 用户id/平台
                         * @member {string} userId
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.userId = "";

                        /**
                         * 视频类型
                         * @member {string} videoType
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.videoType = "";

                        /**
                         * 1新增2更新
                         * @member {number} update
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.update = 0;

                        /**
                         * 预览url，试看
                         * @member {string} previewUrl
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.previewUrl = "";

                        /**
                         * order by 排序语句
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.orderBy = "";

                        /**
                         * 分页开始记录
                         * @member {number} start
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.start = 0;

                        /**
                         * 页码
                         * @member {number} page
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.page = 0;

                        /**
                         * 分页大小
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.pageSize = 0;

                        /**
                         * 1新增2更新
                         * @member {number} updateVideo
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.updateVideo = 0;

                        /**
                         * 日期路径
                         * @member {string} datePath
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         */
                        Video.prototype.datePath = "";

                        /**
                         * Creates a new Video instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @static
                         * @param {com.xueershangda.tianxun.video.model.IVideo=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.video.model.Video} Video instance
                         */
                        Video.create = function create(properties) {
                            return new Video(properties);
                        };

                        /**
                         * Encodes the specified Video message. Does not implicitly {@link com.xueershangda.tianxun.video.model.Video.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @static
                         * @param {com.xueershangda.tianxun.video.model.IVideo} message Video message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Video.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.title != null && message.hasOwnProperty("title"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                            if (message.url != null && message.hasOwnProperty("url"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.url);
                            if (message.image != null && message.hasOwnProperty("image"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.image);
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.summary);
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.createDate);
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.updateDate);
                            if (message.price != null && message.hasOwnProperty("price"))
                                writer.uint32(/* id 8, wireType 1 =*/65).double(message.price);
                            if (message.freeTime != null && message.hasOwnProperty("freeTime"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.freeTime);
                            if (message.free != null && message.hasOwnProperty("free"))
                                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.free);
                            if (message.number != null && message.hasOwnProperty("number"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.number);
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.loveNumber);
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.focusNumber);
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.despiseNumber);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.state);
                            if (message.category != null && message.hasOwnProperty("category"))
                                writer.uint32(/* id 16, wireType 2 =*/130).string(message.category);
                            if (message.ads != null && message.hasOwnProperty("ads"))
                                writer.uint32(/* id 17, wireType 2 =*/138).string(message.ads);
                            if (message.remark != null && message.hasOwnProperty("remark"))
                                writer.uint32(/* id 18, wireType 2 =*/146).string(message.remark);
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                writer.uint32(/* id 19, wireType 2 =*/154).string(message.userId);
                            if (message.videoType != null && message.hasOwnProperty("videoType"))
                                writer.uint32(/* id 20, wireType 2 =*/162).string(message.videoType);
                            if (message.update != null && message.hasOwnProperty("update"))
                                writer.uint32(/* id 21, wireType 0 =*/168).int32(message.update);
                            if (message.previewUrl != null && message.hasOwnProperty("previewUrl"))
                                writer.uint32(/* id 22, wireType 2 =*/178).string(message.previewUrl);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 23, wireType 2 =*/186).string(message.orderBy);
                            if (message.start != null && message.hasOwnProperty("start"))
                                writer.uint32(/* id 24, wireType 0 =*/192).int32(message.start);
                            if (message.page != null && message.hasOwnProperty("page"))
                                writer.uint32(/* id 25, wireType 0 =*/200).int32(message.page);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 26, wireType 0 =*/208).int32(message.pageSize);
                            if (message.updateVideo != null && message.hasOwnProperty("updateVideo"))
                                writer.uint32(/* id 27, wireType 0 =*/216).int32(message.updateVideo);
                            if (message.datePath != null && message.hasOwnProperty("datePath"))
                                writer.uint32(/* id 28, wireType 2 =*/226).string(message.datePath);
                            return writer;
                        };

                        /**
                         * Encodes the specified Video message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.video.model.Video.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @static
                         * @param {com.xueershangda.tianxun.video.model.IVideo} message Video message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Video.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Video message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.video.model.Video} Video
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Video.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.video.model.Video();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.title = reader.string();
                                    break;
                                case 3:
                                    message.url = reader.string();
                                    break;
                                case 4:
                                    message.image = reader.string();
                                    break;
                                case 5:
                                    message.summary = reader.string();
                                    break;
                                case 6:
                                    message.createDate = reader.int64();
                                    break;
                                case 7:
                                    message.updateDate = reader.int64();
                                    break;
                                case 8:
                                    message.price = reader.double();
                                    break;
                                case 9:
                                    message.freeTime = reader.int32();
                                    break;
                                case 10:
                                    message.free = reader.bool();
                                    break;
                                case 11:
                                    message.number = reader.int32();
                                    break;
                                case 12:
                                    message.loveNumber = reader.int32();
                                    break;
                                case 13:
                                    message.focusNumber = reader.int32();
                                    break;
                                case 14:
                                    message.despiseNumber = reader.int32();
                                    break;
                                case 15:
                                    message.state = reader.int32();
                                    break;
                                case 16:
                                    message.category = reader.string();
                                    break;
                                case 17:
                                    message.ads = reader.string();
                                    break;
                                case 18:
                                    message.remark = reader.string();
                                    break;
                                case 19:
                                    message.userId = reader.string();
                                    break;
                                case 20:
                                    message.videoType = reader.string();
                                    break;
                                case 21:
                                    message.update = reader.int32();
                                    break;
                                case 22:
                                    message.previewUrl = reader.string();
                                    break;
                                case 23:
                                    message.orderBy = reader.string();
                                    break;
                                case 24:
                                    message.start = reader.int32();
                                    break;
                                case 25:
                                    message.page = reader.int32();
                                    break;
                                case 26:
                                    message.pageSize = reader.int32();
                                    break;
                                case 27:
                                    message.updateVideo = reader.int32();
                                    break;
                                case 28:
                                    message.datePath = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Video message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.video.model.Video} Video
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Video.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Video message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Video.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.url != null && message.hasOwnProperty("url"))
                                if (!$util.isString(message.url))
                                    return "url: string expected";
                            if (message.image != null && message.hasOwnProperty("image"))
                                if (!$util.isString(message.image))
                                    return "image: string expected";
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                if (!$util.isString(message.summary))
                                    return "summary: string expected";
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                    return "createDate: integer|Long expected";
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                if (!$util.isInteger(message.updateDate) && !(message.updateDate && $util.isInteger(message.updateDate.low) && $util.isInteger(message.updateDate.high)))
                                    return "updateDate: integer|Long expected";
                            if (message.price != null && message.hasOwnProperty("price"))
                                if (typeof message.price !== "number")
                                    return "price: number expected";
                            if (message.freeTime != null && message.hasOwnProperty("freeTime"))
                                if (!$util.isInteger(message.freeTime))
                                    return "freeTime: integer expected";
                            if (message.free != null && message.hasOwnProperty("free"))
                                if (typeof message.free !== "boolean")
                                    return "free: boolean expected";
                            if (message.number != null && message.hasOwnProperty("number"))
                                if (!$util.isInteger(message.number))
                                    return "number: integer expected";
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                if (!$util.isInteger(message.loveNumber))
                                    return "loveNumber: integer expected";
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                if (!$util.isInteger(message.focusNumber))
                                    return "focusNumber: integer expected";
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                if (!$util.isInteger(message.despiseNumber))
                                    return "despiseNumber: integer expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.category != null && message.hasOwnProperty("category"))
                                if (!$util.isString(message.category))
                                    return "category: string expected";
                            if (message.ads != null && message.hasOwnProperty("ads"))
                                if (!$util.isString(message.ads))
                                    return "ads: string expected";
                            if (message.remark != null && message.hasOwnProperty("remark"))
                                if (!$util.isString(message.remark))
                                    return "remark: string expected";
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                if (!$util.isString(message.userId))
                                    return "userId: string expected";
                            if (message.videoType != null && message.hasOwnProperty("videoType"))
                                if (!$util.isString(message.videoType))
                                    return "videoType: string expected";
                            if (message.update != null && message.hasOwnProperty("update"))
                                if (!$util.isInteger(message.update))
                                    return "update: integer expected";
                            if (message.previewUrl != null && message.hasOwnProperty("previewUrl"))
                                if (!$util.isString(message.previewUrl))
                                    return "previewUrl: string expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.start != null && message.hasOwnProperty("start"))
                                if (!$util.isInteger(message.start))
                                    return "start: integer expected";
                            if (message.page != null && message.hasOwnProperty("page"))
                                if (!$util.isInteger(message.page))
                                    return "page: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.updateVideo != null && message.hasOwnProperty("updateVideo"))
                                if (!$util.isInteger(message.updateVideo))
                                    return "updateVideo: integer expected";
                            if (message.datePath != null && message.hasOwnProperty("datePath"))
                                if (!$util.isString(message.datePath))
                                    return "datePath: string expected";
                            return null;
                        };

                        /**
                         * Creates a Video message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.video.model.Video} Video
                         */
                        Video.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.video.model.Video)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.video.model.Video();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.url != null)
                                message.url = String(object.url);
                            if (object.image != null)
                                message.image = String(object.image);
                            if (object.summary != null)
                                message.summary = String(object.summary);
                            if (object.createDate != null)
                                if ($util.Long)
                                    (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                                else if (typeof object.createDate === "string")
                                    message.createDate = parseInt(object.createDate, 10);
                                else if (typeof object.createDate === "number")
                                    message.createDate = object.createDate;
                                else if (typeof object.createDate === "object")
                                    message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                            if (object.updateDate != null)
                                if ($util.Long)
                                    (message.updateDate = $util.Long.fromValue(object.updateDate)).unsigned = false;
                                else if (typeof object.updateDate === "string")
                                    message.updateDate = parseInt(object.updateDate, 10);
                                else if (typeof object.updateDate === "number")
                                    message.updateDate = object.updateDate;
                                else if (typeof object.updateDate === "object")
                                    message.updateDate = new $util.LongBits(object.updateDate.low >>> 0, object.updateDate.high >>> 0).toNumber();
                            if (object.price != null)
                                message.price = Number(object.price);
                            if (object.freeTime != null)
                                message.freeTime = object.freeTime | 0;
                            if (object.free != null)
                                message.free = Boolean(object.free);
                            if (object.number != null)
                                message.number = object.number | 0;
                            if (object.loveNumber != null)
                                message.loveNumber = object.loveNumber | 0;
                            if (object.focusNumber != null)
                                message.focusNumber = object.focusNumber | 0;
                            if (object.despiseNumber != null)
                                message.despiseNumber = object.despiseNumber | 0;
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.category != null)
                                message.category = String(object.category);
                            if (object.ads != null)
                                message.ads = String(object.ads);
                            if (object.remark != null)
                                message.remark = String(object.remark);
                            if (object.userId != null)
                                message.userId = String(object.userId);
                            if (object.videoType != null)
                                message.videoType = String(object.videoType);
                            if (object.update != null)
                                message.update = object.update | 0;
                            if (object.previewUrl != null)
                                message.previewUrl = String(object.previewUrl);
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.start != null)
                                message.start = object.start | 0;
                            if (object.page != null)
                                message.page = object.page | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.updateVideo != null)
                                message.updateVideo = object.updateVideo | 0;
                            if (object.datePath != null)
                                message.datePath = String(object.datePath);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Video message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @static
                         * @param {com.xueershangda.tianxun.video.model.Video} message Video
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Video.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.title = "";
                                object.url = "";
                                object.image = "";
                                object.summary = "";
                                object.createDate = 0;
                                object.updateDate = 0;
                                object.price = 0;
                                object.freeTime = 0;
                                object.free = false;
                                object.number = 0;
                                object.loveNumber = 0;
                                object.focusNumber = 0;
                                object.despiseNumber = 0;
                                object.state = 0;
                                object.category = "";
                                object.ads = "";
                                object.remark = "";
                                object.userId = "";
                                object.videoType = "";
                                object.update = 0;
                                object.previewUrl = "";
                                object.orderBy = "";
                                object.start = 0;
                                object.page = 0;
                                object.pageSize = 0;
                                object.updateVideo = 0;
                                object.datePath = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.url != null && message.hasOwnProperty("url"))
                                object.url = message.url;
                            if (message.image != null && message.hasOwnProperty("image"))
                                object.image = message.image;
                            if (message.summary != null && message.hasOwnProperty("summary"))
                                object.summary = message.summary;
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (typeof message.createDate === "number")
                                    object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                                else
                                    object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                            if (message.updateDate != null && message.hasOwnProperty("updateDate"))
                                if (typeof message.updateDate === "number")
                                    object.updateDate = options.longs === String ? String(message.updateDate) : message.updateDate;
                                else
                                    object.updateDate = options.longs === String ? $util.Long.prototype.toString.call(message.updateDate) : options.longs === Number ? new $util.LongBits(message.updateDate.low >>> 0, message.updateDate.high >>> 0).toNumber() : message.updateDate;
                            if (message.price != null && message.hasOwnProperty("price"))
                                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
                            if (message.freeTime != null && message.hasOwnProperty("freeTime"))
                                object.freeTime = message.freeTime;
                            if (message.free != null && message.hasOwnProperty("free"))
                                object.free = message.free;
                            if (message.number != null && message.hasOwnProperty("number"))
                                object.number = message.number;
                            if (message.loveNumber != null && message.hasOwnProperty("loveNumber"))
                                object.loveNumber = message.loveNumber;
                            if (message.focusNumber != null && message.hasOwnProperty("focusNumber"))
                                object.focusNumber = message.focusNumber;
                            if (message.despiseNumber != null && message.hasOwnProperty("despiseNumber"))
                                object.despiseNumber = message.despiseNumber;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.category != null && message.hasOwnProperty("category"))
                                object.category = message.category;
                            if (message.ads != null && message.hasOwnProperty("ads"))
                                object.ads = message.ads;
                            if (message.remark != null && message.hasOwnProperty("remark"))
                                object.remark = message.remark;
                            if (message.userId != null && message.hasOwnProperty("userId"))
                                object.userId = message.userId;
                            if (message.videoType != null && message.hasOwnProperty("videoType"))
                                object.videoType = message.videoType;
                            if (message.update != null && message.hasOwnProperty("update"))
                                object.update = message.update;
                            if (message.previewUrl != null && message.hasOwnProperty("previewUrl"))
                                object.previewUrl = message.previewUrl;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.start != null && message.hasOwnProperty("start"))
                                object.start = message.start;
                            if (message.page != null && message.hasOwnProperty("page"))
                                object.page = message.page;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.updateVideo != null && message.hasOwnProperty("updateVideo"))
                                object.updateVideo = message.updateVideo;
                            if (message.datePath != null && message.hasOwnProperty("datePath"))
                                object.datePath = message.datePath;
                            return object;
                        };

                        /**
                         * Converts this Video to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.video.model.Video
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Video.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Video;
                    })();

                    model.VideoReply = (function() {

                        /**
                         * Properties of a VideoReply.
                         * @memberof com.xueershangda.tianxun.video.model
                         * @interface IVideoReply
                         * @property {number|null} [code] VideoReply code
                         * @property {string|null} [message] VideoReply message
                         * @property {Array.<com.xueershangda.tianxun.video.model.IVideo>|null} [data] VideoReply data
                         * @property {com.xueershangda.tianxun.video.model.IVideo|null} [video] VideoReply video
                         * @property {string|null} [account] VideoReply account
                         * @property {number|null} [price] VideoReply price
                         * @property {string|null} [title] VideoReply title
                         * @property {string|null} [type] VideoReply type
                         * @property {string|null} [targetId] VideoReply targetId
                         */

                        /**
                         * Constructs a new VideoReply.
                         * @memberof com.xueershangda.tianxun.video.model
                         * @classdesc Represents a VideoReply.
                         * @implements IVideoReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.video.model.IVideoReply=} [properties] Properties to set
                         */
                        function VideoReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * VideoReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @instance
                         */
                        VideoReply.prototype.code = 0;

                        /**
                         * VideoReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @instance
                         */
                        VideoReply.prototype.message = "";

                        /**
                         * VideoReply data.
                         * @member {Array.<com.xueershangda.tianxun.video.model.IVideo>} data
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @instance
                         */
                        VideoReply.prototype.data = $util.emptyArray;

                        /**
                         * VideoReply video.
                         * @member {com.xueershangda.tianxun.video.model.IVideo|null|undefined} video
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @instance
                         */
                        VideoReply.prototype.video = null;

                        /**
                         * VideoReply account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @instance
                         */
                        VideoReply.prototype.account = "";

                        /**
                         * VideoReply price.
                         * @member {number} price
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @instance
                         */
                        VideoReply.prototype.price = 0;

                        /**
                         * VideoReply title.
                         * @member {string} title
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @instance
                         */
                        VideoReply.prototype.title = "";

                        /**
                         * VideoReply type.
                         * @member {string} type
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @instance
                         */
                        VideoReply.prototype.type = "";

                        /**
                         * VideoReply targetId.
                         * @member {string} targetId
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @instance
                         */
                        VideoReply.prototype.targetId = "";

                        /**
                         * Creates a new VideoReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @static
                         * @param {com.xueershangda.tianxun.video.model.IVideoReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.video.model.VideoReply} VideoReply instance
                         */
                        VideoReply.create = function create(properties) {
                            return new VideoReply(properties);
                        };

                        /**
                         * Encodes the specified VideoReply message. Does not implicitly {@link com.xueershangda.tianxun.video.model.VideoReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @static
                         * @param {com.xueershangda.tianxun.video.model.IVideoReply} message VideoReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.video.model.Video.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.video != null && message.hasOwnProperty("video"))
                                $root.com.xueershangda.tianxun.video.model.Video.encode(message.video, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.account);
                            if (message.price != null && message.hasOwnProperty("price"))
                                writer.uint32(/* id 6, wireType 1 =*/49).double(message.price);
                            if (message.title != null && message.hasOwnProperty("title"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.title);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.type);
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.targetId);
                            return writer;
                        };

                        /**
                         * Encodes the specified VideoReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.video.model.VideoReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @static
                         * @param {com.xueershangda.tianxun.video.model.IVideoReply} message VideoReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a VideoReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.video.model.VideoReply} VideoReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.video.model.VideoReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.video.model.Video.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    message.video = $root.com.xueershangda.tianxun.video.model.Video.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.account = reader.string();
                                    break;
                                case 6:
                                    message.price = reader.double();
                                    break;
                                case 7:
                                    message.title = reader.string();
                                    break;
                                case 8:
                                    message.type = reader.string();
                                    break;
                                case 9:
                                    message.targetId = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a VideoReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.video.model.VideoReply} VideoReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a VideoReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.video.model.Video.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.video != null && message.hasOwnProperty("video")) {
                                let error = $root.com.xueershangda.tianxun.video.model.Video.verify(message.video);
                                if (error)
                                    return "video." + error;
                            }
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            if (message.price != null && message.hasOwnProperty("price"))
                                if (typeof message.price !== "number")
                                    return "price: number expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                if (!$util.isString(message.targetId))
                                    return "targetId: string expected";
                            return null;
                        };

                        /**
                         * Creates a VideoReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.video.model.VideoReply} VideoReply
                         */
                        VideoReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.video.model.VideoReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.video.model.VideoReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.video.model.VideoReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.video.model.VideoReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.video.model.Video.fromObject(object.data[i]);
                                }
                            }
                            if (object.video != null) {
                                if (typeof object.video !== "object")
                                    throw TypeError(".com.xueershangda.tianxun.video.model.VideoReply.video: object expected");
                                message.video = $root.com.xueershangda.tianxun.video.model.Video.fromObject(object.video);
                            }
                            if (object.account != null)
                                message.account = String(object.account);
                            if (object.price != null)
                                message.price = Number(object.price);
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.targetId != null)
                                message.targetId = String(object.targetId);
                            return message;
                        };

                        /**
                         * Creates a plain object from a VideoReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @static
                         * @param {com.xueershangda.tianxun.video.model.VideoReply} message VideoReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                                object.video = null;
                                object.account = "";
                                object.price = 0;
                                object.title = "";
                                object.type = "";
                                object.targetId = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.video.model.Video.toObject(message.data[j], options);
                            }
                            if (message.video != null && message.hasOwnProperty("video"))
                                object.video = $root.com.xueershangda.tianxun.video.model.Video.toObject(message.video, options);
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            if (message.price != null && message.hasOwnProperty("price"))
                                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.targetId != null && message.hasOwnProperty("targetId"))
                                object.targetId = message.targetId;
                            return object;
                        };

                        /**
                         * Converts this VideoReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.video.model.VideoReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return VideoReply;
                    })();

                    return model;
                })();

                return video;
            })();

            tianxun.pay = (function() {

                /**
                 * Namespace pay.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const pay = {};

                pay.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.pay
                     * @namespace
                     */
                    const model = {};

                    model.Alipay = (function() {

                        /**
                         * Properties of an Alipay.
                         * @memberof com.xueershangda.tianxun.pay.model
                         * @interface IAlipay
                         * @property {number|null} [code] Alipay code
                         * @property {string|null} [message] Alipay message
                         * @property {string|null} [id] Alipay id
                         * @property {string|null} [body] 诸多请求参数，ts端无法序列化map
                         * @property {string|null} [value] Alipay value
                         * @property {string|null} [result] Alipay result
                         * @property {string|null} [subject] 订单标题
                         * @property {string|null} [titleDesc] 订单标题描述
                         * @property {string|null} [outTradeNo] 外部订单号（商户自己订单号）
                         * @property {string|null} [orderId] 支付宝订单号
                         * @property {number|null} [amount] 订单金额，单位元
                         * @property {number|null} [type] 购买标的类型：1文章、2问题
                         * @property {number|Long|null} [createDate] 订单创建时间
                         * @property {number|Long|null} [payDate] 支付时间
                         * @property {number|null} [state] 订单状态，1待支付，2支付中，3支付成功
                         * @property {string|null} [buyer] 买家用户id
                         * @property {string|null} [seller] 卖家用户id
                         * @property {string|null} [payChannel] 支付渠道
                         */

                        /**
                         * Constructs a new Alipay.
                         * @memberof com.xueershangda.tianxun.pay.model
                         * @classdesc Represents an Alipay.
                         * @implements IAlipay
                         * @constructor
                         * @param {com.xueershangda.tianxun.pay.model.IAlipay=} [properties] Properties to set
                         */
                        function Alipay(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Alipay code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.code = 0;

                        /**
                         * Alipay message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.message = "";

                        /**
                         * Alipay id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.id = "";

                        /**
                         * 诸多请求参数，ts端无法序列化map
                         * @member {string} body
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.body = "";

                        /**
                         * Alipay value.
                         * @member {string} value
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.value = "";

                        /**
                         * Alipay result.
                         * @member {string} result
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.result = "";

                        /**
                         * 订单标题
                         * @member {string} subject
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.subject = "";

                        /**
                         * 订单标题描述
                         * @member {string} titleDesc
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.titleDesc = "";

                        /**
                         * 外部订单号（商户自己订单号）
                         * @member {string} outTradeNo
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.outTradeNo = "";

                        /**
                         * 支付宝订单号
                         * @member {string} orderId
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.orderId = "";

                        /**
                         * 订单金额，单位元
                         * @member {number} amount
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.amount = 0;

                        /**
                         * 购买标的类型：1文章、2问题
                         * @member {number} type
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.type = 0;

                        /**
                         * 订单创建时间
                         * @member {number|Long} createDate
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.createDate = 0;

                        /**
                         * 支付时间
                         * @member {number|Long} payDate
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.payDate = 0;

                        /**
                         * 订单状态，1待支付，2支付中，3支付成功
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.state = 0;

                        /**
                         * 买家用户id
                         * @member {string} buyer
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.buyer = "";

                        /**
                         * 卖家用户id
                         * @member {string} seller
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.seller = "";

                        /**
                         * 支付渠道
                         * @member {string} payChannel
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         */
                        Alipay.prototype.payChannel = "";

                        /**
                         * Creates a new Alipay instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @static
                         * @param {com.xueershangda.tianxun.pay.model.IAlipay=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.pay.model.Alipay} Alipay instance
                         */
                        Alipay.create = function create(properties) {
                            return new Alipay(properties);
                        };

                        /**
                         * Encodes the specified Alipay message. Does not implicitly {@link com.xueershangda.tianxun.pay.model.Alipay.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @static
                         * @param {com.xueershangda.tianxun.pay.model.IAlipay} message Alipay message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Alipay.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.id);
                            if (message.body != null && message.hasOwnProperty("body"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.body);
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.value);
                            if (message.result != null && message.hasOwnProperty("result"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.result);
                            if (message.subject != null && message.hasOwnProperty("subject"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.subject);
                            if (message.titleDesc != null && message.hasOwnProperty("titleDesc"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.titleDesc);
                            if (message.outTradeNo != null && message.hasOwnProperty("outTradeNo"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.outTradeNo);
                            if (message.orderId != null && message.hasOwnProperty("orderId"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.orderId);
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                writer.uint32(/* id 11, wireType 1 =*/89).double(message.amount);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.type);
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                writer.uint32(/* id 13, wireType 0 =*/104).int64(message.createDate);
                            if (message.payDate != null && message.hasOwnProperty("payDate"))
                                writer.uint32(/* id 14, wireType 0 =*/112).int64(message.payDate);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.state);
                            if (message.buyer != null && message.hasOwnProperty("buyer"))
                                writer.uint32(/* id 16, wireType 2 =*/130).string(message.buyer);
                            if (message.seller != null && message.hasOwnProperty("seller"))
                                writer.uint32(/* id 17, wireType 2 =*/138).string(message.seller);
                            if (message.payChannel != null && message.hasOwnProperty("payChannel"))
                                writer.uint32(/* id 18, wireType 2 =*/146).string(message.payChannel);
                            return writer;
                        };

                        /**
                         * Encodes the specified Alipay message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.pay.model.Alipay.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @static
                         * @param {com.xueershangda.tianxun.pay.model.IAlipay} message Alipay message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Alipay.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Alipay message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.pay.model.Alipay} Alipay
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Alipay.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.pay.model.Alipay();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    message.id = reader.string();
                                    break;
                                case 4:
                                    message.body = reader.string();
                                    break;
                                case 5:
                                    message.value = reader.string();
                                    break;
                                case 6:
                                    message.result = reader.string();
                                    break;
                                case 7:
                                    message.subject = reader.string();
                                    break;
                                case 8:
                                    message.titleDesc = reader.string();
                                    break;
                                case 9:
                                    message.outTradeNo = reader.string();
                                    break;
                                case 10:
                                    message.orderId = reader.string();
                                    break;
                                case 11:
                                    message.amount = reader.double();
                                    break;
                                case 12:
                                    message.type = reader.int32();
                                    break;
                                case 13:
                                    message.createDate = reader.int64();
                                    break;
                                case 14:
                                    message.payDate = reader.int64();
                                    break;
                                case 15:
                                    message.state = reader.int32();
                                    break;
                                case 16:
                                    message.buyer = reader.string();
                                    break;
                                case 17:
                                    message.seller = reader.string();
                                    break;
                                case 18:
                                    message.payChannel = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Alipay message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.pay.model.Alipay} Alipay
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Alipay.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Alipay message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Alipay.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.body != null && message.hasOwnProperty("body"))
                                if (!$util.isString(message.body))
                                    return "body: string expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isString(message.value))
                                    return "value: string expected";
                            if (message.result != null && message.hasOwnProperty("result"))
                                if (!$util.isString(message.result))
                                    return "result: string expected";
                            if (message.subject != null && message.hasOwnProperty("subject"))
                                if (!$util.isString(message.subject))
                                    return "subject: string expected";
                            if (message.titleDesc != null && message.hasOwnProperty("titleDesc"))
                                if (!$util.isString(message.titleDesc))
                                    return "titleDesc: string expected";
                            if (message.outTradeNo != null && message.hasOwnProperty("outTradeNo"))
                                if (!$util.isString(message.outTradeNo))
                                    return "outTradeNo: string expected";
                            if (message.orderId != null && message.hasOwnProperty("orderId"))
                                if (!$util.isString(message.orderId))
                                    return "orderId: string expected";
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                if (typeof message.amount !== "number")
                                    return "amount: number expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isInteger(message.type))
                                    return "type: integer expected";
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                    return "createDate: integer|Long expected";
                            if (message.payDate != null && message.hasOwnProperty("payDate"))
                                if (!$util.isInteger(message.payDate) && !(message.payDate && $util.isInteger(message.payDate.low) && $util.isInteger(message.payDate.high)))
                                    return "payDate: integer|Long expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.buyer != null && message.hasOwnProperty("buyer"))
                                if (!$util.isString(message.buyer))
                                    return "buyer: string expected";
                            if (message.seller != null && message.hasOwnProperty("seller"))
                                if (!$util.isString(message.seller))
                                    return "seller: string expected";
                            if (message.payChannel != null && message.hasOwnProperty("payChannel"))
                                if (!$util.isString(message.payChannel))
                                    return "payChannel: string expected";
                            return null;
                        };

                        /**
                         * Creates an Alipay message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.pay.model.Alipay} Alipay
                         */
                        Alipay.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.pay.model.Alipay)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.pay.model.Alipay();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.body != null)
                                message.body = String(object.body);
                            if (object.value != null)
                                message.value = String(object.value);
                            if (object.result != null)
                                message.result = String(object.result);
                            if (object.subject != null)
                                message.subject = String(object.subject);
                            if (object.titleDesc != null)
                                message.titleDesc = String(object.titleDesc);
                            if (object.outTradeNo != null)
                                message.outTradeNo = String(object.outTradeNo);
                            if (object.orderId != null)
                                message.orderId = String(object.orderId);
                            if (object.amount != null)
                                message.amount = Number(object.amount);
                            if (object.type != null)
                                message.type = object.type | 0;
                            if (object.createDate != null)
                                if ($util.Long)
                                    (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                                else if (typeof object.createDate === "string")
                                    message.createDate = parseInt(object.createDate, 10);
                                else if (typeof object.createDate === "number")
                                    message.createDate = object.createDate;
                                else if (typeof object.createDate === "object")
                                    message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                            if (object.payDate != null)
                                if ($util.Long)
                                    (message.payDate = $util.Long.fromValue(object.payDate)).unsigned = false;
                                else if (typeof object.payDate === "string")
                                    message.payDate = parseInt(object.payDate, 10);
                                else if (typeof object.payDate === "number")
                                    message.payDate = object.payDate;
                                else if (typeof object.payDate === "object")
                                    message.payDate = new $util.LongBits(object.payDate.low >>> 0, object.payDate.high >>> 0).toNumber();
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.buyer != null)
                                message.buyer = String(object.buyer);
                            if (object.seller != null)
                                message.seller = String(object.seller);
                            if (object.payChannel != null)
                                message.payChannel = String(object.payChannel);
                            return message;
                        };

                        /**
                         * Creates a plain object from an Alipay message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @static
                         * @param {com.xueershangda.tianxun.pay.model.Alipay} message Alipay
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Alipay.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                                object.id = "";
                                object.body = "";
                                object.value = "";
                                object.result = "";
                                object.subject = "";
                                object.titleDesc = "";
                                object.outTradeNo = "";
                                object.orderId = "";
                                object.amount = 0;
                                object.type = 0;
                                object.createDate = 0;
                                object.payDate = 0;
                                object.state = 0;
                                object.buyer = "";
                                object.seller = "";
                                object.payChannel = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.body != null && message.hasOwnProperty("body"))
                                object.body = message.body;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            if (message.result != null && message.hasOwnProperty("result"))
                                object.result = message.result;
                            if (message.subject != null && message.hasOwnProperty("subject"))
                                object.subject = message.subject;
                            if (message.titleDesc != null && message.hasOwnProperty("titleDesc"))
                                object.titleDesc = message.titleDesc;
                            if (message.outTradeNo != null && message.hasOwnProperty("outTradeNo"))
                                object.outTradeNo = message.outTradeNo;
                            if (message.orderId != null && message.hasOwnProperty("orderId"))
                                object.orderId = message.orderId;
                            if (message.amount != null && message.hasOwnProperty("amount"))
                                object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (typeof message.createDate === "number")
                                    object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                                else
                                    object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                            if (message.payDate != null && message.hasOwnProperty("payDate"))
                                if (typeof message.payDate === "number")
                                    object.payDate = options.longs === String ? String(message.payDate) : message.payDate;
                                else
                                    object.payDate = options.longs === String ? $util.Long.prototype.toString.call(message.payDate) : options.longs === Number ? new $util.LongBits(message.payDate.low >>> 0, message.payDate.high >>> 0).toNumber() : message.payDate;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.buyer != null && message.hasOwnProperty("buyer"))
                                object.buyer = message.buyer;
                            if (message.seller != null && message.hasOwnProperty("seller"))
                                object.seller = message.seller;
                            if (message.payChannel != null && message.hasOwnProperty("payChannel"))
                                object.payChannel = message.payChannel;
                            return object;
                        };

                        /**
                         * Converts this Alipay to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.pay.model.Alipay
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Alipay.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Alipay;
                    })();

                    model.AlipayReply = (function() {

                        /**
                         * Properties of an AlipayReply.
                         * @memberof com.xueershangda.tianxun.pay.model
                         * @interface IAlipayReply
                         * @property {number|null} [code] AlipayReply code
                         * @property {string|null} [message] AlipayReply message
                         * @property {Array.<com.xueershangda.tianxun.pay.model.IAlipay>|null} [data] AlipayReply data
                         * @property {string|null} [body] AlipayReply body
                         * @property {string|null} [value] AlipayReply value
                         * @property {string|null} [result] AlipayReply result
                         */

                        /**
                         * Constructs a new AlipayReply.
                         * @memberof com.xueershangda.tianxun.pay.model
                         * @classdesc Represents an AlipayReply.
                         * @implements IAlipayReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.pay.model.IAlipayReply=} [properties] Properties to set
                         */
                        function AlipayReply(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AlipayReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @instance
                         */
                        AlipayReply.prototype.code = 0;

                        /**
                         * AlipayReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @instance
                         */
                        AlipayReply.prototype.message = "";

                        /**
                         * AlipayReply data.
                         * @member {Array.<com.xueershangda.tianxun.pay.model.IAlipay>} data
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @instance
                         */
                        AlipayReply.prototype.data = $util.emptyArray;

                        /**
                         * AlipayReply body.
                         * @member {string} body
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @instance
                         */
                        AlipayReply.prototype.body = "";

                        /**
                         * AlipayReply value.
                         * @member {string} value
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @instance
                         */
                        AlipayReply.prototype.value = "";

                        /**
                         * AlipayReply result.
                         * @member {string} result
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @instance
                         */
                        AlipayReply.prototype.result = "";

                        /**
                         * Creates a new AlipayReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @static
                         * @param {com.xueershangda.tianxun.pay.model.IAlipayReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.pay.model.AlipayReply} AlipayReply instance
                         */
                        AlipayReply.create = function create(properties) {
                            return new AlipayReply(properties);
                        };

                        /**
                         * Encodes the specified AlipayReply message. Does not implicitly {@link com.xueershangda.tianxun.pay.model.AlipayReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @static
                         * @param {com.xueershangda.tianxun.pay.model.IAlipayReply} message AlipayReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AlipayReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.com.xueershangda.tianxun.pay.model.Alipay.encode(message.data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.body != null && message.hasOwnProperty("body"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.body);
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.value);
                            if (message.result != null && message.hasOwnProperty("result"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.result);
                            return writer;
                        };

                        /**
                         * Encodes the specified AlipayReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.pay.model.AlipayReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @static
                         * @param {com.xueershangda.tianxun.pay.model.IAlipayReply} message AlipayReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AlipayReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AlipayReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.pay.model.AlipayReply} AlipayReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AlipayReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.pay.model.AlipayReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.code = reader.int32();
                                    break;
                                case 2:
                                    message.message = reader.string();
                                    break;
                                case 3:
                                    if (!(message.data && message.data.length))
                                        message.data = [];
                                    message.data.push($root.com.xueershangda.tianxun.pay.model.Alipay.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    message.body = reader.string();
                                    break;
                                case 5:
                                    message.value = reader.string();
                                    break;
                                case 6:
                                    message.result = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AlipayReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.pay.model.AlipayReply} AlipayReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AlipayReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AlipayReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AlipayReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.pay.model.Alipay.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            if (message.body != null && message.hasOwnProperty("body"))
                                if (!$util.isString(message.body))
                                    return "body: string expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isString(message.value))
                                    return "value: string expected";
                            if (message.result != null && message.hasOwnProperty("result"))
                                if (!$util.isString(message.result))
                                    return "result: string expected";
                            return null;
                        };

                        /**
                         * Creates an AlipayReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.pay.model.AlipayReply} AlipayReply
                         */
                        AlipayReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.pay.model.AlipayReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.pay.model.AlipayReply();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".com.xueershangda.tianxun.pay.model.AlipayReply.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.pay.model.AlipayReply.data: object expected");
                                    message.data[i] = $root.com.xueershangda.tianxun.pay.model.Alipay.fromObject(object.data[i]);
                                }
                            }
                            if (object.body != null)
                                message.body = String(object.body);
                            if (object.value != null)
                                message.value = String(object.value);
                            if (object.result != null)
                                message.result = String(object.result);
                            return message;
                        };

                        /**
                         * Creates a plain object from an AlipayReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @static
                         * @param {com.xueershangda.tianxun.pay.model.AlipayReply} message AlipayReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AlipayReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                                object.body = "";
                                object.value = "";
                                object.result = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.com.xueershangda.tianxun.pay.model.Alipay.toObject(message.data[j], options);
                            }
                            if (message.body != null && message.hasOwnProperty("body"))
                                object.body = message.body;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            if (message.result != null && message.hasOwnProperty("result"))
                                object.result = message.result;
                            return object;
                        };

                        /**
                         * Converts this AlipayReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.pay.model.AlipayReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AlipayReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AlipayReply;
                    })();

                    return model;
                })();

                return pay;
            })();

            tianxun.employee = (function() {

                /**
                 * Namespace employee.
                 * @memberof com.xueershangda.tianxun
                 * @namespace
                 */
                const employee = {};

                employee.model = (function() {

                    /**
                     * Namespace model.
                     * @memberof com.xueershangda.tianxun.employee
                     * @namespace
                     */
                    const model = {};

                    model.Employee = (function() {

                        /**
                         * Properties of an Employee.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @interface IEmployee
                         * @property {string|null} [orderBy] Employee orderBy
                         * @property {number|null} [start] Employee start
                         * @property {number|null} [pageSize] Employee pageSize
                         * @property {string|null} [id] Employee id
                         * @property {string|null} [account] Employee account
                         * @property {string|null} [name] Employee name
                         * @property {string|null} [mobile] Employee mobile
                         * @property {string|null} [email] Employee email
                         * @property {number|null} [gender] Employee gender
                         * @property {string|null} [deptName] Employee deptName
                         * @property {string|null} [position] Employee position
                         * @property {string|null} [password] Employee password
                         * @property {string|null} [avatar] Employee avatar
                         * @property {number|null} [admin] Employee admin
                         * @property {number|Long|null} [createDate] Employee createDate
                         * @property {string|null} [number] Employee number
                         * @property {number|Long|null} [entryTime] Employee entryTime
                         * @property {number|Long|null} [birthday] Employee birthday
                         * @property {string|null} [address] Employee address
                         * @property {string|null} [idcard] Employee idcard
                         * @property {string|null} [deptId] Employee deptId
                         * @property {number|null} [state] Employee state
                         * @property {number|null} [employeeNo] Employee employeeNo
                         * @property {string|null} [token] Employee token
                         */

                        /**
                         * Constructs a new Employee.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @classdesc Represents an Employee.
                         * @implements IEmployee
                         * @constructor
                         * @param {com.xueershangda.tianxun.employee.model.IEmployee=} [properties] Properties to set
                         */
                        function Employee(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Employee orderBy.
                         * @member {string} orderBy
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.orderBy = "";

                        /**
                         * Employee start.
                         * @member {number} start
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.start = 0;

                        /**
                         * Employee pageSize.
                         * @member {number} pageSize
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.pageSize = 0;

                        /**
                         * Employee id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.id = "";

                        /**
                         * Employee account.
                         * @member {string} account
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.account = "";

                        /**
                         * Employee name.
                         * @member {string} name
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.name = "";

                        /**
                         * Employee mobile.
                         * @member {string} mobile
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.mobile = "";

                        /**
                         * Employee email.
                         * @member {string} email
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.email = "";

                        /**
                         * Employee gender.
                         * @member {number} gender
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.gender = 0;

                        /**
                         * Employee deptName.
                         * @member {string} deptName
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.deptName = "";

                        /**
                         * Employee position.
                         * @member {string} position
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.position = "";

                        /**
                         * Employee password.
                         * @member {string} password
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.password = "";

                        /**
                         * Employee avatar.
                         * @member {string} avatar
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.avatar = "";

                        /**
                         * Employee admin.
                         * @member {number} admin
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.admin = 0;

                        /**
                         * Employee createDate.
                         * @member {number|Long} createDate
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.createDate = 0;

                        /**
                         * Employee number.
                         * @member {string} number
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.number = "";

                        /**
                         * Employee entryTime.
                         * @member {number|Long} entryTime
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.entryTime = 0;

                        /**
                         * Employee birthday.
                         * @member {number|Long} birthday
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.birthday = 0;

                        /**
                         * Employee address.
                         * @member {string} address
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.address = "";

                        /**
                         * Employee idcard.
                         * @member {string} idcard
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.idcard = "";

                        /**
                         * Employee deptId.
                         * @member {string} deptId
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.deptId = "";

                        /**
                         * Employee state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.state = 0;

                        /**
                         * Employee employeeNo.
                         * @member {number} employeeNo
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.employeeNo = 0;

                        /**
                         * Employee token.
                         * @member {string} token
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         */
                        Employee.prototype.token = "";

                        /**
                         * Creates a new Employee instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IEmployee=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.employee.model.Employee} Employee instance
                         */
                        Employee.create = function create(properties) {
                            return new Employee(properties);
                        };

                        /**
                         * Encodes the specified Employee message. Does not implicitly {@link com.xueershangda.tianxun.employee.model.Employee.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IEmployee} message Employee message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Employee.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.orderBy);
                            if (message.start != null && message.hasOwnProperty("start"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.start);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.id);
                            if (message.account != null && message.hasOwnProperty("account"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.account);
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.name);
                            if (message.mobile != null && message.hasOwnProperty("mobile"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.mobile);
                            if (message.email != null && message.hasOwnProperty("email"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.email);
                            if (message.gender != null && message.hasOwnProperty("gender"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.gender);
                            if (message.deptName != null && message.hasOwnProperty("deptName"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.deptName);
                            if (message.position != null && message.hasOwnProperty("position"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.position);
                            if (message.password != null && message.hasOwnProperty("password"))
                                writer.uint32(/* id 12, wireType 2 =*/98).string(message.password);
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.avatar);
                            if (message.admin != null && message.hasOwnProperty("admin"))
                                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.admin);
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                writer.uint32(/* id 15, wireType 0 =*/120).int64(message.createDate);
                            if (message.number != null && message.hasOwnProperty("number"))
                                writer.uint32(/* id 16, wireType 2 =*/130).string(message.number);
                            if (message.entryTime != null && message.hasOwnProperty("entryTime"))
                                writer.uint32(/* id 17, wireType 0 =*/136).int64(message.entryTime);
                            if (message.birthday != null && message.hasOwnProperty("birthday"))
                                writer.uint32(/* id 18, wireType 0 =*/144).int64(message.birthday);
                            if (message.address != null && message.hasOwnProperty("address"))
                                writer.uint32(/* id 19, wireType 2 =*/154).string(message.address);
                            if (message.idcard != null && message.hasOwnProperty("idcard"))
                                writer.uint32(/* id 20, wireType 2 =*/162).string(message.idcard);
                            if (message.deptId != null && message.hasOwnProperty("deptId"))
                                writer.uint32(/* id 21, wireType 2 =*/170).string(message.deptId);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 22, wireType 0 =*/176).int32(message.state);
                            if (message.employeeNo != null && message.hasOwnProperty("employeeNo"))
                                writer.uint32(/* id 23, wireType 0 =*/184).int32(message.employeeNo);
                            if (message.token != null && message.hasOwnProperty("token"))
                                writer.uint32(/* id 24, wireType 2 =*/194).string(message.token);
                            return writer;
                        };

                        /**
                         * Encodes the specified Employee message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.employee.model.Employee.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IEmployee} message Employee message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Employee.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Employee message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.employee.model.Employee} Employee
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Employee.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.employee.model.Employee();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.orderBy = reader.string();
                                    break;
                                case 2:
                                    message.start = reader.int32();
                                    break;
                                case 3:
                                    message.pageSize = reader.int32();
                                    break;
                                case 4:
                                    message.id = reader.string();
                                    break;
                                case 5:
                                    message.account = reader.string();
                                    break;
                                case 6:
                                    message.name = reader.string();
                                    break;
                                case 7:
                                    message.mobile = reader.string();
                                    break;
                                case 8:
                                    message.email = reader.string();
                                    break;
                                case 9:
                                    message.gender = reader.int32();
                                    break;
                                case 10:
                                    message.deptName = reader.string();
                                    break;
                                case 11:
                                    message.position = reader.string();
                                    break;
                                case 12:
                                    message.password = reader.string();
                                    break;
                                case 13:
                                    message.avatar = reader.string();
                                    break;
                                case 14:
                                    message.admin = reader.int32();
                                    break;
                                case 15:
                                    message.createDate = reader.int64();
                                    break;
                                case 16:
                                    message.number = reader.string();
                                    break;
                                case 17:
                                    message.entryTime = reader.int64();
                                    break;
                                case 18:
                                    message.birthday = reader.int64();
                                    break;
                                case 19:
                                    message.address = reader.string();
                                    break;
                                case 20:
                                    message.idcard = reader.string();
                                    break;
                                case 21:
                                    message.deptId = reader.string();
                                    break;
                                case 22:
                                    message.state = reader.int32();
                                    break;
                                case 23:
                                    message.employeeNo = reader.int32();
                                    break;
                                case 24:
                                    message.token = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Employee message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.employee.model.Employee} Employee
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Employee.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Employee message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Employee.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.start != null && message.hasOwnProperty("start"))
                                if (!$util.isInteger(message.start))
                                    return "start: integer expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.account != null && message.hasOwnProperty("account"))
                                if (!$util.isString(message.account))
                                    return "account: string expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.mobile != null && message.hasOwnProperty("mobile"))
                                if (!$util.isString(message.mobile))
                                    return "mobile: string expected";
                            if (message.email != null && message.hasOwnProperty("email"))
                                if (!$util.isString(message.email))
                                    return "email: string expected";
                            if (message.gender != null && message.hasOwnProperty("gender"))
                                if (!$util.isInteger(message.gender))
                                    return "gender: integer expected";
                            if (message.deptName != null && message.hasOwnProperty("deptName"))
                                if (!$util.isString(message.deptName))
                                    return "deptName: string expected";
                            if (message.position != null && message.hasOwnProperty("position"))
                                if (!$util.isString(message.position))
                                    return "position: string expected";
                            if (message.password != null && message.hasOwnProperty("password"))
                                if (!$util.isString(message.password))
                                    return "password: string expected";
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                if (!$util.isString(message.avatar))
                                    return "avatar: string expected";
                            if (message.admin != null && message.hasOwnProperty("admin"))
                                if (!$util.isInteger(message.admin))
                                    return "admin: integer expected";
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (!$util.isInteger(message.createDate) && !(message.createDate && $util.isInteger(message.createDate.low) && $util.isInteger(message.createDate.high)))
                                    return "createDate: integer|Long expected";
                            if (message.number != null && message.hasOwnProperty("number"))
                                if (!$util.isString(message.number))
                                    return "number: string expected";
                            if (message.entryTime != null && message.hasOwnProperty("entryTime"))
                                if (!$util.isInteger(message.entryTime) && !(message.entryTime && $util.isInteger(message.entryTime.low) && $util.isInteger(message.entryTime.high)))
                                    return "entryTime: integer|Long expected";
                            if (message.birthday != null && message.hasOwnProperty("birthday"))
                                if (!$util.isInteger(message.birthday) && !(message.birthday && $util.isInteger(message.birthday.low) && $util.isInteger(message.birthday.high)))
                                    return "birthday: integer|Long expected";
                            if (message.address != null && message.hasOwnProperty("address"))
                                if (!$util.isString(message.address))
                                    return "address: string expected";
                            if (message.idcard != null && message.hasOwnProperty("idcard"))
                                if (!$util.isString(message.idcard))
                                    return "idcard: string expected";
                            if (message.deptId != null && message.hasOwnProperty("deptId"))
                                if (!$util.isString(message.deptId))
                                    return "deptId: string expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.employeeNo != null && message.hasOwnProperty("employeeNo"))
                                if (!$util.isInteger(message.employeeNo))
                                    return "employeeNo: integer expected";
                            if (message.token != null && message.hasOwnProperty("token"))
                                if (!$util.isString(message.token))
                                    return "token: string expected";
                            return null;
                        };

                        /**
                         * Creates an Employee message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.employee.model.Employee} Employee
                         */
                        Employee.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.employee.model.Employee)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.employee.model.Employee();
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.start != null)
                                message.start = object.start | 0;
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.account != null)
                                message.account = String(object.account);
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.mobile != null)
                                message.mobile = String(object.mobile);
                            if (object.email != null)
                                message.email = String(object.email);
                            if (object.gender != null)
                                message.gender = object.gender | 0;
                            if (object.deptName != null)
                                message.deptName = String(object.deptName);
                            if (object.position != null)
                                message.position = String(object.position);
                            if (object.password != null)
                                message.password = String(object.password);
                            if (object.avatar != null)
                                message.avatar = String(object.avatar);
                            if (object.admin != null)
                                message.admin = object.admin | 0;
                            if (object.createDate != null)
                                if ($util.Long)
                                    (message.createDate = $util.Long.fromValue(object.createDate)).unsigned = false;
                                else if (typeof object.createDate === "string")
                                    message.createDate = parseInt(object.createDate, 10);
                                else if (typeof object.createDate === "number")
                                    message.createDate = object.createDate;
                                else if (typeof object.createDate === "object")
                                    message.createDate = new $util.LongBits(object.createDate.low >>> 0, object.createDate.high >>> 0).toNumber();
                            if (object.number != null)
                                message.number = String(object.number);
                            if (object.entryTime != null)
                                if ($util.Long)
                                    (message.entryTime = $util.Long.fromValue(object.entryTime)).unsigned = false;
                                else if (typeof object.entryTime === "string")
                                    message.entryTime = parseInt(object.entryTime, 10);
                                else if (typeof object.entryTime === "number")
                                    message.entryTime = object.entryTime;
                                else if (typeof object.entryTime === "object")
                                    message.entryTime = new $util.LongBits(object.entryTime.low >>> 0, object.entryTime.high >>> 0).toNumber();
                            if (object.birthday != null)
                                if ($util.Long)
                                    (message.birthday = $util.Long.fromValue(object.birthday)).unsigned = false;
                                else if (typeof object.birthday === "string")
                                    message.birthday = parseInt(object.birthday, 10);
                                else if (typeof object.birthday === "number")
                                    message.birthday = object.birthday;
                                else if (typeof object.birthday === "object")
                                    message.birthday = new $util.LongBits(object.birthday.low >>> 0, object.birthday.high >>> 0).toNumber();
                            if (object.address != null)
                                message.address = String(object.address);
                            if (object.idcard != null)
                                message.idcard = String(object.idcard);
                            if (object.deptId != null)
                                message.deptId = String(object.deptId);
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.employeeNo != null)
                                message.employeeNo = object.employeeNo | 0;
                            if (object.token != null)
                                message.token = String(object.token);
                            return message;
                        };

                        /**
                         * Creates a plain object from an Employee message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.Employee} message Employee
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Employee.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.orderBy = "";
                                object.start = 0;
                                object.pageSize = 0;
                                object.id = "";
                                object.account = "";
                                object.name = "";
                                object.mobile = "";
                                object.email = "";
                                object.gender = 0;
                                object.deptName = "";
                                object.position = "";
                                object.password = "";
                                object.avatar = "";
                                object.admin = 0;
                                object.createDate = 0;
                                object.number = "";
                                object.entryTime = 0;
                                object.birthday = 0;
                                object.address = "";
                                object.idcard = "";
                                object.deptId = "";
                                object.state = 0;
                                object.employeeNo = 0;
                                object.token = "";
                            }
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.start != null && message.hasOwnProperty("start"))
                                object.start = message.start;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.account != null && message.hasOwnProperty("account"))
                                object.account = message.account;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.mobile != null && message.hasOwnProperty("mobile"))
                                object.mobile = message.mobile;
                            if (message.email != null && message.hasOwnProperty("email"))
                                object.email = message.email;
                            if (message.gender != null && message.hasOwnProperty("gender"))
                                object.gender = message.gender;
                            if (message.deptName != null && message.hasOwnProperty("deptName"))
                                object.deptName = message.deptName;
                            if (message.position != null && message.hasOwnProperty("position"))
                                object.position = message.position;
                            if (message.password != null && message.hasOwnProperty("password"))
                                object.password = message.password;
                            if (message.avatar != null && message.hasOwnProperty("avatar"))
                                object.avatar = message.avatar;
                            if (message.admin != null && message.hasOwnProperty("admin"))
                                object.admin = message.admin;
                            if (message.createDate != null && message.hasOwnProperty("createDate"))
                                if (typeof message.createDate === "number")
                                    object.createDate = options.longs === String ? String(message.createDate) : message.createDate;
                                else
                                    object.createDate = options.longs === String ? $util.Long.prototype.toString.call(message.createDate) : options.longs === Number ? new $util.LongBits(message.createDate.low >>> 0, message.createDate.high >>> 0).toNumber() : message.createDate;
                            if (message.number != null && message.hasOwnProperty("number"))
                                object.number = message.number;
                            if (message.entryTime != null && message.hasOwnProperty("entryTime"))
                                if (typeof message.entryTime === "number")
                                    object.entryTime = options.longs === String ? String(message.entryTime) : message.entryTime;
                                else
                                    object.entryTime = options.longs === String ? $util.Long.prototype.toString.call(message.entryTime) : options.longs === Number ? new $util.LongBits(message.entryTime.low >>> 0, message.entryTime.high >>> 0).toNumber() : message.entryTime;
                            if (message.birthday != null && message.hasOwnProperty("birthday"))
                                if (typeof message.birthday === "number")
                                    object.birthday = options.longs === String ? String(message.birthday) : message.birthday;
                                else
                                    object.birthday = options.longs === String ? $util.Long.prototype.toString.call(message.birthday) : options.longs === Number ? new $util.LongBits(message.birthday.low >>> 0, message.birthday.high >>> 0).toNumber() : message.birthday;
                            if (message.address != null && message.hasOwnProperty("address"))
                                object.address = message.address;
                            if (message.idcard != null && message.hasOwnProperty("idcard"))
                                object.idcard = message.idcard;
                            if (message.deptId != null && message.hasOwnProperty("deptId"))
                                object.deptId = message.deptId;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.employeeNo != null && message.hasOwnProperty("employeeNo"))
                                object.employeeNo = message.employeeNo;
                            if (message.token != null && message.hasOwnProperty("token"))
                                object.token = message.token;
                            return object;
                        };

                        /**
                         * Converts this Employee to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.employee.model.Employee
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Employee.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Employee;
                    })();

                    model.App = (function() {

                        /**
                         * Properties of an App.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @interface IApp
                         * @property {string|null} [id] App id
                         * @property {string|null} [name] App name
                         * @property {string|null} [description] App description
                         */

                        /**
                         * Constructs a new App.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @classdesc Represents an App.
                         * @implements IApp
                         * @constructor
                         * @param {com.xueershangda.tianxun.employee.model.IApp=} [properties] Properties to set
                         */
                        function App(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * App id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @instance
                         */
                        App.prototype.id = "";

                        /**
                         * App name.
                         * @member {string} name
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @instance
                         */
                        App.prototype.name = "";

                        /**
                         * App description.
                         * @member {string} description
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @instance
                         */
                        App.prototype.description = "";

                        /**
                         * Creates a new App instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IApp=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.employee.model.App} App instance
                         */
                        App.create = function create(properties) {
                            return new App(properties);
                        };

                        /**
                         * Encodes the specified App message. Does not implicitly {@link com.xueershangda.tianxun.employee.model.App.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IApp} message App message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        App.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                            if (message.description != null && message.hasOwnProperty("description"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                            return writer;
                        };

                        /**
                         * Encodes the specified App message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.employee.model.App.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IApp} message App message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        App.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an App message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.employee.model.App} App
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        App.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.employee.model.App();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.name = reader.string();
                                    break;
                                case 3:
                                    message.description = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an App message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.employee.model.App} App
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        App.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an App message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        App.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            return null;
                        };

                        /**
                         * Creates an App message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.employee.model.App} App
                         */
                        App.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.employee.model.App)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.employee.model.App();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.description != null)
                                message.description = String(object.description);
                            return message;
                        };

                        /**
                         * Creates a plain object from an App message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.App} message App
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        App.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.name = "";
                                object.description = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            return object;
                        };

                        /**
                         * Converts this App to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.employee.model.App
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        App.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return App;
                    })();

                    model.Menu = (function() {

                        /**
                         * Properties of a Menu.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @interface IMenu
                         * @property {string|null} [id] Menu id
                         * @property {string|null} [text] Menu text
                         * @property {string|null} [i18n] Menu i18n
                         * @property {boolean|null} [group] Menu group
                         * @property {boolean|null} [hideInBreadcrumb] Menu hideInBreadcrumb
                         * @property {Array.<com.xueershangda.tianxun.employee.model.ISubmenu>|null} [children] Menu children
                         * @property {string|null} [name] Menu name
                         * @property {boolean|null} [enabled] Menu enabled
                         * @property {number|null} [orders] Menu orders
                         * @property {number|null} [state] Menu state
                         * @property {string|null} [icon] Menu icon
                         * @property {boolean|null} [initial] Menu initial
                         */

                        /**
                         * Constructs a new Menu.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @classdesc Represents a Menu.
                         * @implements IMenu
                         * @constructor
                         * @param {com.xueershangda.tianxun.employee.model.IMenu=} [properties] Properties to set
                         */
                        function Menu(properties) {
                            this.children = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Menu id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.id = "";

                        /**
                         * Menu text.
                         * @member {string} text
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.text = "";

                        /**
                         * Menu i18n.
                         * @member {string} i18n
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.i18n = "";

                        /**
                         * Menu group.
                         * @member {boolean} group
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.group = false;

                        /**
                         * Menu hideInBreadcrumb.
                         * @member {boolean} hideInBreadcrumb
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.hideInBreadcrumb = false;

                        /**
                         * Menu children.
                         * @member {Array.<com.xueershangda.tianxun.employee.model.ISubmenu>} children
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.children = $util.emptyArray;

                        /**
                         * Menu name.
                         * @member {string} name
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.name = "";

                        /**
                         * Menu enabled.
                         * @member {boolean} enabled
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.enabled = false;

                        /**
                         * Menu orders.
                         * @member {number} orders
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.orders = 0;

                        /**
                         * Menu state.
                         * @member {number} state
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.state = 0;

                        /**
                         * Menu icon.
                         * @member {string} icon
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.icon = "";

                        /**
                         * Menu initial.
                         * @member {boolean} initial
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         */
                        Menu.prototype.initial = false;

                        /**
                         * Creates a new Menu instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IMenu=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.employee.model.Menu} Menu instance
                         */
                        Menu.create = function create(properties) {
                            return new Menu(properties);
                        };

                        /**
                         * Encodes the specified Menu message. Does not implicitly {@link com.xueershangda.tianxun.employee.model.Menu.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IMenu} message Menu message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Menu.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.text != null && message.hasOwnProperty("text"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                            if (message.i18n != null && message.hasOwnProperty("i18n"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.i18n);
                            if (message.group != null && message.hasOwnProperty("group"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.group);
                            if (message.hideInBreadcrumb != null && message.hasOwnProperty("hideInBreadcrumb"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.hideInBreadcrumb);
                            if (message.children != null && message.children.length)
                                for (let i = 0; i < message.children.length; ++i)
                                    $root.com.xueershangda.tianxun.employee.model.Submenu.encode(message.children[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.name);
                            if (message.enabled != null && message.hasOwnProperty("enabled"))
                                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.enabled);
                            if (message.orders != null && message.hasOwnProperty("orders"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.orders);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.state);
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.icon);
                            if (message.initial != null && message.hasOwnProperty("initial"))
                                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.initial);
                            return writer;
                        };

                        /**
                         * Encodes the specified Menu message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.employee.model.Menu.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IMenu} message Menu message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Menu.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Menu message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.employee.model.Menu} Menu
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Menu.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.employee.model.Menu();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.text = reader.string();
                                    break;
                                case 3:
                                    message.i18n = reader.string();
                                    break;
                                case 4:
                                    message.group = reader.bool();
                                    break;
                                case 5:
                                    message.hideInBreadcrumb = reader.bool();
                                    break;
                                case 6:
                                    if (!(message.children && message.children.length))
                                        message.children = [];
                                    message.children.push($root.com.xueershangda.tianxun.employee.model.Submenu.decode(reader, reader.uint32()));
                                    break;
                                case 7:
                                    message.name = reader.string();
                                    break;
                                case 8:
                                    message.enabled = reader.bool();
                                    break;
                                case 9:
                                    message.orders = reader.int32();
                                    break;
                                case 10:
                                    message.state = reader.int32();
                                    break;
                                case 11:
                                    message.icon = reader.string();
                                    break;
                                case 12:
                                    message.initial = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Menu message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.employee.model.Menu} Menu
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Menu.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Menu message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Menu.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.i18n != null && message.hasOwnProperty("i18n"))
                                if (!$util.isString(message.i18n))
                                    return "i18n: string expected";
                            if (message.group != null && message.hasOwnProperty("group"))
                                if (typeof message.group !== "boolean")
                                    return "group: boolean expected";
                            if (message.hideInBreadcrumb != null && message.hasOwnProperty("hideInBreadcrumb"))
                                if (typeof message.hideInBreadcrumb !== "boolean")
                                    return "hideInBreadcrumb: boolean expected";
                            if (message.children != null && message.hasOwnProperty("children")) {
                                if (!Array.isArray(message.children))
                                    return "children: array expected";
                                for (let i = 0; i < message.children.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.employee.model.Submenu.verify(message.children[i]);
                                    if (error)
                                        return "children." + error;
                                }
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.enabled != null && message.hasOwnProperty("enabled"))
                                if (typeof message.enabled !== "boolean")
                                    return "enabled: boolean expected";
                            if (message.orders != null && message.hasOwnProperty("orders"))
                                if (!$util.isInteger(message.orders))
                                    return "orders: integer expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                if (!$util.isString(message.icon))
                                    return "icon: string expected";
                            if (message.initial != null && message.hasOwnProperty("initial"))
                                if (typeof message.initial !== "boolean")
                                    return "initial: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a Menu message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.employee.model.Menu} Menu
                         */
                        Menu.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.employee.model.Menu)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.employee.model.Menu();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.i18n != null)
                                message.i18n = String(object.i18n);
                            if (object.group != null)
                                message.group = Boolean(object.group);
                            if (object.hideInBreadcrumb != null)
                                message.hideInBreadcrumb = Boolean(object.hideInBreadcrumb);
                            if (object.children) {
                                if (!Array.isArray(object.children))
                                    throw TypeError(".com.xueershangda.tianxun.employee.model.Menu.children: array expected");
                                message.children = [];
                                for (let i = 0; i < object.children.length; ++i) {
                                    if (typeof object.children[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.employee.model.Menu.children: object expected");
                                    message.children[i] = $root.com.xueershangda.tianxun.employee.model.Submenu.fromObject(object.children[i]);
                                }
                            }
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.enabled != null)
                                message.enabled = Boolean(object.enabled);
                            if (object.orders != null)
                                message.orders = object.orders | 0;
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.icon != null)
                                message.icon = String(object.icon);
                            if (object.initial != null)
                                message.initial = Boolean(object.initial);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Menu message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.Menu} message Menu
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Menu.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.children = [];
                            if (options.defaults) {
                                object.id = "";
                                object.text = "";
                                object.i18n = "";
                                object.group = false;
                                object.hideInBreadcrumb = false;
                                object.name = "";
                                object.enabled = false;
                                object.orders = 0;
                                object.state = 0;
                                object.icon = "";
                                object.initial = false;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.i18n != null && message.hasOwnProperty("i18n"))
                                object.i18n = message.i18n;
                            if (message.group != null && message.hasOwnProperty("group"))
                                object.group = message.group;
                            if (message.hideInBreadcrumb != null && message.hasOwnProperty("hideInBreadcrumb"))
                                object.hideInBreadcrumb = message.hideInBreadcrumb;
                            if (message.children && message.children.length) {
                                object.children = [];
                                for (let j = 0; j < message.children.length; ++j)
                                    object.children[j] = $root.com.xueershangda.tianxun.employee.model.Submenu.toObject(message.children[j], options);
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.enabled != null && message.hasOwnProperty("enabled"))
                                object.enabled = message.enabled;
                            if (message.orders != null && message.hasOwnProperty("orders"))
                                object.orders = message.orders;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                object.icon = message.icon;
                            if (message.initial != null && message.hasOwnProperty("initial"))
                                object.initial = message.initial;
                            return object;
                        };

                        /**
                         * Converts this Menu to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.employee.model.Menu
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Menu.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Menu;
                    })();

                    model.Submenu = (function() {

                        /**
                         * Properties of a Submenu.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @interface ISubmenu
                         * @property {string|null} [id] Submenu id
                         * @property {string|null} [text] Submenu text
                         * @property {string|null} [i18n] Submenu i18n
                         * @property {string|null} [icon] Submenu icon
                         * @property {string|null} [link] Submenu link
                         * @property {Array.<com.xueershangda.tianxun.employee.model.IMenuItem>|null} [children] Submenu children
                         * @property {boolean|null} [shortcutRoot] Submenu shortcutRoot
                         */

                        /**
                         * Constructs a new Submenu.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @classdesc Represents a Submenu.
                         * @implements ISubmenu
                         * @constructor
                         * @param {com.xueershangda.tianxun.employee.model.ISubmenu=} [properties] Properties to set
                         */
                        function Submenu(properties) {
                            this.children = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Submenu id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @instance
                         */
                        Submenu.prototype.id = "";

                        /**
                         * Submenu text.
                         * @member {string} text
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @instance
                         */
                        Submenu.prototype.text = "";

                        /**
                         * Submenu i18n.
                         * @member {string} i18n
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @instance
                         */
                        Submenu.prototype.i18n = "";

                        /**
                         * Submenu icon.
                         * @member {string} icon
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @instance
                         */
                        Submenu.prototype.icon = "";

                        /**
                         * Submenu link.
                         * @member {string} link
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @instance
                         */
                        Submenu.prototype.link = "";

                        /**
                         * Submenu children.
                         * @member {Array.<com.xueershangda.tianxun.employee.model.IMenuItem>} children
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @instance
                         */
                        Submenu.prototype.children = $util.emptyArray;

                        /**
                         * Submenu shortcutRoot.
                         * @member {boolean} shortcutRoot
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @instance
                         */
                        Submenu.prototype.shortcutRoot = false;

                        /**
                         * Creates a new Submenu instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.ISubmenu=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.employee.model.Submenu} Submenu instance
                         */
                        Submenu.create = function create(properties) {
                            return new Submenu(properties);
                        };

                        /**
                         * Encodes the specified Submenu message. Does not implicitly {@link com.xueershangda.tianxun.employee.model.Submenu.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.ISubmenu} message Submenu message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Submenu.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.text != null && message.hasOwnProperty("text"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                            if (message.i18n != null && message.hasOwnProperty("i18n"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.i18n);
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.icon);
                            if (message.link != null && message.hasOwnProperty("link"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.link);
                            if (message.children != null && message.children.length)
                                for (let i = 0; i < message.children.length; ++i)
                                    $root.com.xueershangda.tianxun.employee.model.MenuItem.encode(message.children[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.shortcutRoot != null && message.hasOwnProperty("shortcutRoot"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.shortcutRoot);
                            return writer;
                        };

                        /**
                         * Encodes the specified Submenu message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.employee.model.Submenu.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.ISubmenu} message Submenu message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Submenu.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Submenu message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.employee.model.Submenu} Submenu
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Submenu.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.employee.model.Submenu();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.text = reader.string();
                                    break;
                                case 3:
                                    message.i18n = reader.string();
                                    break;
                                case 4:
                                    message.icon = reader.string();
                                    break;
                                case 5:
                                    message.link = reader.string();
                                    break;
                                case 6:
                                    if (!(message.children && message.children.length))
                                        message.children = [];
                                    message.children.push($root.com.xueershangda.tianxun.employee.model.MenuItem.decode(reader, reader.uint32()));
                                    break;
                                case 7:
                                    message.shortcutRoot = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Submenu message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.employee.model.Submenu} Submenu
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Submenu.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Submenu message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Submenu.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.i18n != null && message.hasOwnProperty("i18n"))
                                if (!$util.isString(message.i18n))
                                    return "i18n: string expected";
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                if (!$util.isString(message.icon))
                                    return "icon: string expected";
                            if (message.link != null && message.hasOwnProperty("link"))
                                if (!$util.isString(message.link))
                                    return "link: string expected";
                            if (message.children != null && message.hasOwnProperty("children")) {
                                if (!Array.isArray(message.children))
                                    return "children: array expected";
                                for (let i = 0; i < message.children.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.employee.model.MenuItem.verify(message.children[i]);
                                    if (error)
                                        return "children." + error;
                                }
                            }
                            if (message.shortcutRoot != null && message.hasOwnProperty("shortcutRoot"))
                                if (typeof message.shortcutRoot !== "boolean")
                                    return "shortcutRoot: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a Submenu message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.employee.model.Submenu} Submenu
                         */
                        Submenu.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.employee.model.Submenu)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.employee.model.Submenu();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.i18n != null)
                                message.i18n = String(object.i18n);
                            if (object.icon != null)
                                message.icon = String(object.icon);
                            if (object.link != null)
                                message.link = String(object.link);
                            if (object.children) {
                                if (!Array.isArray(object.children))
                                    throw TypeError(".com.xueershangda.tianxun.employee.model.Submenu.children: array expected");
                                message.children = [];
                                for (let i = 0; i < object.children.length; ++i) {
                                    if (typeof object.children[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.employee.model.Submenu.children: object expected");
                                    message.children[i] = $root.com.xueershangda.tianxun.employee.model.MenuItem.fromObject(object.children[i]);
                                }
                            }
                            if (object.shortcutRoot != null)
                                message.shortcutRoot = Boolean(object.shortcutRoot);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Submenu message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.Submenu} message Submenu
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Submenu.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.children = [];
                            if (options.defaults) {
                                object.id = "";
                                object.text = "";
                                object.i18n = "";
                                object.icon = "";
                                object.link = "";
                                object.shortcutRoot = false;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.i18n != null && message.hasOwnProperty("i18n"))
                                object.i18n = message.i18n;
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                object.icon = message.icon;
                            if (message.link != null && message.hasOwnProperty("link"))
                                object.link = message.link;
                            if (message.children && message.children.length) {
                                object.children = [];
                                for (let j = 0; j < message.children.length; ++j)
                                    object.children[j] = $root.com.xueershangda.tianxun.employee.model.MenuItem.toObject(message.children[j], options);
                            }
                            if (message.shortcutRoot != null && message.hasOwnProperty("shortcutRoot"))
                                object.shortcutRoot = message.shortcutRoot;
                            return object;
                        };

                        /**
                         * Converts this Submenu to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.employee.model.Submenu
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Submenu.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Submenu;
                    })();

                    model.MenuItem = (function() {

                        /**
                         * Properties of a MenuItem.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @interface IMenuItem
                         * @property {string|null} [id] MenuItem id
                         * @property {string|null} [text] MenuItem text
                         * @property {string|null} [i18n] MenuItem i18n
                         * @property {string|null} [link] MenuItem link
                         * @property {boolean|null} [shortcut] MenuItem shortcut
                         * @property {boolean|null} [reuse] MenuItem reuse
                         */

                        /**
                         * Constructs a new MenuItem.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @classdesc Represents a MenuItem.
                         * @implements IMenuItem
                         * @constructor
                         * @param {com.xueershangda.tianxun.employee.model.IMenuItem=} [properties] Properties to set
                         */
                        function MenuItem(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * MenuItem id.
                         * @member {string} id
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @instance
                         */
                        MenuItem.prototype.id = "";

                        /**
                         * MenuItem text.
                         * @member {string} text
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @instance
                         */
                        MenuItem.prototype.text = "";

                        /**
                         * MenuItem i18n.
                         * @member {string} i18n
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @instance
                         */
                        MenuItem.prototype.i18n = "";

                        /**
                         * MenuItem link.
                         * @member {string} link
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @instance
                         */
                        MenuItem.prototype.link = "";

                        /**
                         * MenuItem shortcut.
                         * @member {boolean} shortcut
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @instance
                         */
                        MenuItem.prototype.shortcut = false;

                        /**
                         * MenuItem reuse.
                         * @member {boolean} reuse
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @instance
                         */
                        MenuItem.prototype.reuse = false;

                        /**
                         * Creates a new MenuItem instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IMenuItem=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.employee.model.MenuItem} MenuItem instance
                         */
                        MenuItem.create = function create(properties) {
                            return new MenuItem(properties);
                        };

                        /**
                         * Encodes the specified MenuItem message. Does not implicitly {@link com.xueershangda.tianxun.employee.model.MenuItem.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IMenuItem} message MenuItem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MenuItem.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.text != null && message.hasOwnProperty("text"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                            if (message.i18n != null && message.hasOwnProperty("i18n"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.i18n);
                            if (message.link != null && message.hasOwnProperty("link"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.link);
                            if (message.shortcut != null && message.hasOwnProperty("shortcut"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.shortcut);
                            if (message.reuse != null && message.hasOwnProperty("reuse"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.reuse);
                            return writer;
                        };

                        /**
                         * Encodes the specified MenuItem message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.employee.model.MenuItem.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.IMenuItem} message MenuItem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MenuItem.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a MenuItem message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.employee.model.MenuItem} MenuItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MenuItem.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.employee.model.MenuItem();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.text = reader.string();
                                    break;
                                case 3:
                                    message.i18n = reader.string();
                                    break;
                                case 4:
                                    message.link = reader.string();
                                    break;
                                case 5:
                                    message.shortcut = reader.bool();
                                    break;
                                case 6:
                                    message.reuse = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a MenuItem message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.employee.model.MenuItem} MenuItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MenuItem.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a MenuItem message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        MenuItem.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.i18n != null && message.hasOwnProperty("i18n"))
                                if (!$util.isString(message.i18n))
                                    return "i18n: string expected";
                            if (message.link != null && message.hasOwnProperty("link"))
                                if (!$util.isString(message.link))
                                    return "link: string expected";
                            if (message.shortcut != null && message.hasOwnProperty("shortcut"))
                                if (typeof message.shortcut !== "boolean")
                                    return "shortcut: boolean expected";
                            if (message.reuse != null && message.hasOwnProperty("reuse"))
                                if (typeof message.reuse !== "boolean")
                                    return "reuse: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a MenuItem message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.employee.model.MenuItem} MenuItem
                         */
                        MenuItem.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.employee.model.MenuItem)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.employee.model.MenuItem();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.i18n != null)
                                message.i18n = String(object.i18n);
                            if (object.link != null)
                                message.link = String(object.link);
                            if (object.shortcut != null)
                                message.shortcut = Boolean(object.shortcut);
                            if (object.reuse != null)
                                message.reuse = Boolean(object.reuse);
                            return message;
                        };

                        /**
                         * Creates a plain object from a MenuItem message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.MenuItem} message MenuItem
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        MenuItem.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.text = "";
                                object.i18n = "";
                                object.link = "";
                                object.shortcut = false;
                                object.reuse = false;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.i18n != null && message.hasOwnProperty("i18n"))
                                object.i18n = message.i18n;
                            if (message.link != null && message.hasOwnProperty("link"))
                                object.link = message.link;
                            if (message.shortcut != null && message.hasOwnProperty("shortcut"))
                                object.shortcut = message.shortcut;
                            if (message.reuse != null && message.hasOwnProperty("reuse"))
                                object.reuse = message.reuse;
                            return object;
                        };

                        /**
                         * Converts this MenuItem to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.employee.model.MenuItem
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        MenuItem.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return MenuItem;
                    })();

                    model.LoginReply = (function() {

                        /**
                         * Properties of a LoginReply.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @interface ILoginReply
                         * @property {com.xueershangda.tianxun.employee.model.IApp|null} [app] LoginReply app
                         * @property {com.xueershangda.tianxun.employee.model.IEmployee|null} [user] LoginReply user
                         * @property {Array.<com.xueershangda.tianxun.employee.model.IMenu>|null} [menu] LoginReply menu
                         * @property {number|null} [code] LoginReply code
                         * @property {string|null} [message] LoginReply message
                         */

                        /**
                         * Constructs a new LoginReply.
                         * @memberof com.xueershangda.tianxun.employee.model
                         * @classdesc Represents a LoginReply.
                         * @implements ILoginReply
                         * @constructor
                         * @param {com.xueershangda.tianxun.employee.model.ILoginReply=} [properties] Properties to set
                         */
                        function LoginReply(properties) {
                            this.menu = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * LoginReply app.
                         * @member {com.xueershangda.tianxun.employee.model.IApp|null|undefined} app
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @instance
                         */
                        LoginReply.prototype.app = null;

                        /**
                         * LoginReply user.
                         * @member {com.xueershangda.tianxun.employee.model.IEmployee|null|undefined} user
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @instance
                         */
                        LoginReply.prototype.user = null;

                        /**
                         * LoginReply menu.
                         * @member {Array.<com.xueershangda.tianxun.employee.model.IMenu>} menu
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @instance
                         */
                        LoginReply.prototype.menu = $util.emptyArray;

                        /**
                         * LoginReply code.
                         * @member {number} code
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @instance
                         */
                        LoginReply.prototype.code = 0;

                        /**
                         * LoginReply message.
                         * @member {string} message
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @instance
                         */
                        LoginReply.prototype.message = "";

                        /**
                         * Creates a new LoginReply instance using the specified properties.
                         * @function create
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.ILoginReply=} [properties] Properties to set
                         * @returns {com.xueershangda.tianxun.employee.model.LoginReply} LoginReply instance
                         */
                        LoginReply.create = function create(properties) {
                            return new LoginReply(properties);
                        };

                        /**
                         * Encodes the specified LoginReply message. Does not implicitly {@link com.xueershangda.tianxun.employee.model.LoginReply.verify|verify} messages.
                         * @function encode
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.ILoginReply} message LoginReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LoginReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.app != null && message.hasOwnProperty("app"))
                                $root.com.xueershangda.tianxun.employee.model.App.encode(message.app, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.user != null && message.hasOwnProperty("user"))
                                $root.com.xueershangda.tianxun.employee.model.Employee.encode(message.user, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.menu != null && message.menu.length)
                                for (let i = 0; i < message.menu.length; ++i)
                                    $root.com.xueershangda.tianxun.employee.model.Menu.encode(message.menu[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.code != null && message.hasOwnProperty("code"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.code);
                            if (message.message != null && message.hasOwnProperty("message"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.message);
                            return writer;
                        };

                        /**
                         * Encodes the specified LoginReply message, length delimited. Does not implicitly {@link com.xueershangda.tianxun.employee.model.LoginReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.ILoginReply} message LoginReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LoginReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a LoginReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {com.xueershangda.tianxun.employee.model.LoginReply} LoginReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LoginReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.xueershangda.tianxun.employee.model.LoginReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.app = $root.com.xueershangda.tianxun.employee.model.App.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.user = $root.com.xueershangda.tianxun.employee.model.Employee.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    if (!(message.menu && message.menu.length))
                                        message.menu = [];
                                    message.menu.push($root.com.xueershangda.tianxun.employee.model.Menu.decode(reader, reader.uint32()));
                                    break;
                                case 4:
                                    message.code = reader.int32();
                                    break;
                                case 5:
                                    message.message = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a LoginReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {com.xueershangda.tianxun.employee.model.LoginReply} LoginReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LoginReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a LoginReply message.
                         * @function verify
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LoginReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.app != null && message.hasOwnProperty("app")) {
                                let error = $root.com.xueershangda.tianxun.employee.model.App.verify(message.app);
                                if (error)
                                    return "app." + error;
                            }
                            if (message.user != null && message.hasOwnProperty("user")) {
                                let error = $root.com.xueershangda.tianxun.employee.model.Employee.verify(message.user);
                                if (error)
                                    return "user." + error;
                            }
                            if (message.menu != null && message.hasOwnProperty("menu")) {
                                if (!Array.isArray(message.menu))
                                    return "menu: array expected";
                                for (let i = 0; i < message.menu.length; ++i) {
                                    let error = $root.com.xueershangda.tianxun.employee.model.Menu.verify(message.menu[i]);
                                    if (error)
                                        return "menu." + error;
                                }
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            return null;
                        };

                        /**
                         * Creates a LoginReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {com.xueershangda.tianxun.employee.model.LoginReply} LoginReply
                         */
                        LoginReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.com.xueershangda.tianxun.employee.model.LoginReply)
                                return object;
                            let message = new $root.com.xueershangda.tianxun.employee.model.LoginReply();
                            if (object.app != null) {
                                if (typeof object.app !== "object")
                                    throw TypeError(".com.xueershangda.tianxun.employee.model.LoginReply.app: object expected");
                                message.app = $root.com.xueershangda.tianxun.employee.model.App.fromObject(object.app);
                            }
                            if (object.user != null) {
                                if (typeof object.user !== "object")
                                    throw TypeError(".com.xueershangda.tianxun.employee.model.LoginReply.user: object expected");
                                message.user = $root.com.xueershangda.tianxun.employee.model.Employee.fromObject(object.user);
                            }
                            if (object.menu) {
                                if (!Array.isArray(object.menu))
                                    throw TypeError(".com.xueershangda.tianxun.employee.model.LoginReply.menu: array expected");
                                message.menu = [];
                                for (let i = 0; i < object.menu.length; ++i) {
                                    if (typeof object.menu[i] !== "object")
                                        throw TypeError(".com.xueershangda.tianxun.employee.model.LoginReply.menu: object expected");
                                    message.menu[i] = $root.com.xueershangda.tianxun.employee.model.Menu.fromObject(object.menu[i]);
                                }
                            }
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            return message;
                        };

                        /**
                         * Creates a plain object from a LoginReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @static
                         * @param {com.xueershangda.tianxun.employee.model.LoginReply} message LoginReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LoginReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.menu = [];
                            if (options.defaults) {
                                object.app = null;
                                object.user = null;
                                object.code = 0;
                                object.message = "";
                            }
                            if (message.app != null && message.hasOwnProperty("app"))
                                object.app = $root.com.xueershangda.tianxun.employee.model.App.toObject(message.app, options);
                            if (message.user != null && message.hasOwnProperty("user"))
                                object.user = $root.com.xueershangda.tianxun.employee.model.Employee.toObject(message.user, options);
                            if (message.menu && message.menu.length) {
                                object.menu = [];
                                for (let j = 0; j < message.menu.length; ++j)
                                    object.menu[j] = $root.com.xueershangda.tianxun.employee.model.Menu.toObject(message.menu[j], options);
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            return object;
                        };

                        /**
                         * Converts this LoginReply to JSON.
                         * @function toJSON
                         * @memberof com.xueershangda.tianxun.employee.model.LoginReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LoginReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return LoginReply;
                    })();

                    return model;
                })();

                return employee;
            })();

            return tianxun;
        })();

        return xueershangda;
    })();

    com.vteba = (function() {

        /**
         * Namespace vteba.
         * @memberof com
         * @namespace
         */
        const vteba = {};

        vteba.web = (function() {

            /**
             * Namespace web.
             * @memberof com.vteba
             * @namespace
             */
            const web = {};

            web.action = (function() {

                /**
                 * Namespace action.
                 * @memberof com.vteba.web
                 * @namespace
                 */
                const action = {};

                action.JsonBean = (function() {

                    /**
                     * Properties of a JsonBean.
                     * @memberof com.vteba.web.action
                     * @interface IJsonBean
                     * @property {number|null} [code] JsonBean code
                     * @property {string|null} [message] JsonBean message
                     * @property {google.protobuf.IAny|null} [data] JsonBean data
                     */

                    /**
                     * Constructs a new JsonBean.
                     * @memberof com.vteba.web.action
                     * @classdesc Represents a JsonBean.
                     * @implements IJsonBean
                     * @constructor
                     * @param {com.vteba.web.action.IJsonBean=} [properties] Properties to set
                     */
                    function JsonBean(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * JsonBean code.
                     * @member {number} code
                     * @memberof com.vteba.web.action.JsonBean
                     * @instance
                     */
                    JsonBean.prototype.code = 0;

                    /**
                     * JsonBean message.
                     * @member {string} message
                     * @memberof com.vteba.web.action.JsonBean
                     * @instance
                     */
                    JsonBean.prototype.message = "";

                    /**
                     * JsonBean data.
                     * @member {google.protobuf.IAny|null|undefined} data
                     * @memberof com.vteba.web.action.JsonBean
                     * @instance
                     */
                    JsonBean.prototype.data = null;

                    /**
                     * Creates a new JsonBean instance using the specified properties.
                     * @function create
                     * @memberof com.vteba.web.action.JsonBean
                     * @static
                     * @param {com.vteba.web.action.IJsonBean=} [properties] Properties to set
                     * @returns {com.vteba.web.action.JsonBean} JsonBean instance
                     */
                    JsonBean.create = function create(properties) {
                        return new JsonBean(properties);
                    };

                    /**
                     * Encodes the specified JsonBean message. Does not implicitly {@link com.vteba.web.action.JsonBean.verify|verify} messages.
                     * @function encode
                     * @memberof com.vteba.web.action.JsonBean
                     * @static
                     * @param {com.vteba.web.action.IJsonBean} message JsonBean message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    JsonBean.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.code != null && message.hasOwnProperty("code"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                        if (message.message != null && message.hasOwnProperty("message"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                        if (message.data != null && message.hasOwnProperty("data"))
                            $root.google.protobuf.Any.encode(message.data, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified JsonBean message, length delimited. Does not implicitly {@link com.vteba.web.action.JsonBean.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.vteba.web.action.JsonBean
                     * @static
                     * @param {com.vteba.web.action.IJsonBean} message JsonBean message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    JsonBean.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a JsonBean message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.vteba.web.action.JsonBean
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.vteba.web.action.JsonBean} JsonBean
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    JsonBean.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.vteba.web.action.JsonBean();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.code = reader.int32();
                                break;
                            case 2:
                                message.message = reader.string();
                                break;
                            case 3:
                                message.data = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a JsonBean message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.vteba.web.action.JsonBean
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.vteba.web.action.JsonBean} JsonBean
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    JsonBean.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a JsonBean message.
                     * @function verify
                     * @memberof com.vteba.web.action.JsonBean
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    JsonBean.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.code != null && message.hasOwnProperty("code"))
                            if (!$util.isInteger(message.code))
                                return "code: integer expected";
                        if (message.message != null && message.hasOwnProperty("message"))
                            if (!$util.isString(message.message))
                                return "message: string expected";
                        if (message.data != null && message.hasOwnProperty("data")) {
                            let error = $root.google.protobuf.Any.verify(message.data);
                            if (error)
                                return "data." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a JsonBean message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.vteba.web.action.JsonBean
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.vteba.web.action.JsonBean} JsonBean
                     */
                    JsonBean.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.vteba.web.action.JsonBean)
                            return object;
                        let message = new $root.com.vteba.web.action.JsonBean();
                        if (object.code != null)
                            message.code = object.code | 0;
                        if (object.message != null)
                            message.message = String(object.message);
                        if (object.data != null) {
                            if (typeof object.data !== "object")
                                throw TypeError(".com.vteba.web.action.JsonBean.data: object expected");
                            message.data = $root.google.protobuf.Any.fromObject(object.data);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a JsonBean message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.vteba.web.action.JsonBean
                     * @static
                     * @param {com.vteba.web.action.JsonBean} message JsonBean
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    JsonBean.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.code = 0;
                            object.message = "";
                            object.data = null;
                        }
                        if (message.code != null && message.hasOwnProperty("code"))
                            object.code = message.code;
                        if (message.message != null && message.hasOwnProperty("message"))
                            object.message = message.message;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = $root.google.protobuf.Any.toObject(message.data, options);
                        return object;
                    };

                    /**
                     * Converts this JsonBean to JSON.
                     * @function toJSON
                     * @memberof com.vteba.web.action.JsonBean
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    JsonBean.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return JsonBean;
                })();

                return action;
            })();

            return web;
        })();

        return vteba;
    })();

    return com;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.Any = (function() {

            /**
             * Properties of an Any.
             * @memberof google.protobuf
             * @interface IAny
             * @property {string|null} [type_url] Any type_url
             * @property {Uint8Array|null} [value] Any value
             */

            /**
             * Constructs a new Any.
             * @memberof google.protobuf
             * @classdesc Represents an Any.
             * @implements IAny
             * @constructor
             * @param {google.protobuf.IAny=} [properties] Properties to set
             */
            function Any(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Any type_url.
             * @member {string} type_url
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.type_url = "";

            /**
             * Any value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.value = $util.newBuffer([]);

            /**
             * Creates a new Any instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny=} [properties] Properties to set
             * @returns {google.protobuf.Any} Any instance
             */
            Any.create = function create(properties) {
                return new Any(properties);
            };

            /**
             * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };

            /**
             * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Any message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type_url = reader.string();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Any message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Any message.
             * @function verify
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Any.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    if (!$util.isString(message.type_url))
                        return "type_url: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };

            /**
             * Creates an Any message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Any} Any
             */
            Any.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Any)
                    return object;
                let message = new $root.google.protobuf.Any();
                if (object.type_url != null)
                    message.type_url = String(object.type_url);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };

            /**
             * Creates a plain object from an Any message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.Any} message Any
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Any.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type_url = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    object.type_url = message.type_url;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };

            /**
             * Converts this Any to JSON.
             * @function toJSON
             * @memberof google.protobuf.Any
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Any.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Any;
        })();

        return protobuf;
    })();

    return google;
})();

export { $root as default };
